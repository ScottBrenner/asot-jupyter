<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://scottbrenner.github.io/asot-jupyter/feed.xml" rel="self" type="application/atom+xml" /><link href="https://scottbrenner.github.io/asot-jupyter/" rel="alternate" type="text/html" /><updated>2023-01-29T22:52:36-06:00</updated><id>https://scottbrenner.github.io/asot-jupyter/feed.xml</id><title type="html">asot-jupyter</title><subtitle>How has A State of Trance changed over time?</subtitle><entry><title type="html">Analyzing the ASOT Top 1000</title><link href="https://scottbrenner.github.io/asot-jupyter/asot/bpm/artist/year/2021/01/26/top-1000.html" rel="alternate" type="text/html" title="Analyzing the ASOT Top 1000" /><published>2021-01-26T00:00:00-06:00</published><updated>2021-01-26T00:00:00-06:00</updated><id>https://scottbrenner.github.io/asot-jupyter/asot/bpm/artist/year/2021/01/26/top-1000</id><content type="html" xml:base="https://scottbrenner.github.io/asot-jupyter/asot/bpm/artist/year/2021/01/26/top-1000.html"><![CDATA[<!--
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: _notebooks/2021-01-26-top-1000.ipynb
-->

<div class="container" id="notebook-container">
        
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="Introduction">Introduction<a class="anchor-link" href="#Introduction"> </a></h2>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>To celebrate the 1,000th episode of A State of Trance the radioshow invited viewers to vote for their all-time favorite trance tracks, and the resulting list was broadcast as <a href="https://www.astateoftrance.com/episodes/asot1000/">ASOT 1000</a>.</p>
<p>In this post we'll analyze the top 1,000 - which artists, BPMs, and years are most-represented? And more!</p>

</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="Some-Housekeeping">Some Housekeeping<a class="anchor-link" href="#Some-Housekeeping"> </a></h2>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>As with previous posts here, we'll be pulling data from Spotify and graphing the results. While there is <a href="https://open.spotify.com/playlist/5QafFMGgQKGwqgV7k3qHy6">an official "ASOT Top 1000"</a> playlist on Spotify, I'm opting to instead use the "<a href="https://open.spotify.com/playlist/5DCcjCLMlPjTwKLCcYyzIj">ASOT TOP 1000 Countdown Extended</a>" playlist <a href="https://www.reddit.com/r/trance/comments/l2ae9y/relive_the_asot_top_1000_countdown_in_your_own/">compiled by reddit user turbodevin</a>. As Devin writes,</p>
<blockquote><p>I used a filler track (4 seconds) for the missing song, to keep the song numbers corresponding to the ranking. When an extended version was not available, a shorter version is used. When a remix is not available, the regular version is used when available.
MISSING</p>
<p>531 || Sean Callery - The Longest Day (Armin van Buuren Remix)</p>
<p>REMIX NOT AVAILABLE</p>
<p>414 || Faithless - Insomnia (Andrew Rayel Remix)</p>
<p>520 || Safri Duo - Played A Live (The Bongo Song) [NWYR &amp; Willem de Roo Remix]</p>
<p>530 || Kensington - Sorry (Armin van Buuren Remix)</p>
<p>635 || Ilse de Lange - The Great Escape (Armin van Buuren Remix)</p>
<p>661 || Zedd feat. Foxes - Clarity (Andrew Rayel Remix)</p>
</blockquote>
<p>While the playlist may not be complete, I'd still consider to be the most-complete playlist available on Spotify - using extended mixes over the official playlist's radio mixes is certainly more preferrable, at least.</p>
<p>Remember, all data here is pulled directly from Spotify's API without any modification from my end. See the post on <a href="https://scottbrenner.github.io/asot-jupyter/asot/bpm/2020/04/27/methodology.html">Methodology</a> for details on what data we can pull from Spotify, and how. Notably, Spotify's <code>AudioFeaturesObject</code> lists <code>tempo</code> as "overall estimated tempo of a track in beats per minute (BPM)" - keyword being <em>estimate</em>. I've done little to account for any inconsistencies and nothing to address them!
<a href="https://developer.spotify.com/documentation/web-api/reference/#category-playlists">Spotify's API for "Get a Playlist's Items" limits us to getting 100 tracks at a time</a>. Let's make 10 API calls for 100 tracks each, incrementing <code>offset</code> each time, and save the results.</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="sd">&quot;&quot;&quot;</span>
<span class="sd">User: https://open.spotify.com/user/113444659</span>
<span class="sd">Playlist: ASOT TOP 1000 Countdown Extended</span>
<span class="sd">Playlist link: https://open.spotify.com/playlist/5DCcjCLMlPjTwKLCcYyzIj</span>
<span class="sd">Playlist ID: 5DCcjCLMlPjTwKLCcYyzIj</span>
<span class="sd">&quot;&quot;&quot;</span>
<span class="n">top_1000_playlist</span> <span class="o">=</span> <span class="s1">&#39;5DCcjCLMlPjTwKLCcYyzIj&#39;</span>

<span class="n">top_1000_tracks</span> <span class="o">=</span> <span class="p">[]</span>

<span class="c1"># Get full details of the tracks and episodes of a playlis</span>
<span class="c1"># https://spotipy.readthedocs.io/en/2.16.1/#spotipy.client.Spotify.playlist_items</span>
<span class="n">top_1000_tracks</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="n">sp</span><span class="o">.</span><span class="n">playlist_tracks</span><span class="p">(</span><span class="n">top_1000_playlist</span><span class="p">)[</span><span class="s1">&#39;items&#39;</span><span class="p">])</span>
<span class="n">top_1000_tracks</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="n">sp</span><span class="o">.</span><span class="n">playlist_tracks</span><span class="p">(</span><span class="n">top_1000_playlist</span><span class="p">,</span> <span class="n">offset</span><span class="o">=</span><span class="mi">100</span><span class="p">)[</span><span class="s1">&#39;items&#39;</span><span class="p">])</span>
<span class="n">top_1000_tracks</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="n">sp</span><span class="o">.</span><span class="n">playlist_tracks</span><span class="p">(</span><span class="n">top_1000_playlist</span><span class="p">,</span> <span class="n">offset</span><span class="o">=</span><span class="mi">200</span><span class="p">)[</span><span class="s1">&#39;items&#39;</span><span class="p">])</span>
<span class="n">top_1000_tracks</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="n">sp</span><span class="o">.</span><span class="n">playlist_tracks</span><span class="p">(</span><span class="n">top_1000_playlist</span><span class="p">,</span> <span class="n">offset</span><span class="o">=</span><span class="mi">300</span><span class="p">)[</span><span class="s1">&#39;items&#39;</span><span class="p">])</span>
<span class="n">top_1000_tracks</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="n">sp</span><span class="o">.</span><span class="n">playlist_tracks</span><span class="p">(</span><span class="n">top_1000_playlist</span><span class="p">,</span> <span class="n">offset</span><span class="o">=</span><span class="mi">400</span><span class="p">)[</span><span class="s1">&#39;items&#39;</span><span class="p">])</span>
<span class="n">top_1000_tracks</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="n">sp</span><span class="o">.</span><span class="n">playlist_tracks</span><span class="p">(</span><span class="n">top_1000_playlist</span><span class="p">,</span> <span class="n">offset</span><span class="o">=</span><span class="mi">500</span><span class="p">)[</span><span class="s1">&#39;items&#39;</span><span class="p">])</span>
<span class="n">top_1000_tracks</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="n">sp</span><span class="o">.</span><span class="n">playlist_tracks</span><span class="p">(</span><span class="n">top_1000_playlist</span><span class="p">,</span> <span class="n">offset</span><span class="o">=</span><span class="mi">600</span><span class="p">)[</span><span class="s1">&#39;items&#39;</span><span class="p">])</span>
<span class="n">top_1000_tracks</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="n">sp</span><span class="o">.</span><span class="n">playlist_tracks</span><span class="p">(</span><span class="n">top_1000_playlist</span><span class="p">,</span> <span class="n">offset</span><span class="o">=</span><span class="mi">700</span><span class="p">)[</span><span class="s1">&#39;items&#39;</span><span class="p">])</span>
<span class="n">top_1000_tracks</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="n">sp</span><span class="o">.</span><span class="n">playlist_tracks</span><span class="p">(</span><span class="n">top_1000_playlist</span><span class="p">,</span> <span class="n">offset</span><span class="o">=</span><span class="mi">800</span><span class="p">)[</span><span class="s1">&#39;items&#39;</span><span class="p">])</span>
<span class="n">top_1000_tracks</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="n">sp</span><span class="o">.</span><span class="n">playlist_tracks</span><span class="p">(</span><span class="n">top_1000_playlist</span><span class="p">,</span> <span class="n">offset</span><span class="o">=</span><span class="mi">900</span><span class="p">)[</span><span class="s1">&#39;items&#39;</span><span class="p">])</span>
<span class="nb">print</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">top_1000_tracks</span><span class="p">))</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>1000
</pre>
</div>
</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>What's number 1?</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="nb">print</span><span class="p">(</span><span class="n">top_1000_tracks</span><span class="p">[</span><span class="mi">999</span><span class="p">][</span><span class="s1">&#39;track&#39;</span><span class="p">][</span><span class="s1">&#39;artists&#39;</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="s1">&#39;name&#39;</span><span class="p">],</span> <span class="s1">&#39;-&#39;</span><span class="p">,</span> <span class="n">top_1000_tracks</span><span class="p">[</span><span class="mi">999</span><span class="p">][</span><span class="s1">&#39;track&#39;</span><span class="p">][</span><span class="s1">&#39;name&#39;</span><span class="p">])</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>Armin van Buuren - Shivers
</pre>
</div>
</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="Artists">Artists<a class="anchor-link" href="#Artists"> </a></h2>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Let's begin by looking at the artists who made the top 1000 - how many unique artists were featured?</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">unique_artists</span> <span class="o">=</span> <span class="nb">set</span><span class="p">()</span>

<span class="k">for</span> <span class="n">track</span> <span class="ow">in</span> <span class="n">top_1000_tracks</span><span class="p">:</span>
    <span class="k">for</span> <span class="n">artist</span> <span class="ow">in</span> <span class="n">track</span><span class="p">[</span><span class="s1">&#39;track&#39;</span><span class="p">][</span><span class="s1">&#39;artists&#39;</span><span class="p">]:</span>
            <span class="n">unique_artists</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">artist</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">])</span>      

<span class="nb">print</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">unique_artists</span><span class="p">))</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>639
</pre>
</div>
</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Which artists were featured the most?</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">defaultdict</span>

<span class="n">artist_counter</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>

<span class="k">for</span> <span class="n">track</span> <span class="ow">in</span> <span class="n">top_1000_tracks</span><span class="p">:</span>
    <span class="k">for</span> <span class="n">artist</span> <span class="ow">in</span> <span class="n">track</span><span class="p">[</span><span class="s1">&#39;track&#39;</span><span class="p">][</span><span class="s1">&#39;artists&#39;</span><span class="p">]:</span>
         <span class="n">artist_counter</span><span class="p">[</span><span class="n">artist</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">]]</span> <span class="o">+=</span> <span class="mi">1</span>


<span class="n">top_artists</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">artist_counter</span><span class="o">.</span><span class="n">items</span><span class="p">(),</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">k_v</span><span class="p">:</span> <span class="n">k_v</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">reverse</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Alright, let's see the top 25 in a graph..</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">source</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="o">.</span><span class="n">from_dict</span><span class="p">(</span><span class="n">top_artists</span><span class="p">[:</span><span class="mi">25</span><span class="p">])</span>

<span class="n">bars</span> <span class="o">=</span> <span class="n">alt</span><span class="o">.</span><span class="n">Chart</span><span class="p">(</span><span class="n">source</span><span class="p">)</span><span class="o">.</span><span class="n">mark_bar</span><span class="p">()</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span>
    <span class="n">x</span><span class="o">=</span><span class="n">alt</span><span class="o">.</span><span class="n">X</span><span class="p">(</span><span class="s1">&#39;1:Q&#39;</span><span class="p">,</span> <span class="n">title</span><span class="o">=</span><span class="s1">&#39;Plays&#39;</span><span class="p">),</span>
    <span class="n">y</span><span class="o">=</span><span class="n">alt</span><span class="o">.</span><span class="n">Y</span><span class="p">(</span><span class="s1">&#39;0:N&#39;</span><span class="p">,</span> <span class="n">sort</span><span class="o">=</span><span class="s1">&#39;-x&#39;</span><span class="p">,</span> <span class="n">title</span><span class="o">=</span><span class="s1">&#39;Artist&#39;</span><span class="p">)</span>
<span class="p">)</span><span class="o">.</span><span class="n">properties</span><span class="p">(</span>
    <span class="n">title</span><span class="o">=</span><span class="s2">&quot;ASOT Top 1000 - Most-played artists&quot;</span><span class="p">,</span>
    <span class="n">width</span><span class="o">=</span><span class="mi">600</span>
<span class="p">)</span>

<span class="n">text</span> <span class="o">=</span> <span class="n">bars</span><span class="o">.</span><span class="n">mark_text</span><span class="p">(</span>
    <span class="n">align</span><span class="o">=</span><span class="s1">&#39;left&#39;</span><span class="p">,</span>
    <span class="n">baseline</span><span class="o">=</span><span class="s1">&#39;middle&#39;</span><span class="p">,</span>
    <span class="n">dx</span><span class="o">=</span><span class="mi">3</span>  <span class="c1"># Nudges text to right so it doesn&#39;t appear on top of the bar</span>
<span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span>
    <span class="n">text</span><span class="o">=</span><span class="s1">&#39;1:Q&#39;</span>
<span class="p">)</span>

<span class="n">bars</span> <span class="o">+</span> <span class="n">text</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">

<div id="altair-viz-ec504c7697604ad58725e5a8eafd9207"></div>
<script type="text/javascript">
  (function(spec, embedOpt){
    let outputDiv = document.currentScript.previousElementSibling;
    if (outputDiv.id !== "altair-viz-ec504c7697604ad58725e5a8eafd9207") {
      outputDiv = document.getElementById("altair-viz-ec504c7697604ad58725e5a8eafd9207");
    }
    const paths = {
      "vega": "https://cdn.jsdelivr.net/npm//vega@5?noext",
      "vega-lib": "https://cdn.jsdelivr.net/npm//vega-lib?noext",
      "vega-lite": "https://cdn.jsdelivr.net/npm//vega-lite@4.8.1?noext",
      "vega-embed": "https://cdn.jsdelivr.net/npm//vega-embed@6?noext",
    };

    function loadScript(lib) {
      return new Promise(function(resolve, reject) {
        var s = document.createElement('script');
        s.src = paths[lib];
        s.async = true;
        s.onload = () => resolve(paths[lib]);
        s.onerror = () => reject(`Error loading script: ${paths[lib]}`);
        document.getElementsByTagName("head")[0].appendChild(s);
      });
    }

    function showError(err) {
      outputDiv.innerHTML = `<div class="error" style="color:red;">${err}</div>`;
      throw err;
    }

    function displayChart(vegaEmbed) {
      vegaEmbed(outputDiv, spec, embedOpt)
        .catch(err => showError(`Javascript Error: ${err.message}<br>This usually means there's a typo in your chart specification. See the javascript console for the full traceback.`));
    }

    if(typeof define === "function" && define.amd) {
      requirejs.config({paths});
      require(["vega-embed"], displayChart, err => showError(`Error loading script: ${err.message}`));
    } else if (typeof vegaEmbed === "function") {
      displayChart(vegaEmbed);
    } else {
      loadScript("vega")
        .then(() => loadScript("vega-lite"))
        .then(() => loadScript("vega-embed"))
        .catch(showError)
        .then(() => displayChart(vegaEmbed));
    }
  })({"config": {"view": {"continuousWidth": 400, "continuousHeight": 300}}, "layer": [{"mark": "bar", "encoding": {"x": {"type": "quantitative", "field": "1", "title": "Plays"}, "y": {"type": "nominal", "field": "0", "sort": "-x", "title": "Artist"}}, "title": "ASOT Top 1000 - Most-played artists", "width": 600}, {"mark": {"type": "text", "align": "left", "baseline": "middle", "dx": 3}, "encoding": {"text": {"type": "quantitative", "field": "1"}, "x": {"type": "quantitative", "field": "1", "title": "Plays"}, "y": {"type": "nominal", "field": "0", "sort": "-x", "title": "Artist"}}, "title": "ASOT Top 1000 - Most-played artists", "width": 600}], "data": {"name": "data-eac1400bc2d77649e39272c23611501e"}, "$schema": "https://vega.github.io/schema/vega-lite/v4.8.1.json", "datasets": {"data-eac1400bc2d77649e39272c23611501e": [{"0": "Armin van Buuren", "1": 126}, {"0": "Above & Beyond", "1": 51}, {"0": "Aly & Fila", "1": 34}, {"0": "Ferry Corsten", "1": 25}, {"0": "Andrew Rayel", "1": 25}, {"0": "Gareth Emery", "1": 24}, {"0": "Cosmic Gate", "1": 21}, {"0": "Ti\u00ebsto", "1": 20}, {"0": "Giuseppe Ottaviani", "1": 19}, {"0": "Paul van Dyk", "1": 16}, {"0": "Solarstone", "1": 15}, {"0": "Orjan Nilsen", "1": 15}, {"0": "Alex M.O.R.P.H.", "1": 14}, {"0": "Omnia", "1": 13}, {"0": "Dash Berlin", "1": 13}, {"0": "Christina Novelli", "1": 12}, {"0": "John O'Callaghan", "1": 12}, {"0": "Emma Hewitt", "1": 12}, {"0": "Jorn Van Deynhoven", "1": 12}, {"0": "Markus Schulz", "1": 12}, {"0": "GAIA", "1": 12}, {"0": "Ruben de Ronde", "1": 11}, {"0": "W&W", "1": 11}, {"0": "HALIENE", "1": 11}, {"0": "MaRLo", "1": 11}]}}, {"mode": "vega-lite"});
</script>
</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>No surprise at <em>who</em> the #1 is, but the sheer number of their tracks featured is pretty impressive - over 10% of the ASOT Top 1000 was produced by Armin van Buuren, more than twice the number of the second-most featured artist!</p>

</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Which artists were featured exactly once, with what track, at what position?</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="c1"># Find all artists with one play, then find that track in the top 1000</span>
<span class="k">for</span> <span class="n">artist</span> <span class="ow">in</span> <span class="n">top_artists</span><span class="p">:</span>
    <span class="k">if</span> <span class="n">artist</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">position</span><span class="p">,</span> <span class="n">track</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">top_1000_tracks</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">track</span><span class="p">[</span><span class="s1">&#39;track&#39;</span><span class="p">][</span><span class="s1">&#39;artists&#39;</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="s1">&#39;name&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="n">artist</span><span class="p">[</span><span class="mi">0</span><span class="p">]:</span>
                <span class="nb">print</span><span class="p">(</span><span class="mi">1000</span> <span class="o">-</span> <span class="n">position</span><span class="p">,</span> <span class="s1">&#39;.&#39;</span><span class="p">,</span> <span class="n">track</span><span class="p">[</span><span class="s1">&#39;track&#39;</span><span class="p">][</span><span class="s1">&#39;artists&#39;</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="s1">&#39;name&#39;</span><span class="p">],</span> <span class="s1">&#39;-&#39;</span><span class="p">,</span> <span class="n">track</span><span class="p">[</span><span class="s1">&#39;track&#39;</span><span class="p">][</span><span class="s1">&#39;name&#39;</span><span class="p">])</span>
</pre></div>

    </div>
</div>
</div>
<details class="description">
      <summary class="btn btn-sm" data-open="Hide Output" data-close="Show Output"></summary>
        <p>
<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>997 . ATN - Miss A Day - Original Mix
996 . Late Night Alumni - Empty Streets - Lumïsade Balearic Mix
993 . Ron van den Beuken - Timeless - Ron van den Beuken Remix
992 . Greg Downey - These Hands I Hold - Sean Tyas Remix
991 . M.I.K.E. - Chocolate Infusion - Original Mix
989 . Adam Nickey - Never Gone - Original Mix [Above &amp; Beyond Respray]
987 . Salt Tank - Eugina - Michael Woods Remix
981 . A Force - Crystal Dawn [ASOT 254] - A Tribute To &#39;99 Remix
969 . Myon &amp; Shane 54 - Ibiza Sunrise - Classic Dub
967 . Neptune Project - Aztec - Original Mix
964 . Ava Mea - In The End - Original Mix
963 . Rodg - High On Life - Extended Mix
962 . Midway - Monkey Forest - Original Mix Edit
961 . Ramin Djawadi - Game Of Thrones Theme - Armin van Buuren Extended Remix
960 . Filterheadz - Yimanya - Original Mix
950 . Jody Wisternoff - The Bridge - Chicane Rework
943 . Probspot - Foreplay - Original Mix
940 . Selu Vibra - Stargazing [ASOT 224] - Original Mix
928 . Ernesto vs. Bastian - Dark Side Of The Moon - Original Extended
927 . Sensation - The Anthem 2003 - Original Mix
922 . Space RockerZ - Puzzle Piece - Daniel Heatcliff&#39;s Farewell Remix
911 . Sunset Bros - I&#39;m Feeling It (In The Air) - Sunset Bros X Mark McCabe / MaRLo Remix
906 . Avao - Cosmic Order - Extended Mix
902 . Elysian - Beyond The Comfort Zone - Extended Mix
901 . Lemon - Anticipation
899 . Luigi Lusini - Who We Are
897 . Thomas Bronzwaer - Shadow World - Original Mix
896 . Shane - Too Late To Turn - Armin Van Buuren Remix
887 . Niels Van Gogh - Pulverturm (Original)
884 . Swedish House Mafia - One
883 . Monogato - Miami Vibe - Omnia Remix
879 . Eximinds - Lacrimosa - Extended Mix
855 . Full Tilt - Surrender - Sneijder vs John O&#39;Callaghan Remix
854 . Carl B. - Social Suicide [ASOT 261] - Original Mix
853 . Tinlicker - Sleepwalker - Extended Mix
851 . Cass - Perception - New Vocal Mix
850 . Bjorn Akesson - Painting Pyramids - Original Mix
848 . Frank T.R.A.X. - Nebuchan - Radion6 Extended Remix
844 . Easton - Healing Rain - Bryan Kearney Remix
843 . Arisen Flame - Explorer - Original Mix
841 . Astrix - Deep Jungle Walk
840 . Sodality - Challenger - Extended Mix
834 . Hazem Beltagui - We Are - Original Mix
830 . 3LAU - Tokyo (feat. XIRA) - Fatum Remix
828 . The Space Brothers - Shine - Jorn van Deynhoven Extended Remix
822 . Ferry Corsten&#39;s Countdown - More Than Anything (Listener&#39;s Choice) (CC489) - Stoneface &amp; Terminal Remix
821 . Simon O&#39;Shine &amp; Adam Navel - Marathon - Simon O&#39;Shine Mix
819 . Humate - Love Stimulation - Love-Club-Mix
813 . A &amp; Z - Fleeting Moments - Original Mix
810 . Abstract Vision - Conqueror - Original Mix
798 . Arctic Quest - Renaissance - Original Mix
797 . K90 - Red Snapper - Allen Watts Extended Remix
796 . Ali Wilson - Pandora - Original
790 . Fragile - Inertia - Armin Van Buuren Remix
783 . Audien - Wayfarer - Original Mix
778 . Holden - Nothing - 93 Returning Remix
777 . Art Of Trance - Madagascar - Ferry Corsten Remix
773 . Synergy - Hello Strings - Original Mix
771 . Jase Thirlwall - Dust - Extended Mix
770 . Antillas - Damaged - Main Mix
768 . Coast 2 Coast - Home - Original Mix
760 . Hammer - Language - Santiago Nino Dub Tech Mix
759 . Nuera - Green Cape Sunset - Original Mix
748 . Riva - Time Is The Healer - Armin van Buuren Extended Dub
747 . Joop - The Future - Original Mix
733 . Jeremy Vancaulart - Hurt - Extended Mix
714 . Randy Katana - In Silence - Txitxarro Mix
712 . London Grammar - Hey Now - Arty Remix
711 . Parker &amp; Hanson - Gravity - Original Mix
710 . Claudia Cazacu - Freefalling - Original Mix
709 . Dutch Force - Deadline - Original Mix
703 . Fragma - Toca Me - Inpetto 2008 Mix
702 . James Dymond - Spectrum - Extended Mix
701 . DRYM - Smile - Extended Mix
698 . Peter Martin - Perfect Wave - Original Mix
696 . Active Sight - Out Of Our Lives - Original Mix
694 . Glenn Morrison - Contact
687 . Zirenz - Edge of Space Ultimate - Whiteroom Remix
684 . 7 Skies - Central Park - Original Mix
683 . Filo &amp; Peri - Anthem - Original Radio Version
682 . Carl B - All Day - Original
678 . Dimitri Vegas &amp; Like Mike - Repeat After Me - Extended Mix
672 . Aria - Dido - Armin Van Buuren&#39;s Universal Religion Mix
670 . Perry O&#39;Neil - Wave Force - Original Mix
669 . Dumonde - Never Look Back - Full On Vocal Mix
665 . Jon O&#39;Bir - Found A Way (feat. Fisher) - Joint Operations Centre Remix
657 . Cressida - 6AM - Kyau &amp; Albert Update
655 . Zoo Brazil - You Can Have It All - George Acosta Remix
650 . PRAANA - Kaleidoscope - Extended Mix
647 . Bedrock - Heaven Scent - Original Mix
643 . Eco - A Million Sounds, A Thousand Smiles - Original Mix
641 . Ultra Shock - The Sound Of E - Jorn van Deynhoven Extended Remix
635 . Ilse DeLange - The Great Escape
621 . Mauro Picotto - Lizard - Cosmic Gate Extended Remix
612 . Monolink - Return to Oz - ARTBAT Remix
607 . Karen Overton - Your Loving Arms - Club Mix
596 . Primer - Everlast - Original Mix
587 . Age Of Love - The Age Of Love - Jam &amp; Spoon Watch Out For Stella Mix
584 . Ascension - Someone - Giuseppe Ottaviani Extended Remix
583 . Masters &amp; Nickson - Out There - Robert Nickson 2016 Extended Remix
581 . GTR - Mistral
580 . Tim Berg - Bromance - Avicii’s Arena Mix
571 . Jan Johnston - Flesh - DJ Tiesto Mix
567 . Artento Divini - A.D.D.A. - Extended Mix
566 . Freefall - Skydive
554 . Beatsole - Before I Wake - Extended Mix
553 . The Noble Six - Firewalker - Extended Mix
549 . Electrovoya - Effervesce
542 . Tillmann Uhrmacher - On the Run - Ocean to Shore Club Extended
538 . Chakra - Home - Above &amp; Beyond Mix
532 . Members Of Mayday - 10 In 01 - Paul Van Dyk Club Mix
531 . Kyuss - Yeah
526 . Ohmna - Key Of Life - MaRLo Remix
520 . Safri Duo - Played-A-Live (The Bongo Song)
511 . Chris Lake - Carry Me Away (feat. Emma Hewitt)
508 . Ayla - Ayla - Ben Nicky &amp; Luke Bond Remix
507 . Michael Dow - Ascent
505 . Afternova - Serenity - Andy Blueman Remix
499 . York - The Reachers of Civilisation
488 . Conjure One - Tears From The Moon - Tiësto In Search Of Sunrise Remix
485 . Paul Webster - Time - Sean Tyas Dub Mix
481 . 3rd Moon - Monsun - Original Mix
480 . Solid Sessions - Janeiro - Armin van Buuren Remix
478 . Quench - Dreams - Nicholson&#39;s Extended Cathedral Remix
472 . Insigma - Open Our Eyes - Original Mix
467 . VER:WEST - 5 Seconds Before Sunrise
465 . Moogwai - Viola - Armin van Buuren Remix
458 . Albert Vorne - Formentera What - Gareth Emery Remix
457 . Vast Vision - Everything - Aly &amp; Fila Remix
451 . Phynn - Lucid
440 . Fred Baker - Confirmation
438 . Tilt - The World Doesn&#39;t Know - Original Mix
435 . Cerf, Mitiska &amp; Jaren - You Never Said - Dash Berlin Remix
434 . Triple A - Winter Stayed - Armin van Buuren&#39;s On the Beach Mix
433 . XiJaro &amp; Pitch - Whispers Of Time - Extended Mix
417 . 16BL - Chant A Tune - Jeremy Olander Remix
399 . 2nd Phase - Never Come Down - Norin &amp; Rad Remix
392 . Matlock - Deep Psychosis - Daniel Kandi&#39;s Cure Mix
387 . Wiegel Meirmans Snitker - Nova Zembla - Armin van Buuren Extended Remix
386 . Graham Bell - The Sound Of Letting Go (Tribute To Yotam) - Extended Mix
385 . Hans Zimmer - He&#39;s A Pirate - Tiësto Orchestral Mix
380 . Atlantis - Fiji - ReOrder Extended Remix
374 . Svenson &amp; Gielen - Twisted - Original Mix
371 . Galen Behr - Carabella - Galen Behr vs Orjan Nilsen Extended Remix
370 . 8 Wonders - The Morning After - The Thrillseekers Remix
369 . Basic Dawn - Pure Thrust - NU NRG Remix
355 . Nalin &amp; Kane - Beachball - Original Club Mix
342 . Rex Mundi - Nothing At All - Original Mix
323 . L.S.G. - Netherworld - Oliver Prime Remix
321 . DJ&#39;s United - Remember Love - Original Mix
301 . M.I.D.O.R. &amp; Six4eight - No Man&#39;s Land
294 . KhoMha - Tierra - Extended Mix
273 . Jean-Michel Jarre - Stardust
271 . DJ Aligator - The Perfect Match - Club Mix
270 . Akesson - Perfect Blue - Original Mix
255 . iio - Rapture (Armin Van Buuren Remix Remastered) [feat. Nadia Ali]
243 . Headstrong - Tears - Aurosonic Progressive Mix
241 . Pulser - My Religion - Original Mix
236 . Major League - Wonder Where You Are?
233 . Sasha - Xpander
228 . Alt+F4 - Alt+F4 - Original Mix
222 . Ridgewalkers - Find - Andy Moor Remix
217 . Eyal Barkan - Voyage - Magikal Remake
184 . The Doppler Effect - Beauty Hides In The Deep - John O&#39;Callaghan Extended
183 . FUTURECODE - Dancing In The Rain - Extended Mix
177 . Ayumi Hamasaki - M - Above &amp; Beyond Remix
170 . Sonic Inc - The Taste Of Summer - Fire &amp; Ice Vital Remix
167 . Darude - Sandstorm
147 . Salt Lake - Rendezvous - Original Mix
120 . Darren Tate - Let The Light Shine In - 12&#39;&#39; Original Mix
113 . William Orbit - Barber&#39;s Adagio for Strings - Ferry Corsten Remix
110 . Yuri Kane - Right Back - Original Extended
104 . Sergey Nevone - Apprehension - Aly &amp; Fila Mix
80 . Reflekt - Need To Feel Loved - Thrillseekers Remix
71 . Binary Finary - 1998 - Gouryella Remix
70 . Planet Perfecto Knights - Resurection
59 . Arksun - Arisen - Original Mix
54 . Saltwater - The Legacy - Alphazone Extended Remix
44 . Energy 52 - Café Del Mar - Three &#39;n One Remix
43 . Luminary - Amsterdam - Smith &amp; Pledger Remix
37 . Key4050 - I Love You - Extended Mix
33 . Robert Miles - Children - Dream Version
21 . Veracocha - Carte Blanche - Original Mix
18 . Motorcycle - As The Rush Comes - Gabriel &amp; Dresden Sweeping Strings Mix
4 . Delerium - Silence (feat. Sarah McLachlan) - DJ Tiësto&#39;s in Search of Sunrise Remix
</pre>
</div>
</div>

</div>
</div>
</p>
    </details>
</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Quite a few, click "Show Output" above to view! Note that we're only listing the artist on the track credits that's <em>only</em> featured on that track. For example, "120. Darren Tate &amp; Jono Grant – Shine (Let The Light Shine In)" is listed here but lists <em>only</em> Darren Tate as the producer because Jono Grant also appears in "562. Jono Grant vs Mike Koglin  – Circuits".</p>

</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="Tracks">Tracks<a class="anchor-link" href="#Tracks"> </a></h2>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Let's looks at some track-specific numbers now.</p>
<p>In which years were the tracks produced?</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">annual_total</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>

<span class="k">for</span> <span class="n">track</span> <span class="ow">in</span> <span class="n">top_1000_tracks</span><span class="p">:</span>
    <span class="n">annual_total</span><span class="p">[</span><span class="n">track</span><span class="p">[</span><span class="s1">&#39;track&#39;</span><span class="p">][</span><span class="s1">&#39;album&#39;</span><span class="p">][</span><span class="s1">&#39;release_date&#39;</span><span class="p">][:</span><span class="mi">4</span><span class="p">]]</span> <span class="o">+=</span> <span class="mi">1</span>

<span class="n">top_years</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">annual_total</span><span class="o">.</span><span class="n">items</span><span class="p">(),</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">k_v</span><span class="p">:</span> <span class="n">k_v</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
<span class="nb">print</span><span class="p">(</span><span class="n">top_years</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>[(&#39;1992&#39;, 1), (&#39;1995&#39;, 1), (&#39;1997&#39;, 2), (&#39;1996&#39;, 5), (&#39;1998&#39;, 5), (&#39;1999&#39;, 7), (&#39;2002&#39;, 12), (&#39;2001&#39;, 14), (&#39;2000&#39;, 18), (&#39;2003&#39;, 23), (&#39;2004&#39;, 25), (&#39;2005&#39;, 32), (&#39;2006&#39;, 37), (&#39;2007&#39;, 38), (&#39;2008&#39;, 45), (&#39;2017&#39;, 49), (&#39;2015&#39;, 50), (&#39;2014&#39;, 54), (&#39;2020&#39;, 55), (&#39;2016&#39;, 55), (&#39;2010&#39;, 56), (&#39;2009&#39;, 62), (&#39;2013&#39;, 64), (&#39;2018&#39;, 64), (&#39;2011&#39;, 66), (&#39;2012&#39;, 68), (&#39;2019&#39;, 92)]
</pre>
</div>
</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>In a graph:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">source</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="o">.</span><span class="n">from_dict</span><span class="p">(</span><span class="n">top_years</span><span class="p">)</span>

<span class="n">bars</span> <span class="o">=</span> <span class="n">alt</span><span class="o">.</span><span class="n">Chart</span><span class="p">(</span><span class="n">source</span><span class="p">)</span><span class="o">.</span><span class="n">mark_bar</span><span class="p">()</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span>
    <span class="n">x</span><span class="o">=</span><span class="n">alt</span><span class="o">.</span><span class="n">X</span><span class="p">(</span><span class="s1">&#39;1:Q&#39;</span><span class="p">,</span> <span class="n">title</span><span class="o">=</span><span class="s1">&#39;Plays&#39;</span><span class="p">),</span>
    <span class="n">y</span><span class="o">=</span><span class="n">alt</span><span class="o">.</span><span class="n">Y</span><span class="p">(</span><span class="s1">&#39;0:N&#39;</span><span class="p">,</span> <span class="n">sort</span><span class="o">=</span><span class="s1">&#39;-x&#39;</span><span class="p">,</span> <span class="n">title</span><span class="o">=</span><span class="s1">&#39;Year&#39;</span><span class="p">)</span>
<span class="p">)</span><span class="o">.</span><span class="n">properties</span><span class="p">(</span>
    <span class="n">title</span><span class="o">=</span><span class="s2">&quot;ASOT Top 1000 - Most-represented years&quot;</span><span class="p">,</span>
    <span class="n">width</span><span class="o">=</span><span class="mi">600</span>
<span class="p">)</span>

<span class="n">text</span> <span class="o">=</span> <span class="n">bars</span><span class="o">.</span><span class="n">mark_text</span><span class="p">(</span>
    <span class="n">align</span><span class="o">=</span><span class="s1">&#39;left&#39;</span><span class="p">,</span>
    <span class="n">baseline</span><span class="o">=</span><span class="s1">&#39;middle&#39;</span><span class="p">,</span>
    <span class="n">dx</span><span class="o">=</span><span class="mi">3</span>  <span class="c1"># Nudges text to right so it doesn&#39;t appear on top of the bar</span>
<span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span>
    <span class="n">text</span><span class="o">=</span><span class="s1">&#39;1:Q&#39;</span>
<span class="p">)</span>

<span class="n">bars</span> <span class="o">+</span> <span class="n">text</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">

<div id="altair-viz-1c45dac5065c4374b2262b1d0dacda15"></div>
<script type="text/javascript">
  (function(spec, embedOpt){
    let outputDiv = document.currentScript.previousElementSibling;
    if (outputDiv.id !== "altair-viz-1c45dac5065c4374b2262b1d0dacda15") {
      outputDiv = document.getElementById("altair-viz-1c45dac5065c4374b2262b1d0dacda15");
    }
    const paths = {
      "vega": "https://cdn.jsdelivr.net/npm//vega@5?noext",
      "vega-lib": "https://cdn.jsdelivr.net/npm//vega-lib?noext",
      "vega-lite": "https://cdn.jsdelivr.net/npm//vega-lite@4.8.1?noext",
      "vega-embed": "https://cdn.jsdelivr.net/npm//vega-embed@6?noext",
    };

    function loadScript(lib) {
      return new Promise(function(resolve, reject) {
        var s = document.createElement('script');
        s.src = paths[lib];
        s.async = true;
        s.onload = () => resolve(paths[lib]);
        s.onerror = () => reject(`Error loading script: ${paths[lib]}`);
        document.getElementsByTagName("head")[0].appendChild(s);
      });
    }

    function showError(err) {
      outputDiv.innerHTML = `<div class="error" style="color:red;">${err}</div>`;
      throw err;
    }

    function displayChart(vegaEmbed) {
      vegaEmbed(outputDiv, spec, embedOpt)
        .catch(err => showError(`Javascript Error: ${err.message}<br>This usually means there's a typo in your chart specification. See the javascript console for the full traceback.`));
    }

    if(typeof define === "function" && define.amd) {
      requirejs.config({paths});
      require(["vega-embed"], displayChart, err => showError(`Error loading script: ${err.message}`));
    } else if (typeof vegaEmbed === "function") {
      displayChart(vegaEmbed);
    } else {
      loadScript("vega")
        .then(() => loadScript("vega-lite"))
        .then(() => loadScript("vega-embed"))
        .catch(showError)
        .then(() => displayChart(vegaEmbed));
    }
  })({"config": {"view": {"continuousWidth": 400, "continuousHeight": 300}}, "layer": [{"mark": "bar", "encoding": {"x": {"type": "quantitative", "field": "1", "title": "Plays"}, "y": {"type": "nominal", "field": "0", "sort": "-x", "title": "Year"}}, "title": "ASOT Top 1000 - Most-represented years", "width": 600}, {"mark": {"type": "text", "align": "left", "baseline": "middle", "dx": 3}, "encoding": {"text": {"type": "quantitative", "field": "1"}, "x": {"type": "quantitative", "field": "1", "title": "Plays"}, "y": {"type": "nominal", "field": "0", "sort": "-x", "title": "Year"}}, "title": "ASOT Top 1000 - Most-represented years", "width": 600}], "data": {"name": "data-c4d9160895a1fd90761cbcfd32cb43eb"}, "$schema": "https://vega.github.io/schema/vega-lite/v4.8.1.json", "datasets": {"data-c4d9160895a1fd90761cbcfd32cb43eb": [{"0": "1992", "1": 1}, {"0": "1995", "1": 1}, {"0": "1997", "1": 2}, {"0": "1996", "1": 5}, {"0": "1998", "1": 5}, {"0": "1999", "1": 7}, {"0": "2002", "1": 12}, {"0": "2001", "1": 14}, {"0": "2000", "1": 18}, {"0": "2003", "1": 23}, {"0": "2004", "1": 25}, {"0": "2005", "1": 32}, {"0": "2006", "1": 37}, {"0": "2007", "1": 38}, {"0": "2008", "1": 45}, {"0": "2017", "1": 49}, {"0": "2015", "1": 50}, {"0": "2014", "1": 54}, {"0": "2020", "1": 55}, {"0": "2016", "1": 55}, {"0": "2010", "1": 56}, {"0": "2009", "1": 62}, {"0": "2013", "1": 64}, {"0": "2018", "1": 64}, {"0": "2011", "1": 66}, {"0": "2012", "1": 68}, {"0": "2019", "1": 92}]}}, {"mode": "vega-lite"});
</script>
</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Might be better to see it sorted by year:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">source</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="o">.</span><span class="n">from_dict</span><span class="p">(</span><span class="n">top_years</span><span class="p">)</span>

<span class="n">bars</span> <span class="o">=</span> <span class="n">alt</span><span class="o">.</span><span class="n">Chart</span><span class="p">(</span><span class="n">source</span><span class="p">)</span><span class="o">.</span><span class="n">mark_bar</span><span class="p">()</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span>
    <span class="n">x</span><span class="o">=</span><span class="n">alt</span><span class="o">.</span><span class="n">X</span><span class="p">(</span><span class="s1">&#39;1:Q&#39;</span><span class="p">,</span> <span class="n">title</span><span class="o">=</span><span class="s1">&#39;Plays&#39;</span><span class="p">),</span>
    <span class="n">y</span><span class="o">=</span><span class="n">alt</span><span class="o">.</span><span class="n">Y</span><span class="p">(</span><span class="s1">&#39;0:N&#39;</span><span class="p">,</span> <span class="n">title</span><span class="o">=</span><span class="s1">&#39;Year&#39;</span><span class="p">)</span>
<span class="p">)</span><span class="o">.</span><span class="n">properties</span><span class="p">(</span>
    <span class="n">title</span><span class="o">=</span><span class="s2">&quot;ASOT Top 1000 - Yearly representation&quot;</span><span class="p">,</span>
    <span class="n">width</span><span class="o">=</span><span class="mi">600</span>
<span class="p">)</span>

<span class="n">text</span> <span class="o">=</span> <span class="n">bars</span><span class="o">.</span><span class="n">mark_text</span><span class="p">(</span>
    <span class="n">align</span><span class="o">=</span><span class="s1">&#39;left&#39;</span><span class="p">,</span>
    <span class="n">baseline</span><span class="o">=</span><span class="s1">&#39;middle&#39;</span><span class="p">,</span>
    <span class="n">dx</span><span class="o">=</span><span class="mi">3</span>  <span class="c1"># Nudges text to right so it doesn&#39;t appear on top of the bar</span>
<span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span>
    <span class="n">text</span><span class="o">=</span><span class="s1">&#39;1:Q&#39;</span>
<span class="p">)</span>

<span class="n">bars</span> <span class="o">+</span> <span class="n">text</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">

<div id="altair-viz-ab68dfc9ffc34fc7b6c45b87e6759cc1"></div>
<script type="text/javascript">
  (function(spec, embedOpt){
    let outputDiv = document.currentScript.previousElementSibling;
    if (outputDiv.id !== "altair-viz-ab68dfc9ffc34fc7b6c45b87e6759cc1") {
      outputDiv = document.getElementById("altair-viz-ab68dfc9ffc34fc7b6c45b87e6759cc1");
    }
    const paths = {
      "vega": "https://cdn.jsdelivr.net/npm//vega@5?noext",
      "vega-lib": "https://cdn.jsdelivr.net/npm//vega-lib?noext",
      "vega-lite": "https://cdn.jsdelivr.net/npm//vega-lite@4.8.1?noext",
      "vega-embed": "https://cdn.jsdelivr.net/npm//vega-embed@6?noext",
    };

    function loadScript(lib) {
      return new Promise(function(resolve, reject) {
        var s = document.createElement('script');
        s.src = paths[lib];
        s.async = true;
        s.onload = () => resolve(paths[lib]);
        s.onerror = () => reject(`Error loading script: ${paths[lib]}`);
        document.getElementsByTagName("head")[0].appendChild(s);
      });
    }

    function showError(err) {
      outputDiv.innerHTML = `<div class="error" style="color:red;">${err}</div>`;
      throw err;
    }

    function displayChart(vegaEmbed) {
      vegaEmbed(outputDiv, spec, embedOpt)
        .catch(err => showError(`Javascript Error: ${err.message}<br>This usually means there's a typo in your chart specification. See the javascript console for the full traceback.`));
    }

    if(typeof define === "function" && define.amd) {
      requirejs.config({paths});
      require(["vega-embed"], displayChart, err => showError(`Error loading script: ${err.message}`));
    } else if (typeof vegaEmbed === "function") {
      displayChart(vegaEmbed);
    } else {
      loadScript("vega")
        .then(() => loadScript("vega-lite"))
        .then(() => loadScript("vega-embed"))
        .catch(showError)
        .then(() => displayChart(vegaEmbed));
    }
  })({"config": {"view": {"continuousWidth": 400, "continuousHeight": 300}}, "layer": [{"mark": "bar", "encoding": {"x": {"type": "quantitative", "field": "1", "title": "Plays"}, "y": {"type": "nominal", "field": "0", "title": "Year"}}, "title": "ASOT Top 1000 - Yearly representation", "width": 600}, {"mark": {"type": "text", "align": "left", "baseline": "middle", "dx": 3}, "encoding": {"text": {"type": "quantitative", "field": "1"}, "x": {"type": "quantitative", "field": "1", "title": "Plays"}, "y": {"type": "nominal", "field": "0", "title": "Year"}}, "title": "ASOT Top 1000 - Yearly representation", "width": 600}], "data": {"name": "data-c4d9160895a1fd90761cbcfd32cb43eb"}, "$schema": "https://vega.github.io/schema/vega-lite/v4.8.1.json", "datasets": {"data-c4d9160895a1fd90761cbcfd32cb43eb": [{"0": "1992", "1": 1}, {"0": "1995", "1": 1}, {"0": "1997", "1": 2}, {"0": "1996", "1": 5}, {"0": "1998", "1": 5}, {"0": "1999", "1": 7}, {"0": "2002", "1": 12}, {"0": "2001", "1": 14}, {"0": "2000", "1": 18}, {"0": "2003", "1": 23}, {"0": "2004", "1": 25}, {"0": "2005", "1": 32}, {"0": "2006", "1": 37}, {"0": "2007", "1": 38}, {"0": "2008", "1": 45}, {"0": "2017", "1": 49}, {"0": "2015", "1": 50}, {"0": "2014", "1": 54}, {"0": "2020", "1": 55}, {"0": "2016", "1": 55}, {"0": "2010", "1": 56}, {"0": "2009", "1": 62}, {"0": "2013", "1": 64}, {"0": "2018", "1": 64}, {"0": "2011", "1": 66}, {"0": "2012", "1": 68}, {"0": "2019", "1": 92}]}}, {"mode": "vega-lite"});
</script>
</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>What are the oldest tracks in the list? Sorted by position.</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="k">for</span> <span class="n">position</span><span class="p">,</span> <span class="n">track</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">top_1000_tracks</span><span class="p">):</span>
    <span class="k">if</span> <span class="nb">int</span><span class="p">(</span><span class="n">track</span><span class="p">[</span><span class="s1">&#39;track&#39;</span><span class="p">][</span><span class="s1">&#39;album&#39;</span><span class="p">][</span><span class="s1">&#39;release_date&#39;</span><span class="p">][:</span><span class="mi">4</span><span class="p">])</span> <span class="o">&lt;</span> <span class="mi">2000</span><span class="p">:</span>
        <span class="n">track_artist</span> <span class="o">=</span> <span class="n">track</span><span class="p">[</span><span class="s1">&#39;track&#39;</span><span class="p">][</span><span class="s1">&#39;artists&#39;</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="s1">&#39;name&#39;</span><span class="p">]</span>
        <span class="k">for</span> <span class="n">artist</span> <span class="ow">in</span> <span class="n">track</span><span class="p">[</span><span class="s1">&#39;track&#39;</span><span class="p">][</span><span class="s1">&#39;artists&#39;</span><span class="p">][</span><span class="mi">1</span><span class="p">:]:</span>
            <span class="n">track_artist</span> <span class="o">+=</span> <span class="s2">&quot; &amp; &quot;</span> <span class="o">+</span> <span class="n">artist</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">]</span>
        <span class="nb">print</span><span class="p">(</span><span class="mi">1000</span> <span class="o">-</span> <span class="n">position</span><span class="p">,</span> <span class="s1">&#39;.&#39;</span><span class="p">,</span> <span class="n">track_artist</span><span class="p">,</span> <span class="s1">&#39;-&#39;</span><span class="p">,</span> <span class="n">track</span><span class="p">[</span><span class="s1">&#39;track&#39;</span><span class="p">][</span><span class="s1">&#39;name&#39;</span><span class="p">],</span> <span class="s1">&#39;- released&#39;</span><span class="p">,</span> <span class="n">track</span><span class="p">[</span><span class="s1">&#39;track&#39;</span><span class="p">][</span><span class="s1">&#39;album&#39;</span><span class="p">][</span><span class="s1">&#39;release_date&#39;</span><span class="p">])</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>983 . Vincent de Moor - Flowtation - released 1996-01-01
887 . Niels Van Gogh - Pulverturm (Original) - released 1998-09-21
691 . Lost Witness &amp; Lange - Happiness Happening - Lange Remix - released 1999-03-22
647 . Bedrock - Heaven Scent - Original Mix - released 1999-12-01
638 . Agnelli &amp; Nelson - El Niño - released 1998-08-01
566 . Freefall - Skydive - released 1998-01-01
531 . Kyuss - Yeah - released 1992-01-01
499 . York - The Reachers of Civilisation - released 1999-10-20
414 . Faithless &amp; Rollo Armstrong &amp; Sister Bliss - Insomnia - released 1996
355 . Nalin &amp; Kane - Beachball - Original Club Mix - released 1997-01-01
233 . Sasha - Xpander - released 1999-07-05
167 . Darude - Sandstorm - released 1999-01-01
127 . Three Drives On A Vinyl - Greece 2000 - Original Mix - released 1997-06-01
125 . ATB - 9 Pm - Till I Come - released 1998-10-26
113 . William Orbit &amp; Ferry Corsten - Barber&#39;s Adagio for Strings - Ferry Corsten Remix - released 1995-01-17
99 . Armin van Buuren - Blue Fear - Original Mix - released 1996-03-10
91 . Cygnus X &amp; Rank 1 - Superstring - Rank 1 Remix - released 1996
87 . Solarstone &amp; Armin van Buuren - Seven Cities - Armin van Buuren Remix - released 1999-06-04
71 . Binary Finary &amp; Gouryella - 1998 - Gouryella Remix - released 1998
33 . Robert Miles - Children - Dream Version - released 1996-07-16
21 . Veracocha - Carte Blanche - Original Mix - released 1999-05-01
</pre>
</div>
</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>A lot of tracks released in 2020 made the list, what are the most recent? Here's the tracks in the months leading up to the end of the year.</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="k">for</span> <span class="n">position</span><span class="p">,</span> <span class="n">track</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">top_1000_tracks</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">track</span><span class="p">[</span><span class="s1">&#39;track&#39;</span><span class="p">][</span><span class="s1">&#39;album&#39;</span><span class="p">][</span><span class="s1">&#39;release_date&#39;</span><span class="p">][:</span><span class="mi">7</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39;2020-09&#39;</span> <span class="ow">or</span> <span class="n">track</span><span class="p">[</span><span class="s1">&#39;track&#39;</span><span class="p">][</span><span class="s1">&#39;album&#39;</span><span class="p">][</span><span class="s1">&#39;release_date&#39;</span><span class="p">][:</span><span class="mi">7</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39;2020-10&#39;</span> <span class="ow">or</span> <span class="n">track</span><span class="p">[</span><span class="s1">&#39;track&#39;</span><span class="p">][</span><span class="s1">&#39;album&#39;</span><span class="p">][</span><span class="s1">&#39;release_date&#39;</span><span class="p">][:</span><span class="mi">7</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39;2020-11&#39;</span> <span class="ow">or</span> <span class="n">track</span><span class="p">[</span><span class="s1">&#39;track&#39;</span><span class="p">][</span><span class="s1">&#39;album&#39;</span><span class="p">][</span><span class="s1">&#39;release_date&#39;</span><span class="p">][:</span><span class="mi">7</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39;2020-12&#39;</span><span class="p">:</span>
        <span class="n">track_artist</span> <span class="o">=</span> <span class="n">track</span><span class="p">[</span><span class="s1">&#39;track&#39;</span><span class="p">][</span><span class="s1">&#39;artists&#39;</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="s1">&#39;name&#39;</span><span class="p">]</span>
        <span class="k">for</span> <span class="n">artist</span> <span class="ow">in</span> <span class="n">track</span><span class="p">[</span><span class="s1">&#39;track&#39;</span><span class="p">][</span><span class="s1">&#39;artists&#39;</span><span class="p">][</span><span class="mi">1</span><span class="p">:]:</span>
            <span class="n">track_artist</span> <span class="o">+=</span> <span class="s2">&quot; &amp; &quot;</span> <span class="o">+</span> <span class="n">artist</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">]</span>
        <span class="nb">print</span><span class="p">(</span><span class="mi">1000</span> <span class="o">-</span> <span class="n">position</span><span class="p">,</span> <span class="s1">&#39;.&#39;</span><span class="p">,</span> <span class="n">track_artist</span><span class="p">,</span> <span class="s1">&#39;-&#39;</span><span class="p">,</span> <span class="n">track</span><span class="p">[</span><span class="s1">&#39;track&#39;</span><span class="p">][</span><span class="s1">&#39;name&#39;</span><span class="p">],</span> <span class="s1">&#39;- released&#39;</span><span class="p">,</span> <span class="n">track</span><span class="p">[</span><span class="s1">&#39;track&#39;</span><span class="p">][</span><span class="s1">&#39;album&#39;</span><span class="p">][</span><span class="s1">&#39;release_date&#39;</span><span class="p">])</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>915 . Assaf &amp; Cassandra Grey - Lost At Sea - released 2020-12-11
893 . Cosmic Gate &amp; Andrew Bayer - The Launch - Extended Mix - released 2020-09-04
863 . ARTY &amp; NK - Who Am I - released 2020-11-27
836 . Allen Watts &amp; Gid Sedgwick - Another You - Extended Mix - released 2020-09-11
824 . Giuseppe Ottaviani &amp; Sue McLaren - Not One Goodbye - Extended Mix - released 2020-09-25
446 . Above &amp; Beyond &amp; Zoë Johnston &amp; Kyau &amp; Albert - You Got To Go - Kyau &amp; Albert Extended Mix - released 2020-10-01
205 . Aly &amp; Fila &amp; Plumb - Somebody Loves You - Extended Mix - released 2020-09-25
</pre>
</div>
</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>In which years were the tracks produced by the top five most-played artists produced?</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">artist_avb_counter</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span> <span class="c1"># Tracks crediting Armin van Buuren</span>
<span class="n">artist_ab_counter</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span> <span class="c1"># Tracks crediting Above &amp; Beyond</span>
<span class="n">artist_af_counter</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span> <span class="c1"># Tracks crediting Aly &amp; Fila</span>
<span class="n">artist_fc_counter</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span> <span class="c1"># Tracks crediting Ferry Corsten</span>
<span class="n">artist_ar_counter</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span> <span class="c1"># Tracks crediting Andrew Rayel</span>

<span class="k">for</span> <span class="n">track</span> <span class="ow">in</span> <span class="n">top_1000_tracks</span><span class="p">:</span>
    <span class="k">for</span> <span class="n">artist</span> <span class="ow">in</span> <span class="n">track</span><span class="p">[</span><span class="s1">&#39;track&#39;</span><span class="p">][</span><span class="s1">&#39;artists&#39;</span><span class="p">]:</span>
        <span class="k">if</span> <span class="n">artist</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="s2">&quot;Armin van Buuren&quot;</span><span class="p">:</span>
            <span class="n">artist_avb_counter</span><span class="p">[</span><span class="n">track</span><span class="p">[</span><span class="s1">&#39;track&#39;</span><span class="p">][</span><span class="s1">&#39;album&#39;</span><span class="p">][</span><span class="s1">&#39;release_date&#39;</span><span class="p">][:</span><span class="mi">4</span><span class="p">]]</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="k">elif</span> <span class="n">artist</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="s2">&quot;Above &amp; Beyond&quot;</span><span class="p">:</span>
            <span class="n">artist_ab_counter</span><span class="p">[</span><span class="n">track</span><span class="p">[</span><span class="s1">&#39;track&#39;</span><span class="p">][</span><span class="s1">&#39;album&#39;</span><span class="p">][</span><span class="s1">&#39;release_date&#39;</span><span class="p">][:</span><span class="mi">4</span><span class="p">]]</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="k">elif</span> <span class="n">artist</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="s2">&quot;Aly &amp; Fila&quot;</span><span class="p">:</span>
            <span class="n">artist_af_counter</span><span class="p">[</span><span class="n">track</span><span class="p">[</span><span class="s1">&#39;track&#39;</span><span class="p">][</span><span class="s1">&#39;album&#39;</span><span class="p">][</span><span class="s1">&#39;release_date&#39;</span><span class="p">][:</span><span class="mi">4</span><span class="p">]]</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="k">elif</span> <span class="n">artist</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="s2">&quot;Ferry Corsten&quot;</span><span class="p">:</span>
            <span class="n">artist_fc_counter</span><span class="p">[</span><span class="n">track</span><span class="p">[</span><span class="s1">&#39;track&#39;</span><span class="p">][</span><span class="s1">&#39;album&#39;</span><span class="p">][</span><span class="s1">&#39;release_date&#39;</span><span class="p">][:</span><span class="mi">4</span><span class="p">]]</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="k">elif</span> <span class="n">artist</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="s2">&quot;Andrew Rayel&quot;</span><span class="p">:</span>
            <span class="n">artist_ar_counter</span><span class="p">[</span><span class="n">track</span><span class="p">[</span><span class="s1">&#39;track&#39;</span><span class="p">][</span><span class="s1">&#39;album&#39;</span><span class="p">][</span><span class="s1">&#39;release_date&#39;</span><span class="p">][:</span><span class="mi">4</span><span class="p">]]</span> <span class="o">+=</span> <span class="mi">1</span>

<span class="c1"># Sort by year and print the results</span>
<span class="n">sorted_avb_years</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">artist_avb_counter</span><span class="o">.</span><span class="n">items</span><span class="p">(),</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">k_v</span><span class="p">:</span> <span class="n">k_v</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
<span class="n">sorted_ab_years</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">artist_ab_counter</span><span class="o">.</span><span class="n">items</span><span class="p">(),</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">k_v</span><span class="p">:</span> <span class="n">k_v</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
<span class="n">sorted_af_years</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">artist_af_counter</span><span class="o">.</span><span class="n">items</span><span class="p">(),</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">k_v</span><span class="p">:</span> <span class="n">k_v</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
<span class="n">sorted_fc_years</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">artist_fc_counter</span><span class="o">.</span><span class="n">items</span><span class="p">(),</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">k_v</span><span class="p">:</span> <span class="n">k_v</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
<span class="n">sorted_ar_years</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">artist_ar_counter</span><span class="o">.</span><span class="n">items</span><span class="p">(),</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">k_v</span><span class="p">:</span> <span class="n">k_v</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>

<span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Armin van Buuren:&quot;</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">sorted_avb_years</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Above &amp; Beyond:&quot;</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">sorted_ab_years</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Aly &amp; Fila:&quot;</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">sorted_af_years</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Ferry Corsten:&quot;</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">sorted_fc_years</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Andrew Rayel:&quot;</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">sorted_ar_years</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>Armin van Buuren:
[(&#39;1996&#39;, 1), (&#39;1999&#39;, 1), (&#39;2001&#39;, 1), (&#39;2002&#39;, 3), (&#39;2003&#39;, 4), (&#39;2005&#39;, 3), (&#39;2006&#39;, 5), (&#39;2007&#39;, 1), (&#39;2008&#39;, 8), (&#39;2009&#39;, 6), (&#39;2010&#39;, 13), (&#39;2011&#39;, 5), (&#39;2012&#39;, 6), (&#39;2013&#39;, 17), (&#39;2014&#39;, 3), (&#39;2015&#39;, 10), (&#39;2016&#39;, 6), (&#39;2017&#39;, 7), (&#39;2018&#39;, 7), (&#39;2019&#39;, 16), (&#39;2020&#39;, 3)]
Above &amp; Beyond:
[(&#39;2003&#39;, 2), (&#39;2004&#39;, 1), (&#39;2005&#39;, 1), (&#39;2006&#39;, 2), (&#39;2007&#39;, 4), (&#39;2008&#39;, 3), (&#39;2009&#39;, 2), (&#39;2010&#39;, 1), (&#39;2011&#39;, 2), (&#39;2012&#39;, 2), (&#39;2013&#39;, 2), (&#39;2014&#39;, 4), (&#39;2015&#39;, 2), (&#39;2016&#39;, 1), (&#39;2017&#39;, 3), (&#39;2018&#39;, 6), (&#39;2019&#39;, 7), (&#39;2020&#39;, 6)]
Aly &amp; Fila:
[(&#39;2003&#39;, 1), (&#39;2007&#39;, 1), (&#39;2008&#39;, 2), (&#39;2010&#39;, 1), (&#39;2011&#39;, 1), (&#39;2012&#39;, 3), (&#39;2013&#39;, 1), (&#39;2014&#39;, 6), (&#39;2015&#39;, 2), (&#39;2016&#39;, 3), (&#39;2017&#39;, 3), (&#39;2018&#39;, 3), (&#39;2019&#39;, 5), (&#39;2020&#39;, 2)]
Ferry Corsten:
[(&#39;1995&#39;, 1), (&#39;2002&#39;, 1), (&#39;2007&#39;, 1), (&#39;2008&#39;, 1), (&#39;2009&#39;, 4), (&#39;2011&#39;, 5), (&#39;2012&#39;, 1), (&#39;2013&#39;, 1), (&#39;2015&#39;, 1), (&#39;2016&#39;, 1), (&#39;2018&#39;, 6), (&#39;2019&#39;, 1), (&#39;2020&#39;, 1)]
Andrew Rayel:
[(&#39;2011&#39;, 1), (&#39;2012&#39;, 4), (&#39;2013&#39;, 4), (&#39;2014&#39;, 4), (&#39;2016&#39;, 1), (&#39;2017&#39;, 2), (&#39;2018&#39;, 3), (&#39;2019&#39;, 2), (&#39;2020&#39;, 4)]
</pre>
</div>
</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>This would look nice in a <a href="https://altair-viz.github.io/gallery/stacked_bar_chart.html#stacked-bar-chart">stacked bar chart</a>, but I couldn't get the data arranged properly to create the chart.</p>
<p>What's the average BPM of tracks in the top 1,000?</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">total_bpm</span> <span class="o">=</span> <span class="mi">0</span>

<span class="k">for</span> <span class="n">track</span> <span class="ow">in</span> <span class="n">top_1000_tracks</span><span class="p">:</span>
    <span class="n">total_bpm</span> <span class="o">+=</span> <span class="n">sp</span><span class="o">.</span><span class="n">audio_features</span><span class="p">(</span><span class="n">track</span><span class="p">[</span><span class="s1">&#39;track&#39;</span><span class="p">][</span><span class="s1">&#39;uri&#39;</span><span class="p">])[</span><span class="mi">0</span><span class="p">][</span><span class="s1">&#39;tempo&#39;</span><span class="p">]</span>

<span class="nb">print</span><span class="p">(</span><span class="n">total_bpm</span><span class="o">/</span><span class="mi">1000</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>134.03799499999994
</pre>
</div>
</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Maybe that's not so useful. How does the track BPM vary throughout the top 1,000? With #1,000 on the left, down to #1 on the right.</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">bpm</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">track</span> <span class="ow">in</span> <span class="n">top_1000_tracks</span><span class="p">:</span>
    <span class="n">tempo</span> <span class="o">=</span> <span class="n">sp</span><span class="o">.</span><span class="n">audio_features</span><span class="p">(</span><span class="n">track</span><span class="p">[</span><span class="s1">&#39;track&#39;</span><span class="p">][</span><span class="s1">&#39;uri&#39;</span><span class="p">])[</span><span class="mi">0</span><span class="p">][</span><span class="s1">&#39;tempo&#39;</span><span class="p">]</span>
    <span class="k">if</span> <span class="n">tempo</span> <span class="o">&lt;</span> <span class="mi">100</span> <span class="ow">or</span> <span class="n">tempo</span> <span class="o">&gt;</span> <span class="mi">150</span><span class="p">:</span> <span class="c1"># &quot;outliers&quot;, details below</span>
        <span class="n">bpm</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="mi">138</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">bpm</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">sp</span><span class="o">.</span><span class="n">audio_features</span><span class="p">(</span><span class="n">track</span><span class="p">[</span><span class="s1">&#39;track&#39;</span><span class="p">][</span><span class="s1">&#39;uri&#39;</span><span class="p">])[</span><span class="mi">0</span><span class="p">][</span><span class="s1">&#39;tempo&#39;</span><span class="p">])</span>

<span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">top_1000_tracks</span><span class="p">))</span>   

<span class="n">source</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">({</span>
  <span class="s1">&#39;track&#39;</span><span class="p">:</span> <span class="n">x</span><span class="p">,</span>
  <span class="s1">&#39;bpm&#39;</span><span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="n">bpm</span><span class="p">)</span>
<span class="p">})</span>

<span class="n">source</span><span class="p">[</span><span class="s1">&#39;138&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="mi">138</span>

<span class="n">base</span> <span class="o">=</span> <span class="n">alt</span><span class="o">.</span><span class="n">Chart</span><span class="p">(</span><span class="n">source</span><span class="p">)</span><span class="o">.</span><span class="n">mark_line</span><span class="p">()</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span>
    <span class="n">alt</span><span class="o">.</span><span class="n">X</span><span class="p">(</span><span class="s1">&#39;track&#39;</span><span class="p">),</span>
    <span class="n">alt</span><span class="o">.</span><span class="n">Y</span><span class="p">(</span><span class="s1">&#39;bpm&#39;</span><span class="p">,</span> <span class="n">scale</span><span class="o">=</span><span class="n">alt</span><span class="o">.</span><span class="n">Scale</span><span class="p">(</span><span class="n">domain</span><span class="o">=</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="mi">150</span><span class="p">))),</span>
<span class="p">)</span><span class="o">.</span><span class="n">properties</span><span class="p">(</span>
    <span class="n">title</span><span class="o">=</span><span class="s2">&quot;ASOT Top 1000 - BPM of track&quot;</span>
<span class="p">)</span>

<span class="n">rule</span> <span class="o">=</span> <span class="n">alt</span><span class="o">.</span><span class="n">Chart</span><span class="p">(</span><span class="n">source</span><span class="p">)</span><span class="o">.</span><span class="n">mark_rule</span><span class="p">(</span><span class="n">color</span><span class="o">=</span><span class="s1">&#39;red&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span>
    <span class="n">y</span><span class="o">=</span><span class="s1">&#39;138&#39;</span>
<span class="p">)</span>

<span class="n">base</span> <span class="o">+</span> <span class="n">rule</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">

<div id="altair-viz-ae13ee98fd81491eaa76c86aa487304e"></div>
<script type="text/javascript">
  (function(spec, embedOpt){
    let outputDiv = document.currentScript.previousElementSibling;
    if (outputDiv.id !== "altair-viz-ae13ee98fd81491eaa76c86aa487304e") {
      outputDiv = document.getElementById("altair-viz-ae13ee98fd81491eaa76c86aa487304e");
    }
    const paths = {
      "vega": "https://cdn.jsdelivr.net/npm//vega@5?noext",
      "vega-lib": "https://cdn.jsdelivr.net/npm//vega-lib?noext",
      "vega-lite": "https://cdn.jsdelivr.net/npm//vega-lite@4.8.1?noext",
      "vega-embed": "https://cdn.jsdelivr.net/npm//vega-embed@6?noext",
    };

    function loadScript(lib) {
      return new Promise(function(resolve, reject) {
        var s = document.createElement('script');
        s.src = paths[lib];
        s.async = true;
        s.onload = () => resolve(paths[lib]);
        s.onerror = () => reject(`Error loading script: ${paths[lib]}`);
        document.getElementsByTagName("head")[0].appendChild(s);
      });
    }

    function showError(err) {
      outputDiv.innerHTML = `<div class="error" style="color:red;">${err}</div>`;
      throw err;
    }

    function displayChart(vegaEmbed) {
      vegaEmbed(outputDiv, spec, embedOpt)
        .catch(err => showError(`Javascript Error: ${err.message}<br>This usually means there's a typo in your chart specification. See the javascript console for the full traceback.`));
    }

    if(typeof define === "function" && define.amd) {
      requirejs.config({paths});
      require(["vega-embed"], displayChart, err => showError(`Error loading script: ${err.message}`));
    } else if (typeof vegaEmbed === "function") {
      displayChart(vegaEmbed);
    } else {
      loadScript("vega")
        .then(() => loadScript("vega-lite"))
        .then(() => loadScript("vega-embed"))
        .catch(showError)
        .then(() => displayChart(vegaEmbed));
    }
  })({"config": {"view": {"continuousWidth": 400, "continuousHeight": 300}}, "layer": [{"mark": "line", "encoding": {"x": {"type": "quantitative", "field": "track"}, "y": {"type": "quantitative", "field": "bpm", "scale": {"domain": [100, 150]}}}, "title": "ASOT Top 1000 - BPM of track"}, {"mark": {"type": "rule", "color": "red"}, "encoding": {"y": {"type": "quantitative", "field": "138"}}}], "data": {"name": "data-5dc8929a69a20aca0326fad099b05a20"}, "$schema": "https://vega.github.io/schema/vega-lite/v4.8.1.json", "datasets": {"data-5dc8929a69a20aca0326fad099b05a20": [{"track": 0, "bpm": 135.981, "138": 138}, {"track": 1, "bpm": 137.993, "138": 138}, {"track": 2, "bpm": 139.978, "138": 138}, {"track": 3, "bpm": 140.016, "138": 138}, {"track": 4, "bpm": 126.997, "138": 138}, {"track": 5, "bpm": 127.996, "138": 138}, {"track": 6, "bpm": 132.003, "138": 138}, {"track": 7, "bpm": 139.994, "138": 138}, {"track": 8, "bpm": 137.999, "138": 138}, {"track": 9, "bpm": 136.002, "138": 138}, {"track": 10, "bpm": 131.992, "138": 138}, {"track": 11, "bpm": 135.843, "138": 138}, {"track": 12, "bpm": 130.004, "138": 138}, {"track": 13, "bpm": 134.005, "138": 138}, {"track": 14, "bpm": 140.01, "138": 138}, {"track": 15, "bpm": 140.003, "138": 138}, {"track": 16, "bpm": 129.987, "138": 138}, {"track": 17, "bpm": 139.7, "138": 138}, {"track": 18, "bpm": 127.011, "138": 138}, {"track": 19, "bpm": 137.659, "138": 138}, {"track": 20, "bpm": 127.99, "138": 138}, {"track": 21, "bpm": 140.005, "138": 138}, {"track": 22, "bpm": 131.987, "138": 138}, {"track": 23, "bpm": 131.977, "138": 138}, {"track": 24, "bpm": 138.003, "138": 138}, {"track": 25, "bpm": 132.0, "138": 138}, {"track": 26, "bpm": 139.985, "138": 138}, {"track": 27, "bpm": 133.993, "138": 138}, {"track": 28, "bpm": 136.029, "138": 138}, {"track": 29, "bpm": 129.982, "138": 138}, {"track": 30, "bpm": 127.963, "138": 138}, {"track": 31, "bpm": 134.986, "138": 138}, {"track": 32, "bpm": 137.982, "138": 138}, {"track": 33, "bpm": 139.992, "138": 138}, {"track": 34, "bpm": 133.98, "138": 138}, {"track": 35, "bpm": 132.009, "138": 138}, {"track": 36, "bpm": 128.002, "138": 138}, {"track": 37, "bpm": 128.013, "138": 138}, {"track": 38, "bpm": 136.987, "138": 138}, {"track": 39, "bpm": 137.989, "138": 138}, {"track": 40, "bpm": 135.001, "138": 138}, {"track": 41, "bpm": 135.99, "138": 138}, {"track": 42, "bpm": 133.965, "138": 138}, {"track": 43, "bpm": 138.009, "138": 138}, {"track": 44, "bpm": 139.973, "138": 138}, {"track": 45, "bpm": 129.942, "138": 138}, {"track": 46, "bpm": 133.998, "138": 138}, {"track": 47, "bpm": 128.012, "138": 138}, {"track": 48, "bpm": 130.008, "138": 138}, {"track": 49, "bpm": 103.512, "138": 138}, {"track": 50, "bpm": 124.998, "138": 138}, {"track": 51, "bpm": 126.983, "138": 138}, {"track": 52, "bpm": 139.994, "138": 138}, {"track": 53, "bpm": 133.997, "138": 138}, {"track": 54, "bpm": 135.978, "138": 138}, {"track": 55, "bpm": 132.026, "138": 138}, {"track": 56, "bpm": 136.987, "138": 138}, {"track": 57, "bpm": 130.017, "138": 138}, {"track": 58, "bpm": 128.002, "138": 138}, {"track": 59, "bpm": 132.0, "138": 138}, {"track": 60, "bpm": 138.133, "138": 138}, {"track": 61, "bpm": 128.022, "138": 138}, {"track": 62, "bpm": 130.015, "138": 138}, {"track": 63, "bpm": 132.0, "138": 138}, {"track": 64, "bpm": 140.016, "138": 138}, {"track": 65, "bpm": 127.997, "138": 138}, {"track": 66, "bpm": 137.994, "138": 138}, {"track": 67, "bpm": 135.991, "138": 138}, {"track": 68, "bpm": 138.013, "138": 138}, {"track": 69, "bpm": 127.99, "138": 138}, {"track": 70, "bpm": 134.012, "138": 138}, {"track": 71, "bpm": 136.999, "138": 138}, {"track": 72, "bpm": 138.005, "138": 138}, {"track": 73, "bpm": 137.998, "138": 138}, {"track": 74, "bpm": 137.979, "138": 138}, {"track": 75, "bpm": 140.002, "138": 138}, {"track": 76, "bpm": 128.02, "138": 138}, {"track": 77, "bpm": 139.989, "138": 138}, {"track": 78, "bpm": 130.015, "138": 138}, {"track": 79, "bpm": 126.026, "138": 138}, {"track": 80, "bpm": 130.016, "138": 138}, {"track": 81, "bpm": 128.025, "138": 138}, {"track": 82, "bpm": 128.006, "138": 138}, {"track": 83, "bpm": 103.485, "138": 138}, {"track": 84, "bpm": 131.987, "138": 138}, {"track": 85, "bpm": 126.011, "138": 138}, {"track": 86, "bpm": 133.98, "138": 138}, {"track": 87, "bpm": 127.998, "138": 138}, {"track": 88, "bpm": 130.019, "138": 138}, {"track": 89, "bpm": 137.99, "138": 138}, {"track": 90, "bpm": 131.989, "138": 138}, {"track": 91, "bpm": 138.005, "138": 138}, {"track": 92, "bpm": 132.009, "138": 138}, {"track": 93, "bpm": 130.972, "138": 138}, {"track": 94, "bpm": 131.97, "138": 138}, {"track": 95, "bpm": 138.012, "138": 138}, {"track": 96, "bpm": 140.02, "138": 138}, {"track": 97, "bpm": 135.022, "138": 138}, {"track": 98, "bpm": 129.977, "138": 138}, {"track": 99, "bpm": 138.011, "138": 138}, {"track": 100, "bpm": 132.914, "138": 138}, {"track": 101, "bpm": 127.991, "138": 138}, {"track": 102, "bpm": 136.999, "138": 138}, {"track": 103, "bpm": 138.018, "138": 138}, {"track": 104, "bpm": 138.982, "138": 138}, {"track": 105, "bpm": 128.027, "138": 138}, {"track": 106, "bpm": 135.004, "138": 138}, {"track": 107, "bpm": 128.005, "138": 138}, {"track": 108, "bpm": 128.028, "138": 138}, {"track": 109, "bpm": 125.949, "138": 138}, {"track": 110, "bpm": 137.983, "138": 138}, {"track": 111, "bpm": 138.011, "138": 138}, {"track": 112, "bpm": 134.992, "138": 138}, {"track": 113, "bpm": 135.992, "138": 138}, {"track": 114, "bpm": 128.995, "138": 138}, {"track": 115, "bpm": 128.003, "138": 138}, {"track": 116, "bpm": 125.025, "138": 138}, {"track": 117, "bpm": 127.991, "138": 138}, {"track": 118, "bpm": 135.999, "138": 138}, {"track": 119, "bpm": 139.977, "138": 138}, {"track": 120, "bpm": 139.998, "138": 138}, {"track": 121, "bpm": 131.99, "138": 138}, {"track": 122, "bpm": 136.984, "138": 138}, {"track": 123, "bpm": 127.992, "138": 138}, {"track": 124, "bpm": 131.979, "138": 138}, {"track": 125, "bpm": 138.007, "138": 138}, {"track": 126, "bpm": 137.981, "138": 138}, {"track": 127, "bpm": 138.006, "138": 138}, {"track": 128, "bpm": 138.005, "138": 138}, {"track": 129, "bpm": 138.009, "138": 138}, {"track": 130, "bpm": 134.997, "138": 138}, {"track": 131, "bpm": 127.995, "138": 138}, {"track": 132, "bpm": 135.003, "138": 138}, {"track": 133, "bpm": 133.983, "138": 138}, {"track": 134, "bpm": 127.977, "138": 138}, {"track": 135, "bpm": 130.011, "138": 138}, {"track": 136, "bpm": 138.022, "138": 138}, {"track": 137, "bpm": 127.988, "138": 138}, {"track": 138, "bpm": 132.031, "138": 138}, {"track": 139, "bpm": 137.998, "138": 138}, {"track": 140, "bpm": 133.991, "138": 138}, {"track": 141, "bpm": 130.002, "138": 138}, {"track": 142, "bpm": 134.999, "138": 138}, {"track": 143, "bpm": 129.984, "138": 138}, {"track": 144, "bpm": 138.017, "138": 138}, {"track": 145, "bpm": 139.981, "138": 138}, {"track": 146, "bpm": 138.064, "138": 138}, {"track": 147, "bpm": 123.997, "138": 138}, {"track": 148, "bpm": 139.994, "138": 138}, {"track": 149, "bpm": 133.962, "138": 138}, {"track": 150, "bpm": 138.007, "138": 138}, {"track": 151, "bpm": 137.507, "138": 138}, {"track": 152, "bpm": 137.984, "138": 138}, {"track": 153, "bpm": 133.002, "138": 138}, {"track": 154, "bpm": 132.003, "138": 138}, {"track": 155, "bpm": 139.992, "138": 138}, {"track": 156, "bpm": 138.017, "138": 138}, {"track": 157, "bpm": 134.021, "138": 138}, {"track": 158, "bpm": 130.021, "138": 138}, {"track": 159, "bpm": 138.029, "138": 138}, {"track": 160, "bpm": 128.048, "138": 138}, {"track": 161, "bpm": 129.988, "138": 138}, {"track": 162, "bpm": 138.998, "138": 138}, {"track": 163, "bpm": 138.004, "138": 138}, {"track": 164, "bpm": 137.985, "138": 138}, {"track": 165, "bpm": 138.014, "138": 138}, {"track": 166, "bpm": 133.998, "138": 138}, {"track": 167, "bpm": 127.999, "138": 138}, {"track": 168, "bpm": 136.0, "138": 138}, {"track": 169, "bpm": 131.988, "138": 138}, {"track": 170, "bpm": 126.011, "138": 138}, {"track": 171, "bpm": 138.101, "138": 138}, {"track": 172, "bpm": 137.969, "138": 138}, {"track": 173, "bpm": 139.005, "138": 138}, {"track": 174, "bpm": 137.012, "138": 138}, {"track": 175, "bpm": 131.979, "138": 138}, {"track": 176, "bpm": 131.999, "138": 138}, {"track": 177, "bpm": 135.996, "138": 138}, {"track": 178, "bpm": 136.062, "138": 138}, {"track": 179, "bpm": 138.012, "138": 138}, {"track": 180, "bpm": 127.015, "138": 138}, {"track": 181, "bpm": 133.997, "138": 138}, {"track": 182, "bpm": 129.989, "138": 138}, {"track": 183, "bpm": 135.97, "138": 138}, {"track": 184, "bpm": 134.997, "138": 138}, {"track": 185, "bpm": 139.993, "138": 138}, {"track": 186, "bpm": 138.013, "138": 138}, {"track": 187, "bpm": 137.986, "138": 138}, {"track": 188, "bpm": 138.002, "138": 138}, {"track": 189, "bpm": 128.011, "138": 138}, {"track": 190, "bpm": 138.008, "138": 138}, {"track": 191, "bpm": 130.024, "138": 138}, {"track": 192, "bpm": 136.008, "138": 138}, {"track": 193, "bpm": 134.992, "138": 138}, {"track": 194, "bpm": 132.971, "138": 138}, {"track": 195, "bpm": 127.95, "138": 138}, {"track": 196, "bpm": 130.006, "138": 138}, {"track": 197, "bpm": 130.009, "138": 138}, {"track": 198, "bpm": 125.972, "138": 138}, {"track": 199, "bpm": 139.977, "138": 138}, {"track": 200, "bpm": 131.984, "138": 138}, {"track": 201, "bpm": 134.995, "138": 138}, {"track": 202, "bpm": 139.998, "138": 138}, {"track": 203, "bpm": 140.008, "138": 138}, {"track": 204, "bpm": 131.982, "138": 138}, {"track": 205, "bpm": 134.021, "138": 138}, {"track": 206, "bpm": 130.042, "138": 138}, {"track": 207, "bpm": 139.998, "138": 138}, {"track": 208, "bpm": 132.053, "138": 138}, {"track": 209, "bpm": 131.996, "138": 138}, {"track": 210, "bpm": 140.904, "138": 138}, {"track": 211, "bpm": 138.018, "138": 138}, {"track": 212, "bpm": 138.015, "138": 138}, {"track": 213, "bpm": 137.978, "138": 138}, {"track": 214, "bpm": 131.981, "138": 138}, {"track": 215, "bpm": 133.996, "138": 138}, {"track": 216, "bpm": 129.967, "138": 138}, {"track": 217, "bpm": 127.986, "138": 138}, {"track": 218, "bpm": 130.008, "138": 138}, {"track": 219, "bpm": 132.004, "138": 138}, {"track": 220, "bpm": 135.562, "138": 138}, {"track": 221, "bpm": 138.016, "138": 138}, {"track": 222, "bpm": 130.008, "138": 138}, {"track": 223, "bpm": 136.99, "138": 138}, {"track": 224, "bpm": 131.982, "138": 138}, {"track": 225, "bpm": 134.995, "138": 138}, {"track": 226, "bpm": 133.997, "138": 138}, {"track": 227, "bpm": 130.001, "138": 138}, {"track": 228, "bpm": 138.004, "138": 138}, {"track": 229, "bpm": 137.988, "138": 138}, {"track": 230, "bpm": 130.022, "138": 138}, {"track": 231, "bpm": 134.984, "138": 138}, {"track": 232, "bpm": 134.996, "138": 138}, {"track": 233, "bpm": 137.991, "138": 138}, {"track": 234, "bpm": 133.985, "138": 138}, {"track": 235, "bpm": 133.992, "138": 138}, {"track": 236, "bpm": 135.98, "138": 138}, {"track": 237, "bpm": 137.999, "138": 138}, {"track": 238, "bpm": 137.984, "138": 138}, {"track": 239, "bpm": 140.011, "138": 138}, {"track": 240, "bpm": 130.003, "138": 138}, {"track": 241, "bpm": 132.009, "138": 138}, {"track": 242, "bpm": 138.018, "138": 138}, {"track": 243, "bpm": 137.994, "138": 138}, {"track": 244, "bpm": 140.003, "138": 138}, {"track": 245, "bpm": 140.003, "138": 138}, {"track": 246, "bpm": 132.003, "138": 138}, {"track": 247, "bpm": 128.065, "138": 138}, {"track": 248, "bpm": 136.004, "138": 138}, {"track": 249, "bpm": 130.001, "138": 138}, {"track": 250, "bpm": 134.994, "138": 138}, {"track": 251, "bpm": 136.014, "138": 138}, {"track": 252, "bpm": 138.005, "138": 138}, {"track": 253, "bpm": 138.011, "138": 138}, {"track": 254, "bpm": 135.997, "138": 138}, {"track": 255, "bpm": 140.042, "138": 138}, {"track": 256, "bpm": 137.999, "138": 138}, {"track": 257, "bpm": 138.009, "138": 138}, {"track": 258, "bpm": 132.003, "138": 138}, {"track": 259, "bpm": 127.995, "138": 138}, {"track": 260, "bpm": 129.944, "138": 138}, {"track": 261, "bpm": 137.98, "138": 138}, {"track": 262, "bpm": 127.975, "138": 138}, {"track": 263, "bpm": 128.006, "138": 138}, {"track": 264, "bpm": 127.976, "138": 138}, {"track": 265, "bpm": 135.007, "138": 138}, {"track": 266, "bpm": 132.022, "138": 138}, {"track": 267, "bpm": 131.968, "138": 138}, {"track": 268, "bpm": 138.005, "138": 138}, {"track": 269, "bpm": 138.003, "138": 138}, {"track": 270, "bpm": 127.98, "138": 138}, {"track": 271, "bpm": 130.52, "138": 138}, {"track": 272, "bpm": 139.971, "138": 138}, {"track": 273, "bpm": 132.043, "138": 138}, {"track": 274, "bpm": 131.001, "138": 138}, {"track": 275, "bpm": 136.977, "138": 138}, {"track": 276, "bpm": 139.986, "138": 138}, {"track": 277, "bpm": 131.009, "138": 138}, {"track": 278, "bpm": 134.017, "138": 138}, {"track": 279, "bpm": 136.987, "138": 138}, {"track": 280, "bpm": 137.995, "138": 138}, {"track": 281, "bpm": 128.003, "138": 138}, {"track": 282, "bpm": 139.98, "138": 138}, {"track": 283, "bpm": 134.985, "138": 138}, {"track": 284, "bpm": 138.0, "138": 138}, {"track": 285, "bpm": 136.006, "138": 138}, {"track": 286, "bpm": 139.997, "138": 138}, {"track": 287, "bpm": 132.023, "138": 138}, {"track": 288, "bpm": 128.015, "138": 138}, {"track": 289, "bpm": 123.993, "138": 138}, {"track": 290, "bpm": 138.016, "138": 138}, {"track": 291, "bpm": 137.056, "138": 138}, {"track": 292, "bpm": 127.994, "138": 138}, {"track": 293, "bpm": 127.985, "138": 138}, {"track": 294, "bpm": 139.983, "138": 138}, {"track": 295, "bpm": 137.974, "138": 138}, {"track": 296, "bpm": 135.986, "138": 138}, {"track": 297, "bpm": 130.009, "138": 138}, {"track": 298, "bpm": 137.998, "138": 138}, {"track": 299, "bpm": 130.019, "138": 138}, {"track": 300, "bpm": 138.032, "138": 138}, {"track": 301, "bpm": 134.99, "138": 138}, {"track": 302, "bpm": 135.009, "138": 138}, {"track": 303, "bpm": 133.981, "138": 138}, {"track": 304, "bpm": 138.008, "138": 138}, {"track": 305, "bpm": 137.985, "138": 138}, {"track": 306, "bpm": 128.023, "138": 138}, {"track": 307, "bpm": 132.009, "138": 138}, {"track": 308, "bpm": 135.997, "138": 138}, {"track": 309, "bpm": 141.85, "138": 138}, {"track": 310, "bpm": 138.003, "138": 138}, {"track": 311, "bpm": 139.988, "138": 138}, {"track": 312, "bpm": 133.003, "138": 138}, {"track": 313, "bpm": 134.995, "138": 138}, {"track": 314, "bpm": 134.999, "138": 138}, {"track": 315, "bpm": 135.964, "138": 138}, {"track": 316, "bpm": 137.995, "138": 138}, {"track": 317, "bpm": 136.015, "138": 138}, {"track": 318, "bpm": 138.011, "138": 138}, {"track": 319, "bpm": 133.996, "138": 138}, {"track": 320, "bpm": 138.041, "138": 138}, {"track": 321, "bpm": 139.977, "138": 138}, {"track": 322, "bpm": 132.034, "138": 138}, {"track": 323, "bpm": 130.041, "138": 138}, {"track": 324, "bpm": 129.973, "138": 138}, {"track": 325, "bpm": 132.025, "138": 138}, {"track": 326, "bpm": 136.015, "138": 138}, {"track": 327, "bpm": 126.014, "138": 138}, {"track": 328, "bpm": 139.972, "138": 138}, {"track": 329, "bpm": 135.986, "138": 138}, {"track": 330, "bpm": 132.016, "138": 138}, {"track": 331, "bpm": 140.009, "138": 138}, {"track": 332, "bpm": 132.011, "138": 138}, {"track": 333, "bpm": 133.985, "138": 138}, {"track": 334, "bpm": 135.006, "138": 138}, {"track": 335, "bpm": 136.99, "138": 138}, {"track": 336, "bpm": 139.023, "138": 138}, {"track": 337, "bpm": 128.02, "138": 138}, {"track": 338, "bpm": 139.995, "138": 138}, {"track": 339, "bpm": 128.0, "138": 138}, {"track": 340, "bpm": 138.015, "138": 138}, {"track": 341, "bpm": 131.968, "138": 138}, {"track": 342, "bpm": 132.0, "138": 138}, {"track": 343, "bpm": 133.995, "138": 138}, {"track": 344, "bpm": 136.0, "138": 138}, {"track": 345, "bpm": 128.006, "138": 138}, {"track": 346, "bpm": 144.988, "138": 138}, {"track": 347, "bpm": 131.989, "138": 138}, {"track": 348, "bpm": 131.929, "138": 138}, {"track": 349, "bpm": 129.999, "138": 138}, {"track": 350, "bpm": 121.983, "138": 138}, {"track": 351, "bpm": 132.003, "138": 138}, {"track": 352, "bpm": 130.001, "138": 138}, {"track": 353, "bpm": 134.988, "138": 138}, {"track": 354, "bpm": 127.981, "138": 138}, {"track": 355, "bpm": 132.003, "138": 138}, {"track": 356, "bpm": 130.001, "138": 138}, {"track": 357, "bpm": 137.994, "138": 138}, {"track": 358, "bpm": 138.018, "138": 138}, {"track": 359, "bpm": 138.003, "138": 138}, {"track": 360, "bpm": 135.997, "138": 138}, {"track": 361, "bpm": 134.989, "138": 138}, {"track": 362, "bpm": 135.038, "138": 138}, {"track": 363, "bpm": 133.99, "138": 138}, {"track": 364, "bpm": 137.901, "138": 138}, {"track": 365, "bpm": 138.0, "138": 138}, {"track": 366, "bpm": 128.02, "138": 138}, {"track": 367, "bpm": 137.999, "138": 138}, {"track": 368, "bpm": 135.995, "138": 138}, {"track": 369, "bpm": 134.007, "138": 138}, {"track": 370, "bpm": 134.002, "138": 138}, {"track": 371, "bpm": 138.003, "138": 138}, {"track": 372, "bpm": 127.983, "138": 138}, {"track": 373, "bpm": 137.996, "138": 138}, {"track": 374, "bpm": 129.997, "138": 138}, {"track": 375, "bpm": 127.002, "138": 138}, {"track": 376, "bpm": 131.989, "138": 138}, {"track": 377, "bpm": 127.979, "138": 138}, {"track": 378, "bpm": 135.987, "138": 138}, {"track": 379, "bpm": 129.979, "138": 138}, {"track": 380, "bpm": 133.032, "138": 138}, {"track": 381, "bpm": 138.006, "138": 138}, {"track": 382, "bpm": 134.994, "138": 138}, {"track": 383, "bpm": 135.0, "138": 138}, {"track": 384, "bpm": 135.246, "138": 138}, {"track": 385, "bpm": 131.985, "138": 138}, {"track": 386, "bpm": 134.999, "138": 138}, {"track": 387, "bpm": 138.0, "138": 138}, {"track": 388, "bpm": 123.998, "138": 138}, {"track": 389, "bpm": 131.993, "138": 138}, {"track": 390, "bpm": 130.009, "138": 138}, {"track": 391, "bpm": 131.995, "138": 138}, {"track": 392, "bpm": 139.974, "138": 138}, {"track": 393, "bpm": 126.013, "138": 138}, {"track": 394, "bpm": 127.997, "138": 138}, {"track": 395, "bpm": 138.034, "138": 138}, {"track": 396, "bpm": 132.006, "138": 138}, {"track": 397, "bpm": 127.995, "138": 138}, {"track": 398, "bpm": 131.994, "138": 138}, {"track": 399, "bpm": 127.981, "138": 138}, {"track": 400, "bpm": 125.984, "138": 138}, {"track": 401, "bpm": 137.994, "138": 138}, {"track": 402, "bpm": 133.993, "138": 138}, {"track": 403, "bpm": 135.006, "138": 138}, {"track": 404, "bpm": 138.998, "138": 138}, {"track": 405, "bpm": 135.999, "138": 138}, {"track": 406, "bpm": 137.996, "138": 138}, {"track": 407, "bpm": 129.972, "138": 138}, {"track": 408, "bpm": 140.033, "138": 138}, {"track": 409, "bpm": 135.969, "138": 138}, {"track": 410, "bpm": 130.005, "138": 138}, {"track": 411, "bpm": 138.007, "138": 138}, {"track": 412, "bpm": 126.017, "138": 138}, {"track": 413, "bpm": 130.001, "138": 138}, {"track": 414, "bpm": 129.96, "138": 138}, {"track": 415, "bpm": 136.027, "138": 138}, {"track": 416, "bpm": 137.997, "138": 138}, {"track": 417, "bpm": 138.017, "138": 138}, {"track": 418, "bpm": 139.992, "138": 138}, {"track": 419, "bpm": 139.988, "138": 138}, {"track": 420, "bpm": 126.018, "138": 138}, {"track": 421, "bpm": 138.007, "138": 138}, {"track": 422, "bpm": 139.991, "138": 138}, {"track": 423, "bpm": 128.005, "138": 138}, {"track": 424, "bpm": 135.921, "138": 138}, {"track": 425, "bpm": 139.997, "138": 138}, {"track": 426, "bpm": 132.977, "138": 138}, {"track": 427, "bpm": 129.982, "138": 138}, {"track": 428, "bpm": 137.996, "138": 138}, {"track": 429, "bpm": 138.033, "138": 138}, {"track": 430, "bpm": 127.978, "138": 138}, {"track": 431, "bpm": 128.011, "138": 138}, {"track": 432, "bpm": 128.03, "138": 138}, {"track": 433, "bpm": 138.002, "138": 138}, {"track": 434, "bpm": 135.031, "138": 138}, {"track": 435, "bpm": 129.008, "138": 138}, {"track": 436, "bpm": 128.013, "138": 138}, {"track": 437, "bpm": 136.964, "138": 138}, {"track": 438, "bpm": 138.002, "138": 138}, {"track": 439, "bpm": 132.005, "138": 138}, {"track": 440, "bpm": 134.008, "138": 138}, {"track": 441, "bpm": 129.982, "138": 138}, {"track": 442, "bpm": 127.992, "138": 138}, {"track": 443, "bpm": 129.991, "138": 138}, {"track": 444, "bpm": 135.988, "138": 138}, {"track": 445, "bpm": 134.999, "138": 138}, {"track": 446, "bpm": 132.007, "138": 138}, {"track": 447, "bpm": 138.017, "138": 138}, {"track": 448, "bpm": 132.015, "138": 138}, {"track": 449, "bpm": 130.029, "138": 138}, {"track": 450, "bpm": 135.003, "138": 138}, {"track": 451, "bpm": 139.996, "138": 138}, {"track": 452, "bpm": 138.035, "138": 138}, {"track": 453, "bpm": 131.977, "138": 138}, {"track": 454, "bpm": 133.256, "138": 138}, {"track": 455, "bpm": 125.976, "138": 138}, {"track": 456, "bpm": 128.028, "138": 138}, {"track": 457, "bpm": 138.985, "138": 138}, {"track": 458, "bpm": 138.015, "138": 138}, {"track": 459, "bpm": 132.008, "138": 138}, {"track": 460, "bpm": 132.012, "138": 138}, {"track": 461, "bpm": 128.007, "138": 138}, {"track": 462, "bpm": 137.991, "138": 138}, {"track": 463, "bpm": 139.989, "138": 138}, {"track": 464, "bpm": 127.991, "138": 138}, {"track": 465, "bpm": 138.024, "138": 138}, {"track": 466, "bpm": 138.955, "138": 138}, {"track": 467, "bpm": 130.025, "138": 138}, {"track": 468, "bpm": 138.0, "138": 138}, {"track": 469, "bpm": 138.0, "138": 138}, {"track": 470, "bpm": 133.956, "138": 138}, {"track": 471, "bpm": 131.993, "138": 138}, {"track": 472, "bpm": 129.975, "138": 138}, {"track": 473, "bpm": 129.994, "138": 138}, {"track": 474, "bpm": 132.002, "138": 138}, {"track": 475, "bpm": 140.002, "138": 138}, {"track": 476, "bpm": 134.992, "138": 138}, {"track": 477, "bpm": 138.005, "138": 138}, {"track": 478, "bpm": 134.0, "138": 138}, {"track": 479, "bpm": 140.006, "138": 138}, {"track": 480, "bpm": 137.997, "138": 138}, {"track": 481, "bpm": 130.015, "138": 138}, {"track": 482, "bpm": 138.021, "138": 138}, {"track": 483, "bpm": 132.003, "138": 138}, {"track": 484, "bpm": 140.299, "138": 138}, {"track": 485, "bpm": 131.986, "138": 138}, {"track": 486, "bpm": 131.992, "138": 138}, {"track": 487, "bpm": 139.99, "138": 138}, {"track": 488, "bpm": 128.004, "138": 138}, {"track": 489, "bpm": 125.997, "138": 138}, {"track": 490, "bpm": 135.99, "138": 138}, {"track": 491, "bpm": 126.991, "138": 138}, {"track": 492, "bpm": 135.008, "138": 138}, {"track": 493, "bpm": 138.017, "138": 138}, {"track": 494, "bpm": 137.99, "138": 138}, {"track": 495, "bpm": 137.979, "138": 138}, {"track": 496, "bpm": 128.036, "138": 138}, {"track": 497, "bpm": 139.987, "138": 138}, {"track": 498, "bpm": 135.001, "138": 138}, {"track": 499, "bpm": 139.854, "138": 138}, {"track": 500, "bpm": 128.009, "138": 138}, {"track": 501, "bpm": 133.33, "138": 138}, {"track": 502, "bpm": 132.176, "138": 138}, {"track": 503, "bpm": 125.979, "138": 138}, {"track": 504, "bpm": 133.958, "138": 138}, {"track": 505, "bpm": 140.052, "138": 138}, {"track": 506, "bpm": 135.087, "138": 138}, {"track": 507, "bpm": 132.995, "138": 138}, {"track": 508, "bpm": 127.996, "138": 138}, {"track": 509, "bpm": 138.0, "138": 138}, {"track": 510, "bpm": 130.025, "138": 138}, {"track": 511, "bpm": 127.988, "138": 138}, {"track": 512, "bpm": 136.998, "138": 138}, {"track": 513, "bpm": 138.002, "138": 138}, {"track": 514, "bpm": 132.022, "138": 138}, {"track": 515, "bpm": 138.014, "138": 138}, {"track": 516, "bpm": 127.977, "138": 138}, {"track": 517, "bpm": 130.02, "138": 138}, {"track": 518, "bpm": 138.0, "138": 138}, {"track": 519, "bpm": 139.994, "138": 138}, {"track": 520, "bpm": 135.468, "138": 138}, {"track": 521, "bpm": 131.986, "138": 138}, {"track": 522, "bpm": 138.008, "138": 138}, {"track": 523, "bpm": 130.023, "138": 138}, {"track": 524, "bpm": 139.99, "138": 138}, {"track": 525, "bpm": 134.002, "138": 138}, {"track": 526, "bpm": 128.01, "138": 138}, {"track": 527, "bpm": 137.996, "138": 138}, {"track": 528, "bpm": 138.006, "138": 138}, {"track": 529, "bpm": 128.011, "138": 138}, {"track": 530, "bpm": 129.974, "138": 138}, {"track": 531, "bpm": 133.992, "138": 138}, {"track": 532, "bpm": 129.978, "138": 138}, {"track": 533, "bpm": 121.997, "138": 138}, {"track": 534, "bpm": 129.99, "138": 138}, {"track": 535, "bpm": 139.28, "138": 138}, {"track": 536, "bpm": 131.996, "138": 138}, {"track": 537, "bpm": 131.988, "138": 138}, {"track": 538, "bpm": 130.008, "138": 138}, {"track": 539, "bpm": 128.016, "138": 138}, {"track": 540, "bpm": 139.998, "138": 138}, {"track": 541, "bpm": 128.01, "138": 138}, {"track": 542, "bpm": 134.988, "138": 138}, {"track": 543, "bpm": 139.989, "138": 138}, {"track": 544, "bpm": 131.983, "138": 138}, {"track": 545, "bpm": 136.009, "138": 138}, {"track": 546, "bpm": 127.974, "138": 138}, {"track": 547, "bpm": 136.007, "138": 138}, {"track": 548, "bpm": 132.995, "138": 138}, {"track": 549, "bpm": 136.977, "138": 138}, {"track": 550, "bpm": 138.006, "138": 138}, {"track": 551, "bpm": 135.023, "138": 138}, {"track": 552, "bpm": 140.004, "138": 138}, {"track": 553, "bpm": 130.007, "138": 138}, {"track": 554, "bpm": 132.01, "138": 138}, {"track": 555, "bpm": 138.008, "138": 138}, {"track": 556, "bpm": 138.029, "138": 138}, {"track": 557, "bpm": 128.004, "138": 138}, {"track": 558, "bpm": 131.981, "138": 138}, {"track": 559, "bpm": 138.011, "138": 138}, {"track": 560, "bpm": 140.002, "138": 138}, {"track": 561, "bpm": 140.02, "138": 138}, {"track": 562, "bpm": 132.005, "138": 138}, {"track": 563, "bpm": 129.995, "138": 138}, {"track": 564, "bpm": 126.986, "138": 138}, {"track": 565, "bpm": 131.995, "138": 138}, {"track": 566, "bpm": 132.012, "138": 138}, {"track": 567, "bpm": 139.982, "138": 138}, {"track": 568, "bpm": 142.002, "138": 138}, {"track": 569, "bpm": 128.025, "138": 138}, {"track": 570, "bpm": 131.497, "138": 138}, {"track": 571, "bpm": 134.009, "138": 138}, {"track": 572, "bpm": 127.0, "138": 138}, {"track": 573, "bpm": 137.831, "138": 138}, {"track": 574, "bpm": 140.005, "138": 138}, {"track": 575, "bpm": 137.974, "138": 138}, {"track": 576, "bpm": 130.003, "138": 138}, {"track": 577, "bpm": 139.965, "138": 138}, {"track": 578, "bpm": 132.993, "138": 138}, {"track": 579, "bpm": 132.014, "138": 138}, {"track": 580, "bpm": 127.964, "138": 138}, {"track": 581, "bpm": 127.993, "138": 138}, {"track": 582, "bpm": 130.007, "138": 138}, {"track": 583, "bpm": 125.003, "138": 138}, {"track": 584, "bpm": 137.985, "138": 138}, {"track": 585, "bpm": 129.995, "138": 138}, {"track": 586, "bpm": 127.003, "138": 138}, {"track": 587, "bpm": 137.022, "138": 138}, {"track": 588, "bpm": 137.956, "138": 138}, {"track": 589, "bpm": 131.997, "138": 138}, {"track": 590, "bpm": 133.981, "138": 138}, {"track": 591, "bpm": 139.993, "138": 138}, {"track": 592, "bpm": 126.003, "138": 138}, {"track": 593, "bpm": 137.988, "138": 138}, {"track": 594, "bpm": 127.953, "138": 138}, {"track": 595, "bpm": 127.995, "138": 138}, {"track": 596, "bpm": 128.0, "138": 138}, {"track": 597, "bpm": 136.005, "138": 138}, {"track": 598, "bpm": 133.977, "138": 138}, {"track": 599, "bpm": 137.978, "138": 138}, {"track": 600, "bpm": 131.993, "138": 138}, {"track": 601, "bpm": 131.994, "138": 138}, {"track": 602, "bpm": 133.987, "138": 138}, {"track": 603, "bpm": 138.01, "138": 138}, {"track": 604, "bpm": 128.0, "138": 138}, {"track": 605, "bpm": 131.964, "138": 138}, {"track": 606, "bpm": 135.018, "138": 138}, {"track": 607, "bpm": 129.967, "138": 138}, {"track": 608, "bpm": 138.018, "138": 138}, {"track": 609, "bpm": 138.001, "138": 138}, {"track": 610, "bpm": 139.969, "138": 138}, {"track": 611, "bpm": 137.977, "138": 138}, {"track": 612, "bpm": 137.99, "138": 138}, {"track": 613, "bpm": 131.993, "138": 138}, {"track": 614, "bpm": 134.98, "138": 138}, {"track": 615, "bpm": 139.982, "138": 138}, {"track": 616, "bpm": 132.006, "138": 138}, {"track": 617, "bpm": 129.987, "138": 138}, {"track": 618, "bpm": 127.987, "138": 138}, {"track": 619, "bpm": 138.014, "138": 138}, {"track": 620, "bpm": 137.997, "138": 138}, {"track": 621, "bpm": 127.962, "138": 138}, {"track": 622, "bpm": 134.007, "138": 138}, {"track": 623, "bpm": 138.001, "138": 138}, {"track": 624, "bpm": 134.99, "138": 138}, {"track": 625, "bpm": 134.982, "138": 138}, {"track": 626, "bpm": 139.996, "138": 138}, {"track": 627, "bpm": 139.982, "138": 138}, {"track": 628, "bpm": 133.919, "138": 138}, {"track": 629, "bpm": 137.997, "138": 138}, {"track": 630, "bpm": 138.002, "138": 138}, {"track": 631, "bpm": 141.981, "138": 138}, {"track": 632, "bpm": 140.017, "138": 138}, {"track": 633, "bpm": 128.056, "138": 138}, {"track": 634, "bpm": 138.007, "138": 138}, {"track": 635, "bpm": 127.971, "138": 138}, {"track": 636, "bpm": 129.965, "138": 138}, {"track": 637, "bpm": 131.993, "138": 138}, {"track": 638, "bpm": 139.984, "138": 138}, {"track": 639, "bpm": 136.97, "138": 138}, {"track": 640, "bpm": 127.981, "138": 138}, {"track": 641, "bpm": 135.966, "138": 138}, {"track": 642, "bpm": 133.981, "138": 138}, {"track": 643, "bpm": 127.886, "138": 138}, {"track": 644, "bpm": 132.002, "138": 138}, {"track": 645, "bpm": 133.992, "138": 138}, {"track": 646, "bpm": 138.005, "138": 138}, {"track": 647, "bpm": 135.99, "138": 138}, {"track": 648, "bpm": 137.986, "138": 138}, {"track": 649, "bpm": 136.007, "138": 138}, {"track": 650, "bpm": 137.994, "138": 138}, {"track": 651, "bpm": 135.001, "138": 138}, {"track": 652, "bpm": 127.993, "138": 138}, {"track": 653, "bpm": 131.855, "138": 138}, {"track": 654, "bpm": 131.999, "138": 138}, {"track": 655, "bpm": 130.997, "138": 138}, {"track": 656, "bpm": 136.024, "138": 138}, {"track": 657, "bpm": 137.0, "138": 138}, {"track": 658, "bpm": 127.976, "138": 138}, {"track": 659, "bpm": 127.988, "138": 138}, {"track": 660, "bpm": 130.007, "138": 138}, {"track": 661, "bpm": 136.989, "138": 138}, {"track": 662, "bpm": 128.044, "138": 138}, {"track": 663, "bpm": 129.997, "138": 138}, {"track": 664, "bpm": 138.02, "138": 138}, {"track": 665, "bpm": 139.98, "138": 138}, {"track": 666, "bpm": 133.978, "138": 138}, {"track": 667, "bpm": 127.99, "138": 138}, {"track": 668, "bpm": 131.99, "138": 138}, {"track": 669, "bpm": 139.986, "138": 138}, {"track": 670, "bpm": 130.987, "138": 138}, {"track": 671, "bpm": 130.015, "138": 138}, {"track": 672, "bpm": 135.018, "138": 138}, {"track": 673, "bpm": 133.985, "138": 138}, {"track": 674, "bpm": 132.008, "138": 138}, {"track": 675, "bpm": 138.015, "138": 138}, {"track": 676, "bpm": 135.999, "138": 138}, {"track": 677, "bpm": 138.011, "138": 138}, {"track": 678, "bpm": 139.023, "138": 138}, {"track": 679, "bpm": 137.992, "138": 138}, {"track": 680, "bpm": 137.997, "138": 138}, {"track": 681, "bpm": 136.001, "138": 138}, {"track": 682, "bpm": 131.995, "138": 138}, {"track": 683, "bpm": 130.018, "138": 138}, {"track": 684, "bpm": 133.977, "138": 138}, {"track": 685, "bpm": 135.983, "138": 138}, {"track": 686, "bpm": 132.994, "138": 138}, {"track": 687, "bpm": 137.982, "138": 138}, {"track": 688, "bpm": 140.004, "138": 138}, {"track": 689, "bpm": 134.007, "138": 138}, {"track": 690, "bpm": 132.009, "138": 138}, {"track": 691, "bpm": 135.02, "138": 138}, {"track": 692, "bpm": 125.984, "138": 138}, {"track": 693, "bpm": 133.986, "138": 138}, {"track": 694, "bpm": 128.006, "138": 138}, {"track": 695, "bpm": 132.01, "138": 138}, {"track": 696, "bpm": 129.995, "138": 138}, {"track": 697, "bpm": 124.008, "138": 138}, {"track": 698, "bpm": 131.001, "138": 138}, {"track": 699, "bpm": 138.015, "138": 138}, {"track": 700, "bpm": 135.99, "138": 138}, {"track": 701, "bpm": 129.968, "138": 138}, {"track": 702, "bpm": 139.99, "138": 138}, {"track": 703, "bpm": 133.982, "138": 138}, {"track": 704, "bpm": 137.994, "138": 138}, {"track": 705, "bpm": 138.016, "138": 138}, {"track": 706, "bpm": 128.007, "138": 138}, {"track": 707, "bpm": 134.036, "138": 138}, {"track": 708, "bpm": 129.986, "138": 138}, {"track": 709, "bpm": 130.991, "138": 138}, {"track": 710, "bpm": 139.988, "138": 138}, {"track": 711, "bpm": 135.017, "138": 138}, {"track": 712, "bpm": 140.011, "138": 138}, {"track": 713, "bpm": 137.995, "138": 138}, {"track": 714, "bpm": 136.988, "138": 138}, {"track": 715, "bpm": 130.015, "138": 138}, {"track": 716, "bpm": 129.987, "138": 138}, {"track": 717, "bpm": 137.985, "138": 138}, {"track": 718, "bpm": 127.984, "138": 138}, {"track": 719, "bpm": 138.024, "138": 138}, {"track": 720, "bpm": 128.021, "138": 138}, {"track": 721, "bpm": 137.003, "138": 138}, {"track": 722, "bpm": 132.007, "138": 138}, {"track": 723, "bpm": 128.001, "138": 138}, {"track": 724, "bpm": 137.996, "138": 138}, {"track": 725, "bpm": 137.991, "138": 138}, {"track": 726, "bpm": 134.019, "138": 138}, {"track": 727, "bpm": 132.011, "138": 138}, {"track": 728, "bpm": 132.008, "138": 138}, {"track": 729, "bpm": 138.0, "138": 138}, {"track": 730, "bpm": 138.007, "138": 138}, {"track": 731, "bpm": 138.0, "138": 138}, {"track": 732, "bpm": 139.993, "138": 138}, {"track": 733, "bpm": 132.024, "138": 138}, {"track": 734, "bpm": 134.983, "138": 138}, {"track": 735, "bpm": 141.063, "138": 138}, {"track": 736, "bpm": 135.002, "138": 138}, {"track": 737, "bpm": 138.019, "138": 138}, {"track": 738, "bpm": 124.986, "138": 138}, {"track": 739, "bpm": 138.021, "138": 138}, {"track": 740, "bpm": 137.991, "138": 138}, {"track": 741, "bpm": 130.004, "138": 138}, {"track": 742, "bpm": 138.012, "138": 138}, {"track": 743, "bpm": 137.983, "138": 138}, {"track": 744, "bpm": 125.989, "138": 138}, {"track": 745, "bpm": 128.582, "138": 138}, {"track": 746, "bpm": 137.989, "138": 138}, {"track": 747, "bpm": 128.01, "138": 138}, {"track": 748, "bpm": 137.994, "138": 138}, {"track": 749, "bpm": 132.011, "138": 138}, {"track": 750, "bpm": 131.008, "138": 138}, {"track": 751, "bpm": 135.007, "138": 138}, {"track": 752, "bpm": 137.985, "138": 138}, {"track": 753, "bpm": 134.011, "138": 138}, {"track": 754, "bpm": 138.979, "138": 138}, {"track": 755, "bpm": 136.003, "138": 138}, {"track": 756, "bpm": 132.06, "138": 138}, {"track": 757, "bpm": 127.957, "138": 138}, {"track": 758, "bpm": 130.991, "138": 138}, {"track": 759, "bpm": 138.011, "138": 138}, {"track": 760, "bpm": 137.995, "138": 138}, {"track": 761, "bpm": 128.005, "138": 138}, {"track": 762, "bpm": 139.997, "138": 138}, {"track": 763, "bpm": 132.994, "138": 138}, {"track": 764, "bpm": 139.973, "138": 138}, {"track": 765, "bpm": 127.964, "138": 138}, {"track": 766, "bpm": 140.01, "138": 138}, {"track": 767, "bpm": 128.083, "138": 138}, {"track": 768, "bpm": 136.974, "138": 138}, {"track": 769, "bpm": 130.006, "138": 138}, {"track": 770, "bpm": 132.01, "138": 138}, {"track": 771, "bpm": 137.997, "138": 138}, {"track": 772, "bpm": 138.001, "138": 138}, {"track": 773, "bpm": 134.979, "138": 138}, {"track": 774, "bpm": 138.017, "138": 138}, {"track": 775, "bpm": 131.982, "138": 138}, {"track": 776, "bpm": 134.997, "138": 138}, {"track": 777, "bpm": 137.983, "138": 138}, {"track": 778, "bpm": 129.994, "138": 138}, {"track": 779, "bpm": 128.013, "138": 138}, {"track": 780, "bpm": 138.033, "138": 138}, {"track": 781, "bpm": 137.998, "138": 138}, {"track": 782, "bpm": 137.992, "138": 138}, {"track": 783, "bpm": 140.022, "138": 138}, {"track": 784, "bpm": 131.982, "138": 138}, {"track": 785, "bpm": 128.004, "138": 138}, {"track": 786, "bpm": 131.013, "138": 138}, {"track": 787, "bpm": 137.984, "138": 138}, {"track": 788, "bpm": 131.995, "138": 138}, {"track": 789, "bpm": 138.015, "138": 138}, {"track": 790, "bpm": 131.978, "138": 138}, {"track": 791, "bpm": 138.007, "138": 138}, {"track": 792, "bpm": 137.988, "138": 138}, {"track": 793, "bpm": 132.007, "138": 138}, {"track": 794, "bpm": 140.034, "138": 138}, {"track": 795, "bpm": 140.014, "138": 138}, {"track": 796, "bpm": 132.998, "138": 138}, {"track": 797, "bpm": 139.989, "138": 138}, {"track": 798, "bpm": 133.981, "138": 138}, {"track": 799, "bpm": 131.99, "138": 138}, {"track": 800, "bpm": 135.998, "138": 138}, {"track": 801, "bpm": 130.0, "138": 138}, {"track": 802, "bpm": 129.992, "138": 138}, {"track": 803, "bpm": 128.023, "138": 138}, {"track": 804, "bpm": 138.003, "138": 138}, {"track": 805, "bpm": 130.006, "138": 138}, {"track": 806, "bpm": 134.988, "138": 138}, {"track": 807, "bpm": 137.023, "138": 138}, {"track": 808, "bpm": 131.996, "138": 138}, {"track": 809, "bpm": 131.989, "138": 138}, {"track": 810, "bpm": 127.996, "138": 138}, {"track": 811, "bpm": 134.822, "138": 138}, {"track": 812, "bpm": 132.075, "138": 138}, {"track": 813, "bpm": 137.996, "138": 138}, {"track": 814, "bpm": 137.961, "138": 138}, {"track": 815, "bpm": 127.971, "138": 138}, {"track": 816, "bpm": 140.006, "138": 138}, {"track": 817, "bpm": 131.992, "138": 138}, {"track": 818, "bpm": 137.988, "138": 138}, {"track": 819, "bpm": 128.011, "138": 138}, {"track": 820, "bpm": 129.996, "138": 138}, {"track": 821, "bpm": 138.007, "138": 138}, {"track": 822, "bpm": 129.986, "138": 138}, {"track": 823, "bpm": 138.019, "138": 138}, {"track": 824, "bpm": 138.0, "138": 138}, {"track": 825, "bpm": 140.0, "138": 138}, {"track": 826, "bpm": 138.002, "138": 138}, {"track": 827, "bpm": 135.996, "138": 138}, {"track": 828, "bpm": 135.002, "138": 138}, {"track": 829, "bpm": 136.012, "138": 138}, {"track": 830, "bpm": 137.973, "138": 138}, {"track": 831, "bpm": 132.034, "138": 138}, {"track": 832, "bpm": 135.938, "138": 138}, {"track": 833, "bpm": 136.044, "138": 138}, {"track": 834, "bpm": 128.0, "138": 138}, {"track": 835, "bpm": 136.994, "138": 138}, {"track": 836, "bpm": 128.02, "138": 138}, {"track": 837, "bpm": 128.003, "138": 138}, {"track": 838, "bpm": 132.006, "138": 138}, {"track": 839, "bpm": 128.019, "138": 138}, {"track": 840, "bpm": 125.156, "138": 138}, {"track": 841, "bpm": 131.815, "138": 138}, {"track": 842, "bpm": 138.03, "138": 138}, {"track": 843, "bpm": 138.006, "138": 138}, {"track": 844, "bpm": 136.018, "138": 138}, {"track": 845, "bpm": 135.984, "138": 138}, {"track": 846, "bpm": 127.977, "138": 138}, {"track": 847, "bpm": 130.014, "138": 138}, {"track": 848, "bpm": 129.012, "138": 138}, {"track": 849, "bpm": 138.002, "138": 138}, {"track": 850, "bpm": 135.985, "138": 138}, {"track": 851, "bpm": 131.998, "138": 138}, {"track": 852, "bpm": 135.984, "138": 138}, {"track": 853, "bpm": 137.49, "138": 138}, {"track": 854, "bpm": 137.016, "138": 138}, {"track": 855, "bpm": 131.999, "138": 138}, {"track": 856, "bpm": 137.988, "138": 138}, {"track": 857, "bpm": 137.989, "138": 138}, {"track": 858, "bpm": 134.005, "138": 138}, {"track": 859, "bpm": 136.002, "138": 138}, {"track": 860, "bpm": 138.013, "138": 138}, {"track": 861, "bpm": 137.998, "138": 138}, {"track": 862, "bpm": 131.962, "138": 138}, {"track": 863, "bpm": 132.019, "138": 138}, {"track": 864, "bpm": 138.003, "138": 138}, {"track": 865, "bpm": 136.993, "138": 138}, {"track": 866, "bpm": 132.986, "138": 138}, {"track": 867, "bpm": 137.954, "138": 138}, {"track": 868, "bpm": 135.976, "138": 138}, {"track": 869, "bpm": 132.014, "138": 138}, {"track": 870, "bpm": 138.001, "138": 138}, {"track": 871, "bpm": 137.998, "138": 138}, {"track": 872, "bpm": 139.99, "138": 138}, {"track": 873, "bpm": 131.988, "138": 138}, {"track": 874, "bpm": 135.001, "138": 138}, {"track": 875, "bpm": 130.231, "138": 138}, {"track": 876, "bpm": 127.002, "138": 138}, {"track": 877, "bpm": 137.999, "138": 138}, {"track": 878, "bpm": 135.013, "138": 138}, {"track": 879, "bpm": 139.987, "138": 138}, {"track": 880, "bpm": 139.987, "138": 138}, {"track": 881, "bpm": 134.984, "138": 138}, {"track": 882, "bpm": 135.0, "138": 138}, {"track": 883, "bpm": 134.989, "138": 138}, {"track": 884, "bpm": 138.02, "138": 138}, {"track": 885, "bpm": 131.986, "138": 138}, {"track": 886, "bpm": 139.996, "138": 138}, {"track": 887, "bpm": 135.002, "138": 138}, {"track": 888, "bpm": 130.975, "138": 138}, {"track": 889, "bpm": 137.99, "138": 138}, {"track": 890, "bpm": 129.981, "138": 138}, {"track": 891, "bpm": 132.007, "138": 138}, {"track": 892, "bpm": 138.008, "138": 138}, {"track": 893, "bpm": 130.003, "138": 138}, {"track": 894, "bpm": 130.024, "138": 138}, {"track": 895, "bpm": 137.988, "138": 138}, {"track": 896, "bpm": 137.997, "138": 138}, {"track": 897, "bpm": 139.999, "138": 138}, {"track": 898, "bpm": 128.026, "138": 138}, {"track": 899, "bpm": 137.983, "138": 138}, {"track": 900, "bpm": 135.007, "138": 138}, {"track": 901, "bpm": 135.875, "138": 138}, {"track": 902, "bpm": 132.985, "138": 138}, {"track": 903, "bpm": 142.016, "138": 138}, {"track": 904, "bpm": 137.961, "138": 138}, {"track": 905, "bpm": 137.987, "138": 138}, {"track": 906, "bpm": 126.003, "138": 138}, {"track": 907, "bpm": 127.989, "138": 138}, {"track": 908, "bpm": 138.051, "138": 138}, {"track": 909, "bpm": 139.05, "138": 138}, {"track": 910, "bpm": 131.987, "138": 138}, {"track": 911, "bpm": 127.981, "138": 138}, {"track": 912, "bpm": 143.012, "138": 138}, {"track": 913, "bpm": 135.085, "138": 138}, {"track": 914, "bpm": 139.997, "138": 138}, {"track": 915, "bpm": 134.984, "138": 138}, {"track": 916, "bpm": 132.979, "138": 138}, {"track": 917, "bpm": 135.002, "138": 138}, {"track": 918, "bpm": 135.023, "138": 138}, {"track": 919, "bpm": 138.003, "138": 138}, {"track": 920, "bpm": 138.002, "138": 138}, {"track": 921, "bpm": 133.991, "138": 138}, {"track": 922, "bpm": 135.011, "138": 138}, {"track": 923, "bpm": 134.004, "138": 138}, {"track": 924, "bpm": 138.027, "138": 138}, {"track": 925, "bpm": 138.013, "138": 138}, {"track": 926, "bpm": 137.946, "138": 138}, {"track": 927, "bpm": 134.99, "138": 138}, {"track": 928, "bpm": 132.997, "138": 138}, {"track": 929, "bpm": 138.042, "138": 138}, {"track": 930, "bpm": 135.014, "138": 138}, {"track": 931, "bpm": 135.032, "138": 138}, {"track": 932, "bpm": 137.845, "138": 138}, {"track": 933, "bpm": 138.0, "138": 138}, {"track": 934, "bpm": 134.983, "138": 138}, {"track": 935, "bpm": 135.004, "138": 138}, {"track": 936, "bpm": 137.995, "138": 138}, {"track": 937, "bpm": 128.017, "138": 138}, {"track": 938, "bpm": 138.027, "138": 138}, {"track": 939, "bpm": 134.959, "138": 138}, {"track": 940, "bpm": 134.997, "138": 138}, {"track": 941, "bpm": 137.997, "138": 138}, {"track": 942, "bpm": 136.0, "138": 138}, {"track": 943, "bpm": 135.997, "138": 138}, {"track": 944, "bpm": 135.026, "138": 138}, {"track": 945, "bpm": 131.983, "138": 138}, {"track": 946, "bpm": 139.988, "138": 138}, {"track": 947, "bpm": 139.015, "138": 138}, {"track": 948, "bpm": 137.029, "138": 138}, {"track": 949, "bpm": 136.012, "138": 138}, {"track": 950, "bpm": 140.044, "138": 138}, {"track": 951, "bpm": 135.002, "138": 138}, {"track": 952, "bpm": 138.012, "138": 138}, {"track": 953, "bpm": 133.997, "138": 138}, {"track": 954, "bpm": 139.997, "138": 138}, {"track": 955, "bpm": 139.978, "138": 138}, {"track": 956, "bpm": 132.995, "138": 138}, {"track": 957, "bpm": 138.029, "138": 138}, {"track": 958, "bpm": 140.977, "138": 138}, {"track": 959, "bpm": 138.004, "138": 138}, {"track": 960, "bpm": 135.979, "138": 138}, {"track": 961, "bpm": 140.006, "138": 138}, {"track": 962, "bpm": 137.985, "138": 138}, {"track": 963, "bpm": 137.981, "138": 138}, {"track": 964, "bpm": 135.1, "138": 138}, {"track": 965, "bpm": 138.014, "138": 138}, {"track": 966, "bpm": 136.979, "138": 138}, {"track": 967, "bpm": 137.065, "138": 138}, {"track": 968, "bpm": 130.024, "138": 138}, {"track": 969, "bpm": 131.014, "138": 138}, {"track": 970, "bpm": 131.928, "138": 138}, {"track": 971, "bpm": 129.992, "138": 138}, {"track": 972, "bpm": 135.989, "138": 138}, {"track": 973, "bpm": 139.353, "138": 138}, {"track": 974, "bpm": 132.01, "138": 138}, {"track": 975, "bpm": 130.98, "138": 138}, {"track": 976, "bpm": 131.986, "138": 138}, {"track": 977, "bpm": 130.031, "138": 138}, {"track": 978, "bpm": 134.01, "138": 138}, {"track": 979, "bpm": 140.019, "138": 138}, {"track": 980, "bpm": 134.999, "138": 138}, {"track": 981, "bpm": 139.991, "138": 138}, {"track": 982, "bpm": 135.005, "138": 138}, {"track": 983, "bpm": 140.006, "138": 138}, {"track": 984, "bpm": 138.258, "138": 138}, {"track": 985, "bpm": 136.059, "138": 138}, {"track": 986, "bpm": 138.01, "138": 138}, {"track": 987, "bpm": 138.039, "138": 138}, {"track": 988, "bpm": 129.99, "138": 138}, {"track": 989, "bpm": 134.012, "138": 138}, {"track": 990, "bpm": 138.013, "138": 138}, {"track": 991, "bpm": 129.982, "138": 138}, {"track": 992, "bpm": 135.0, "138": 138}, {"track": 993, "bpm": 137.996, "138": 138}, {"track": 994, "bpm": 132.002, "138": 138}, {"track": 995, "bpm": 135.988, "138": 138}, {"track": 996, "bpm": 137.978, "138": 138}, {"track": 997, "bpm": 131.991, "138": 138}, {"track": 998, "bpm": 139.985, "138": 138}, {"track": 999, "bpm": 135.011, "138": 138}]}}, {"mode": "vega-lite"});
</script>
</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Not the best way to visualize it, how about a semi-interactive scatter plot? Mouseover for track position and BPM, zoom with the mousewheel. I couldn't figure out how to get track titles and artists in the tooltips.</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">detail</span> <span class="o">=</span> <span class="p">(</span>
    <span class="n">alt</span><span class="o">.</span><span class="n">Chart</span><span class="p">(</span><span class="n">source</span><span class="p">)</span>
    <span class="o">.</span><span class="n">mark_point</span><span class="p">()</span>
    <span class="o">.</span><span class="n">encode</span><span class="p">(</span>
        <span class="n">x</span><span class="o">=</span><span class="n">alt</span><span class="o">.</span><span class="n">X</span><span class="p">(</span>
            <span class="s2">&quot;track:T&quot;</span><span class="p">,</span>
        <span class="p">),</span>
        <span class="n">y</span><span class="o">=</span><span class="n">alt</span><span class="o">.</span><span class="n">Y</span><span class="p">(</span>
            <span class="s2">&quot;bpm:Q&quot;</span><span class="p">,</span>
            <span class="n">scale</span><span class="o">=</span><span class="n">alt</span><span class="o">.</span><span class="n">Scale</span><span class="p">(</span><span class="n">domain</span><span class="o">=</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="mi">150</span><span class="p">)),</span>
        <span class="p">),</span>
        <span class="n">color</span><span class="o">=</span><span class="s2">&quot;bpm&quot;</span><span class="p">,</span>
        <span class="n">tooltip</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;bpm&#39;</span><span class="p">,</span> <span class="s1">&#39;track&#39;</span><span class="p">]</span>
    <span class="p">)</span>
    <span class="o">.</span><span class="n">properties</span><span class="p">(</span><span class="n">width</span><span class="o">=</span><span class="mi">600</span><span class="p">,</span> <span class="n">height</span><span class="o">=</span><span class="mi">400</span><span class="p">,</span> <span class="n">title</span><span class="o">=</span><span class="s2">&quot;ASOT Top 1000 -- BPM of track&quot;</span><span class="p">)</span>
<span class="p">)</span><span class="o">.</span><span class="n">interactive</span><span class="p">()</span>

<span class="n">detail</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">

<div id="altair-viz-9d07d6a69088463e87a73e2e5b0c9563"></div>
<script type="text/javascript">
  (function(spec, embedOpt){
    let outputDiv = document.currentScript.previousElementSibling;
    if (outputDiv.id !== "altair-viz-9d07d6a69088463e87a73e2e5b0c9563") {
      outputDiv = document.getElementById("altair-viz-9d07d6a69088463e87a73e2e5b0c9563");
    }
    const paths = {
      "vega": "https://cdn.jsdelivr.net/npm//vega@5?noext",
      "vega-lib": "https://cdn.jsdelivr.net/npm//vega-lib?noext",
      "vega-lite": "https://cdn.jsdelivr.net/npm//vega-lite@4.8.1?noext",
      "vega-embed": "https://cdn.jsdelivr.net/npm//vega-embed@6?noext",
    };

    function loadScript(lib) {
      return new Promise(function(resolve, reject) {
        var s = document.createElement('script');
        s.src = paths[lib];
        s.async = true;
        s.onload = () => resolve(paths[lib]);
        s.onerror = () => reject(`Error loading script: ${paths[lib]}`);
        document.getElementsByTagName("head")[0].appendChild(s);
      });
    }

    function showError(err) {
      outputDiv.innerHTML = `<div class="error" style="color:red;">${err}</div>`;
      throw err;
    }

    function displayChart(vegaEmbed) {
      vegaEmbed(outputDiv, spec, embedOpt)
        .catch(err => showError(`Javascript Error: ${err.message}<br>This usually means there's a typo in your chart specification. See the javascript console for the full traceback.`));
    }

    if(typeof define === "function" && define.amd) {
      requirejs.config({paths});
      require(["vega-embed"], displayChart, err => showError(`Error loading script: ${err.message}`));
    } else if (typeof vegaEmbed === "function") {
      displayChart(vegaEmbed);
    } else {
      loadScript("vega")
        .then(() => loadScript("vega-lite"))
        .then(() => loadScript("vega-embed"))
        .catch(showError)
        .then(() => displayChart(vegaEmbed));
    }
  })({"config": {"view": {"continuousWidth": 400, "continuousHeight": 300}}, "data": {"name": "data-5dc8929a69a20aca0326fad099b05a20"}, "mark": "point", "encoding": {"color": {"type": "quantitative", "field": "bpm"}, "tooltip": [{"type": "quantitative", "field": "bpm"}, {"type": "quantitative", "field": "track"}], "x": {"type": "temporal", "field": "track"}, "y": {"type": "quantitative", "field": "bpm", "scale": {"domain": [100, 150]}}}, "height": 400, "selection": {"selector003": {"type": "interval", "bind": "scales", "encodings": ["x", "y"]}}, "title": "ASOT Top 1000 -- BPM of track", "width": 600, "$schema": "https://vega.github.io/schema/vega-lite/v4.8.1.json", "datasets": {"data-5dc8929a69a20aca0326fad099b05a20": [{"track": 0, "bpm": 135.981, "138": 138}, {"track": 1, "bpm": 137.993, "138": 138}, {"track": 2, "bpm": 139.978, "138": 138}, {"track": 3, "bpm": 140.016, "138": 138}, {"track": 4, "bpm": 126.997, "138": 138}, {"track": 5, "bpm": 127.996, "138": 138}, {"track": 6, "bpm": 132.003, "138": 138}, {"track": 7, "bpm": 139.994, "138": 138}, {"track": 8, "bpm": 137.999, "138": 138}, {"track": 9, "bpm": 136.002, "138": 138}, {"track": 10, "bpm": 131.992, "138": 138}, {"track": 11, "bpm": 135.843, "138": 138}, {"track": 12, "bpm": 130.004, "138": 138}, {"track": 13, "bpm": 134.005, "138": 138}, {"track": 14, "bpm": 140.01, "138": 138}, {"track": 15, "bpm": 140.003, "138": 138}, {"track": 16, "bpm": 129.987, "138": 138}, {"track": 17, "bpm": 139.7, "138": 138}, {"track": 18, "bpm": 127.011, "138": 138}, {"track": 19, "bpm": 137.659, "138": 138}, {"track": 20, "bpm": 127.99, "138": 138}, {"track": 21, "bpm": 140.005, "138": 138}, {"track": 22, "bpm": 131.987, "138": 138}, {"track": 23, "bpm": 131.977, "138": 138}, {"track": 24, "bpm": 138.003, "138": 138}, {"track": 25, "bpm": 132.0, "138": 138}, {"track": 26, "bpm": 139.985, "138": 138}, {"track": 27, "bpm": 133.993, "138": 138}, {"track": 28, "bpm": 136.029, "138": 138}, {"track": 29, "bpm": 129.982, "138": 138}, {"track": 30, "bpm": 127.963, "138": 138}, {"track": 31, "bpm": 134.986, "138": 138}, {"track": 32, "bpm": 137.982, "138": 138}, {"track": 33, "bpm": 139.992, "138": 138}, {"track": 34, "bpm": 133.98, "138": 138}, {"track": 35, "bpm": 132.009, "138": 138}, {"track": 36, "bpm": 128.002, "138": 138}, {"track": 37, "bpm": 128.013, "138": 138}, {"track": 38, "bpm": 136.987, "138": 138}, {"track": 39, "bpm": 137.989, "138": 138}, {"track": 40, "bpm": 135.001, "138": 138}, {"track": 41, "bpm": 135.99, "138": 138}, {"track": 42, "bpm": 133.965, "138": 138}, {"track": 43, "bpm": 138.009, "138": 138}, {"track": 44, "bpm": 139.973, "138": 138}, {"track": 45, "bpm": 129.942, "138": 138}, {"track": 46, "bpm": 133.998, "138": 138}, {"track": 47, "bpm": 128.012, "138": 138}, {"track": 48, "bpm": 130.008, "138": 138}, {"track": 49, "bpm": 103.512, "138": 138}, {"track": 50, "bpm": 124.998, "138": 138}, {"track": 51, "bpm": 126.983, "138": 138}, {"track": 52, "bpm": 139.994, "138": 138}, {"track": 53, "bpm": 133.997, "138": 138}, {"track": 54, "bpm": 135.978, "138": 138}, {"track": 55, "bpm": 132.026, "138": 138}, {"track": 56, "bpm": 136.987, "138": 138}, {"track": 57, "bpm": 130.017, "138": 138}, {"track": 58, "bpm": 128.002, "138": 138}, {"track": 59, "bpm": 132.0, "138": 138}, {"track": 60, "bpm": 138.133, "138": 138}, {"track": 61, "bpm": 128.022, "138": 138}, {"track": 62, "bpm": 130.015, "138": 138}, {"track": 63, "bpm": 132.0, "138": 138}, {"track": 64, "bpm": 140.016, "138": 138}, {"track": 65, "bpm": 127.997, "138": 138}, {"track": 66, "bpm": 137.994, "138": 138}, {"track": 67, "bpm": 135.991, "138": 138}, {"track": 68, "bpm": 138.013, "138": 138}, {"track": 69, "bpm": 127.99, "138": 138}, {"track": 70, "bpm": 134.012, "138": 138}, {"track": 71, "bpm": 136.999, "138": 138}, {"track": 72, "bpm": 138.005, "138": 138}, {"track": 73, "bpm": 137.998, "138": 138}, {"track": 74, "bpm": 137.979, "138": 138}, {"track": 75, "bpm": 140.002, "138": 138}, {"track": 76, "bpm": 128.02, "138": 138}, {"track": 77, "bpm": 139.989, "138": 138}, {"track": 78, "bpm": 130.015, "138": 138}, {"track": 79, "bpm": 126.026, "138": 138}, {"track": 80, "bpm": 130.016, "138": 138}, {"track": 81, "bpm": 128.025, "138": 138}, {"track": 82, "bpm": 128.006, "138": 138}, {"track": 83, "bpm": 103.485, "138": 138}, {"track": 84, "bpm": 131.987, "138": 138}, {"track": 85, "bpm": 126.011, "138": 138}, {"track": 86, "bpm": 133.98, "138": 138}, {"track": 87, "bpm": 127.998, "138": 138}, {"track": 88, "bpm": 130.019, "138": 138}, {"track": 89, "bpm": 137.99, "138": 138}, {"track": 90, "bpm": 131.989, "138": 138}, {"track": 91, "bpm": 138.005, "138": 138}, {"track": 92, "bpm": 132.009, "138": 138}, {"track": 93, "bpm": 130.972, "138": 138}, {"track": 94, "bpm": 131.97, "138": 138}, {"track": 95, "bpm": 138.012, "138": 138}, {"track": 96, "bpm": 140.02, "138": 138}, {"track": 97, "bpm": 135.022, "138": 138}, {"track": 98, "bpm": 129.977, "138": 138}, {"track": 99, "bpm": 138.011, "138": 138}, {"track": 100, "bpm": 132.914, "138": 138}, {"track": 101, "bpm": 127.991, "138": 138}, {"track": 102, "bpm": 136.999, "138": 138}, {"track": 103, "bpm": 138.018, "138": 138}, {"track": 104, "bpm": 138.982, "138": 138}, {"track": 105, "bpm": 128.027, "138": 138}, {"track": 106, "bpm": 135.004, "138": 138}, {"track": 107, "bpm": 128.005, "138": 138}, {"track": 108, "bpm": 128.028, "138": 138}, {"track": 109, "bpm": 125.949, "138": 138}, {"track": 110, "bpm": 137.983, "138": 138}, {"track": 111, "bpm": 138.011, "138": 138}, {"track": 112, "bpm": 134.992, "138": 138}, {"track": 113, "bpm": 135.992, "138": 138}, {"track": 114, "bpm": 128.995, "138": 138}, {"track": 115, "bpm": 128.003, "138": 138}, {"track": 116, "bpm": 125.025, "138": 138}, {"track": 117, "bpm": 127.991, "138": 138}, {"track": 118, "bpm": 135.999, "138": 138}, {"track": 119, "bpm": 139.977, "138": 138}, {"track": 120, "bpm": 139.998, "138": 138}, {"track": 121, "bpm": 131.99, "138": 138}, {"track": 122, "bpm": 136.984, "138": 138}, {"track": 123, "bpm": 127.992, "138": 138}, {"track": 124, "bpm": 131.979, "138": 138}, {"track": 125, "bpm": 138.007, "138": 138}, {"track": 126, "bpm": 137.981, "138": 138}, {"track": 127, "bpm": 138.006, "138": 138}, {"track": 128, "bpm": 138.005, "138": 138}, {"track": 129, "bpm": 138.009, "138": 138}, {"track": 130, "bpm": 134.997, "138": 138}, {"track": 131, "bpm": 127.995, "138": 138}, {"track": 132, "bpm": 135.003, "138": 138}, {"track": 133, "bpm": 133.983, "138": 138}, {"track": 134, "bpm": 127.977, "138": 138}, {"track": 135, "bpm": 130.011, "138": 138}, {"track": 136, "bpm": 138.022, "138": 138}, {"track": 137, "bpm": 127.988, "138": 138}, {"track": 138, "bpm": 132.031, "138": 138}, {"track": 139, "bpm": 137.998, "138": 138}, {"track": 140, "bpm": 133.991, "138": 138}, {"track": 141, "bpm": 130.002, "138": 138}, {"track": 142, "bpm": 134.999, "138": 138}, {"track": 143, "bpm": 129.984, "138": 138}, {"track": 144, "bpm": 138.017, "138": 138}, {"track": 145, "bpm": 139.981, "138": 138}, {"track": 146, "bpm": 138.064, "138": 138}, {"track": 147, "bpm": 123.997, "138": 138}, {"track": 148, "bpm": 139.994, "138": 138}, {"track": 149, "bpm": 133.962, "138": 138}, {"track": 150, "bpm": 138.007, "138": 138}, {"track": 151, "bpm": 137.507, "138": 138}, {"track": 152, "bpm": 137.984, "138": 138}, {"track": 153, "bpm": 133.002, "138": 138}, {"track": 154, "bpm": 132.003, "138": 138}, {"track": 155, "bpm": 139.992, "138": 138}, {"track": 156, "bpm": 138.017, "138": 138}, {"track": 157, "bpm": 134.021, "138": 138}, {"track": 158, "bpm": 130.021, "138": 138}, {"track": 159, "bpm": 138.029, "138": 138}, {"track": 160, "bpm": 128.048, "138": 138}, {"track": 161, "bpm": 129.988, "138": 138}, {"track": 162, "bpm": 138.998, "138": 138}, {"track": 163, "bpm": 138.004, "138": 138}, {"track": 164, "bpm": 137.985, "138": 138}, {"track": 165, "bpm": 138.014, "138": 138}, {"track": 166, "bpm": 133.998, "138": 138}, {"track": 167, "bpm": 127.999, "138": 138}, {"track": 168, "bpm": 136.0, "138": 138}, {"track": 169, "bpm": 131.988, "138": 138}, {"track": 170, "bpm": 126.011, "138": 138}, {"track": 171, "bpm": 138.101, "138": 138}, {"track": 172, "bpm": 137.969, "138": 138}, {"track": 173, "bpm": 139.005, "138": 138}, {"track": 174, "bpm": 137.012, "138": 138}, {"track": 175, "bpm": 131.979, "138": 138}, {"track": 176, "bpm": 131.999, "138": 138}, {"track": 177, "bpm": 135.996, "138": 138}, {"track": 178, "bpm": 136.062, "138": 138}, {"track": 179, "bpm": 138.012, "138": 138}, {"track": 180, "bpm": 127.015, "138": 138}, {"track": 181, "bpm": 133.997, "138": 138}, {"track": 182, "bpm": 129.989, "138": 138}, {"track": 183, "bpm": 135.97, "138": 138}, {"track": 184, "bpm": 134.997, "138": 138}, {"track": 185, "bpm": 139.993, "138": 138}, {"track": 186, "bpm": 138.013, "138": 138}, {"track": 187, "bpm": 137.986, "138": 138}, {"track": 188, "bpm": 138.002, "138": 138}, {"track": 189, "bpm": 128.011, "138": 138}, {"track": 190, "bpm": 138.008, "138": 138}, {"track": 191, "bpm": 130.024, "138": 138}, {"track": 192, "bpm": 136.008, "138": 138}, {"track": 193, "bpm": 134.992, "138": 138}, {"track": 194, "bpm": 132.971, "138": 138}, {"track": 195, "bpm": 127.95, "138": 138}, {"track": 196, "bpm": 130.006, "138": 138}, {"track": 197, "bpm": 130.009, "138": 138}, {"track": 198, "bpm": 125.972, "138": 138}, {"track": 199, "bpm": 139.977, "138": 138}, {"track": 200, "bpm": 131.984, "138": 138}, {"track": 201, "bpm": 134.995, "138": 138}, {"track": 202, "bpm": 139.998, "138": 138}, {"track": 203, "bpm": 140.008, "138": 138}, {"track": 204, "bpm": 131.982, "138": 138}, {"track": 205, "bpm": 134.021, "138": 138}, {"track": 206, "bpm": 130.042, "138": 138}, {"track": 207, "bpm": 139.998, "138": 138}, {"track": 208, "bpm": 132.053, "138": 138}, {"track": 209, "bpm": 131.996, "138": 138}, {"track": 210, "bpm": 140.904, "138": 138}, {"track": 211, "bpm": 138.018, "138": 138}, {"track": 212, "bpm": 138.015, "138": 138}, {"track": 213, "bpm": 137.978, "138": 138}, {"track": 214, "bpm": 131.981, "138": 138}, {"track": 215, "bpm": 133.996, "138": 138}, {"track": 216, "bpm": 129.967, "138": 138}, {"track": 217, "bpm": 127.986, "138": 138}, {"track": 218, "bpm": 130.008, "138": 138}, {"track": 219, "bpm": 132.004, "138": 138}, {"track": 220, "bpm": 135.562, "138": 138}, {"track": 221, "bpm": 138.016, "138": 138}, {"track": 222, "bpm": 130.008, "138": 138}, {"track": 223, "bpm": 136.99, "138": 138}, {"track": 224, "bpm": 131.982, "138": 138}, {"track": 225, "bpm": 134.995, "138": 138}, {"track": 226, "bpm": 133.997, "138": 138}, {"track": 227, "bpm": 130.001, "138": 138}, {"track": 228, "bpm": 138.004, "138": 138}, {"track": 229, "bpm": 137.988, "138": 138}, {"track": 230, "bpm": 130.022, "138": 138}, {"track": 231, "bpm": 134.984, "138": 138}, {"track": 232, "bpm": 134.996, "138": 138}, {"track": 233, "bpm": 137.991, "138": 138}, {"track": 234, "bpm": 133.985, "138": 138}, {"track": 235, "bpm": 133.992, "138": 138}, {"track": 236, "bpm": 135.98, "138": 138}, {"track": 237, "bpm": 137.999, "138": 138}, {"track": 238, "bpm": 137.984, "138": 138}, {"track": 239, "bpm": 140.011, "138": 138}, {"track": 240, "bpm": 130.003, "138": 138}, {"track": 241, "bpm": 132.009, "138": 138}, {"track": 242, "bpm": 138.018, "138": 138}, {"track": 243, "bpm": 137.994, "138": 138}, {"track": 244, "bpm": 140.003, "138": 138}, {"track": 245, "bpm": 140.003, "138": 138}, {"track": 246, "bpm": 132.003, "138": 138}, {"track": 247, "bpm": 128.065, "138": 138}, {"track": 248, "bpm": 136.004, "138": 138}, {"track": 249, "bpm": 130.001, "138": 138}, {"track": 250, "bpm": 134.994, "138": 138}, {"track": 251, "bpm": 136.014, "138": 138}, {"track": 252, "bpm": 138.005, "138": 138}, {"track": 253, "bpm": 138.011, "138": 138}, {"track": 254, "bpm": 135.997, "138": 138}, {"track": 255, "bpm": 140.042, "138": 138}, {"track": 256, "bpm": 137.999, "138": 138}, {"track": 257, "bpm": 138.009, "138": 138}, {"track": 258, "bpm": 132.003, "138": 138}, {"track": 259, "bpm": 127.995, "138": 138}, {"track": 260, "bpm": 129.944, "138": 138}, {"track": 261, "bpm": 137.98, "138": 138}, {"track": 262, "bpm": 127.975, "138": 138}, {"track": 263, "bpm": 128.006, "138": 138}, {"track": 264, "bpm": 127.976, "138": 138}, {"track": 265, "bpm": 135.007, "138": 138}, {"track": 266, "bpm": 132.022, "138": 138}, {"track": 267, "bpm": 131.968, "138": 138}, {"track": 268, "bpm": 138.005, "138": 138}, {"track": 269, "bpm": 138.003, "138": 138}, {"track": 270, "bpm": 127.98, "138": 138}, {"track": 271, "bpm": 130.52, "138": 138}, {"track": 272, "bpm": 139.971, "138": 138}, {"track": 273, "bpm": 132.043, "138": 138}, {"track": 274, "bpm": 131.001, "138": 138}, {"track": 275, "bpm": 136.977, "138": 138}, {"track": 276, "bpm": 139.986, "138": 138}, {"track": 277, "bpm": 131.009, "138": 138}, {"track": 278, "bpm": 134.017, "138": 138}, {"track": 279, "bpm": 136.987, "138": 138}, {"track": 280, "bpm": 137.995, "138": 138}, {"track": 281, "bpm": 128.003, "138": 138}, {"track": 282, "bpm": 139.98, "138": 138}, {"track": 283, "bpm": 134.985, "138": 138}, {"track": 284, "bpm": 138.0, "138": 138}, {"track": 285, "bpm": 136.006, "138": 138}, {"track": 286, "bpm": 139.997, "138": 138}, {"track": 287, "bpm": 132.023, "138": 138}, {"track": 288, "bpm": 128.015, "138": 138}, {"track": 289, "bpm": 123.993, "138": 138}, {"track": 290, "bpm": 138.016, "138": 138}, {"track": 291, "bpm": 137.056, "138": 138}, {"track": 292, "bpm": 127.994, "138": 138}, {"track": 293, "bpm": 127.985, "138": 138}, {"track": 294, "bpm": 139.983, "138": 138}, {"track": 295, "bpm": 137.974, "138": 138}, {"track": 296, "bpm": 135.986, "138": 138}, {"track": 297, "bpm": 130.009, "138": 138}, {"track": 298, "bpm": 137.998, "138": 138}, {"track": 299, "bpm": 130.019, "138": 138}, {"track": 300, "bpm": 138.032, "138": 138}, {"track": 301, "bpm": 134.99, "138": 138}, {"track": 302, "bpm": 135.009, "138": 138}, {"track": 303, "bpm": 133.981, "138": 138}, {"track": 304, "bpm": 138.008, "138": 138}, {"track": 305, "bpm": 137.985, "138": 138}, {"track": 306, "bpm": 128.023, "138": 138}, {"track": 307, "bpm": 132.009, "138": 138}, {"track": 308, "bpm": 135.997, "138": 138}, {"track": 309, "bpm": 141.85, "138": 138}, {"track": 310, "bpm": 138.003, "138": 138}, {"track": 311, "bpm": 139.988, "138": 138}, {"track": 312, "bpm": 133.003, "138": 138}, {"track": 313, "bpm": 134.995, "138": 138}, {"track": 314, "bpm": 134.999, "138": 138}, {"track": 315, "bpm": 135.964, "138": 138}, {"track": 316, "bpm": 137.995, "138": 138}, {"track": 317, "bpm": 136.015, "138": 138}, {"track": 318, "bpm": 138.011, "138": 138}, {"track": 319, "bpm": 133.996, "138": 138}, {"track": 320, "bpm": 138.041, "138": 138}, {"track": 321, "bpm": 139.977, "138": 138}, {"track": 322, "bpm": 132.034, "138": 138}, {"track": 323, "bpm": 130.041, "138": 138}, {"track": 324, "bpm": 129.973, "138": 138}, {"track": 325, "bpm": 132.025, "138": 138}, {"track": 326, "bpm": 136.015, "138": 138}, {"track": 327, "bpm": 126.014, "138": 138}, {"track": 328, "bpm": 139.972, "138": 138}, {"track": 329, "bpm": 135.986, "138": 138}, {"track": 330, "bpm": 132.016, "138": 138}, {"track": 331, "bpm": 140.009, "138": 138}, {"track": 332, "bpm": 132.011, "138": 138}, {"track": 333, "bpm": 133.985, "138": 138}, {"track": 334, "bpm": 135.006, "138": 138}, {"track": 335, "bpm": 136.99, "138": 138}, {"track": 336, "bpm": 139.023, "138": 138}, {"track": 337, "bpm": 128.02, "138": 138}, {"track": 338, "bpm": 139.995, "138": 138}, {"track": 339, "bpm": 128.0, "138": 138}, {"track": 340, "bpm": 138.015, "138": 138}, {"track": 341, "bpm": 131.968, "138": 138}, {"track": 342, "bpm": 132.0, "138": 138}, {"track": 343, "bpm": 133.995, "138": 138}, {"track": 344, "bpm": 136.0, "138": 138}, {"track": 345, "bpm": 128.006, "138": 138}, {"track": 346, "bpm": 144.988, "138": 138}, {"track": 347, "bpm": 131.989, "138": 138}, {"track": 348, "bpm": 131.929, "138": 138}, {"track": 349, "bpm": 129.999, "138": 138}, {"track": 350, "bpm": 121.983, "138": 138}, {"track": 351, "bpm": 132.003, "138": 138}, {"track": 352, "bpm": 130.001, "138": 138}, {"track": 353, "bpm": 134.988, "138": 138}, {"track": 354, "bpm": 127.981, "138": 138}, {"track": 355, "bpm": 132.003, "138": 138}, {"track": 356, "bpm": 130.001, "138": 138}, {"track": 357, "bpm": 137.994, "138": 138}, {"track": 358, "bpm": 138.018, "138": 138}, {"track": 359, "bpm": 138.003, "138": 138}, {"track": 360, "bpm": 135.997, "138": 138}, {"track": 361, "bpm": 134.989, "138": 138}, {"track": 362, "bpm": 135.038, "138": 138}, {"track": 363, "bpm": 133.99, "138": 138}, {"track": 364, "bpm": 137.901, "138": 138}, {"track": 365, "bpm": 138.0, "138": 138}, {"track": 366, "bpm": 128.02, "138": 138}, {"track": 367, "bpm": 137.999, "138": 138}, {"track": 368, "bpm": 135.995, "138": 138}, {"track": 369, "bpm": 134.007, "138": 138}, {"track": 370, "bpm": 134.002, "138": 138}, {"track": 371, "bpm": 138.003, "138": 138}, {"track": 372, "bpm": 127.983, "138": 138}, {"track": 373, "bpm": 137.996, "138": 138}, {"track": 374, "bpm": 129.997, "138": 138}, {"track": 375, "bpm": 127.002, "138": 138}, {"track": 376, "bpm": 131.989, "138": 138}, {"track": 377, "bpm": 127.979, "138": 138}, {"track": 378, "bpm": 135.987, "138": 138}, {"track": 379, "bpm": 129.979, "138": 138}, {"track": 380, "bpm": 133.032, "138": 138}, {"track": 381, "bpm": 138.006, "138": 138}, {"track": 382, "bpm": 134.994, "138": 138}, {"track": 383, "bpm": 135.0, "138": 138}, {"track": 384, "bpm": 135.246, "138": 138}, {"track": 385, "bpm": 131.985, "138": 138}, {"track": 386, "bpm": 134.999, "138": 138}, {"track": 387, "bpm": 138.0, "138": 138}, {"track": 388, "bpm": 123.998, "138": 138}, {"track": 389, "bpm": 131.993, "138": 138}, {"track": 390, "bpm": 130.009, "138": 138}, {"track": 391, "bpm": 131.995, "138": 138}, {"track": 392, "bpm": 139.974, "138": 138}, {"track": 393, "bpm": 126.013, "138": 138}, {"track": 394, "bpm": 127.997, "138": 138}, {"track": 395, "bpm": 138.034, "138": 138}, {"track": 396, "bpm": 132.006, "138": 138}, {"track": 397, "bpm": 127.995, "138": 138}, {"track": 398, "bpm": 131.994, "138": 138}, {"track": 399, "bpm": 127.981, "138": 138}, {"track": 400, "bpm": 125.984, "138": 138}, {"track": 401, "bpm": 137.994, "138": 138}, {"track": 402, "bpm": 133.993, "138": 138}, {"track": 403, "bpm": 135.006, "138": 138}, {"track": 404, "bpm": 138.998, "138": 138}, {"track": 405, "bpm": 135.999, "138": 138}, {"track": 406, "bpm": 137.996, "138": 138}, {"track": 407, "bpm": 129.972, "138": 138}, {"track": 408, "bpm": 140.033, "138": 138}, {"track": 409, "bpm": 135.969, "138": 138}, {"track": 410, "bpm": 130.005, "138": 138}, {"track": 411, "bpm": 138.007, "138": 138}, {"track": 412, "bpm": 126.017, "138": 138}, {"track": 413, "bpm": 130.001, "138": 138}, {"track": 414, "bpm": 129.96, "138": 138}, {"track": 415, "bpm": 136.027, "138": 138}, {"track": 416, "bpm": 137.997, "138": 138}, {"track": 417, "bpm": 138.017, "138": 138}, {"track": 418, "bpm": 139.992, "138": 138}, {"track": 419, "bpm": 139.988, "138": 138}, {"track": 420, "bpm": 126.018, "138": 138}, {"track": 421, "bpm": 138.007, "138": 138}, {"track": 422, "bpm": 139.991, "138": 138}, {"track": 423, "bpm": 128.005, "138": 138}, {"track": 424, "bpm": 135.921, "138": 138}, {"track": 425, "bpm": 139.997, "138": 138}, {"track": 426, "bpm": 132.977, "138": 138}, {"track": 427, "bpm": 129.982, "138": 138}, {"track": 428, "bpm": 137.996, "138": 138}, {"track": 429, "bpm": 138.033, "138": 138}, {"track": 430, "bpm": 127.978, "138": 138}, {"track": 431, "bpm": 128.011, "138": 138}, {"track": 432, "bpm": 128.03, "138": 138}, {"track": 433, "bpm": 138.002, "138": 138}, {"track": 434, "bpm": 135.031, "138": 138}, {"track": 435, "bpm": 129.008, "138": 138}, {"track": 436, "bpm": 128.013, "138": 138}, {"track": 437, "bpm": 136.964, "138": 138}, {"track": 438, "bpm": 138.002, "138": 138}, {"track": 439, "bpm": 132.005, "138": 138}, {"track": 440, "bpm": 134.008, "138": 138}, {"track": 441, "bpm": 129.982, "138": 138}, {"track": 442, "bpm": 127.992, "138": 138}, {"track": 443, "bpm": 129.991, "138": 138}, {"track": 444, "bpm": 135.988, "138": 138}, {"track": 445, "bpm": 134.999, "138": 138}, {"track": 446, "bpm": 132.007, "138": 138}, {"track": 447, "bpm": 138.017, "138": 138}, {"track": 448, "bpm": 132.015, "138": 138}, {"track": 449, "bpm": 130.029, "138": 138}, {"track": 450, "bpm": 135.003, "138": 138}, {"track": 451, "bpm": 139.996, "138": 138}, {"track": 452, "bpm": 138.035, "138": 138}, {"track": 453, "bpm": 131.977, "138": 138}, {"track": 454, "bpm": 133.256, "138": 138}, {"track": 455, "bpm": 125.976, "138": 138}, {"track": 456, "bpm": 128.028, "138": 138}, {"track": 457, "bpm": 138.985, "138": 138}, {"track": 458, "bpm": 138.015, "138": 138}, {"track": 459, "bpm": 132.008, "138": 138}, {"track": 460, "bpm": 132.012, "138": 138}, {"track": 461, "bpm": 128.007, "138": 138}, {"track": 462, "bpm": 137.991, "138": 138}, {"track": 463, "bpm": 139.989, "138": 138}, {"track": 464, "bpm": 127.991, "138": 138}, {"track": 465, "bpm": 138.024, "138": 138}, {"track": 466, "bpm": 138.955, "138": 138}, {"track": 467, "bpm": 130.025, "138": 138}, {"track": 468, "bpm": 138.0, "138": 138}, {"track": 469, "bpm": 138.0, "138": 138}, {"track": 470, "bpm": 133.956, "138": 138}, {"track": 471, "bpm": 131.993, "138": 138}, {"track": 472, "bpm": 129.975, "138": 138}, {"track": 473, "bpm": 129.994, "138": 138}, {"track": 474, "bpm": 132.002, "138": 138}, {"track": 475, "bpm": 140.002, "138": 138}, {"track": 476, "bpm": 134.992, "138": 138}, {"track": 477, "bpm": 138.005, "138": 138}, {"track": 478, "bpm": 134.0, "138": 138}, {"track": 479, "bpm": 140.006, "138": 138}, {"track": 480, "bpm": 137.997, "138": 138}, {"track": 481, "bpm": 130.015, "138": 138}, {"track": 482, "bpm": 138.021, "138": 138}, {"track": 483, "bpm": 132.003, "138": 138}, {"track": 484, "bpm": 140.299, "138": 138}, {"track": 485, "bpm": 131.986, "138": 138}, {"track": 486, "bpm": 131.992, "138": 138}, {"track": 487, "bpm": 139.99, "138": 138}, {"track": 488, "bpm": 128.004, "138": 138}, {"track": 489, "bpm": 125.997, "138": 138}, {"track": 490, "bpm": 135.99, "138": 138}, {"track": 491, "bpm": 126.991, "138": 138}, {"track": 492, "bpm": 135.008, "138": 138}, {"track": 493, "bpm": 138.017, "138": 138}, {"track": 494, "bpm": 137.99, "138": 138}, {"track": 495, "bpm": 137.979, "138": 138}, {"track": 496, "bpm": 128.036, "138": 138}, {"track": 497, "bpm": 139.987, "138": 138}, {"track": 498, "bpm": 135.001, "138": 138}, {"track": 499, "bpm": 139.854, "138": 138}, {"track": 500, "bpm": 128.009, "138": 138}, {"track": 501, "bpm": 133.33, "138": 138}, {"track": 502, "bpm": 132.176, "138": 138}, {"track": 503, "bpm": 125.979, "138": 138}, {"track": 504, "bpm": 133.958, "138": 138}, {"track": 505, "bpm": 140.052, "138": 138}, {"track": 506, "bpm": 135.087, "138": 138}, {"track": 507, "bpm": 132.995, "138": 138}, {"track": 508, "bpm": 127.996, "138": 138}, {"track": 509, "bpm": 138.0, "138": 138}, {"track": 510, "bpm": 130.025, "138": 138}, {"track": 511, "bpm": 127.988, "138": 138}, {"track": 512, "bpm": 136.998, "138": 138}, {"track": 513, "bpm": 138.002, "138": 138}, {"track": 514, "bpm": 132.022, "138": 138}, {"track": 515, "bpm": 138.014, "138": 138}, {"track": 516, "bpm": 127.977, "138": 138}, {"track": 517, "bpm": 130.02, "138": 138}, {"track": 518, "bpm": 138.0, "138": 138}, {"track": 519, "bpm": 139.994, "138": 138}, {"track": 520, "bpm": 135.468, "138": 138}, {"track": 521, "bpm": 131.986, "138": 138}, {"track": 522, "bpm": 138.008, "138": 138}, {"track": 523, "bpm": 130.023, "138": 138}, {"track": 524, "bpm": 139.99, "138": 138}, {"track": 525, "bpm": 134.002, "138": 138}, {"track": 526, "bpm": 128.01, "138": 138}, {"track": 527, "bpm": 137.996, "138": 138}, {"track": 528, "bpm": 138.006, "138": 138}, {"track": 529, "bpm": 128.011, "138": 138}, {"track": 530, "bpm": 129.974, "138": 138}, {"track": 531, "bpm": 133.992, "138": 138}, {"track": 532, "bpm": 129.978, "138": 138}, {"track": 533, "bpm": 121.997, "138": 138}, {"track": 534, "bpm": 129.99, "138": 138}, {"track": 535, "bpm": 139.28, "138": 138}, {"track": 536, "bpm": 131.996, "138": 138}, {"track": 537, "bpm": 131.988, "138": 138}, {"track": 538, "bpm": 130.008, "138": 138}, {"track": 539, "bpm": 128.016, "138": 138}, {"track": 540, "bpm": 139.998, "138": 138}, {"track": 541, "bpm": 128.01, "138": 138}, {"track": 542, "bpm": 134.988, "138": 138}, {"track": 543, "bpm": 139.989, "138": 138}, {"track": 544, "bpm": 131.983, "138": 138}, {"track": 545, "bpm": 136.009, "138": 138}, {"track": 546, "bpm": 127.974, "138": 138}, {"track": 547, "bpm": 136.007, "138": 138}, {"track": 548, "bpm": 132.995, "138": 138}, {"track": 549, "bpm": 136.977, "138": 138}, {"track": 550, "bpm": 138.006, "138": 138}, {"track": 551, "bpm": 135.023, "138": 138}, {"track": 552, "bpm": 140.004, "138": 138}, {"track": 553, "bpm": 130.007, "138": 138}, {"track": 554, "bpm": 132.01, "138": 138}, {"track": 555, "bpm": 138.008, "138": 138}, {"track": 556, "bpm": 138.029, "138": 138}, {"track": 557, "bpm": 128.004, "138": 138}, {"track": 558, "bpm": 131.981, "138": 138}, {"track": 559, "bpm": 138.011, "138": 138}, {"track": 560, "bpm": 140.002, "138": 138}, {"track": 561, "bpm": 140.02, "138": 138}, {"track": 562, "bpm": 132.005, "138": 138}, {"track": 563, "bpm": 129.995, "138": 138}, {"track": 564, "bpm": 126.986, "138": 138}, {"track": 565, "bpm": 131.995, "138": 138}, {"track": 566, "bpm": 132.012, "138": 138}, {"track": 567, "bpm": 139.982, "138": 138}, {"track": 568, "bpm": 142.002, "138": 138}, {"track": 569, "bpm": 128.025, "138": 138}, {"track": 570, "bpm": 131.497, "138": 138}, {"track": 571, "bpm": 134.009, "138": 138}, {"track": 572, "bpm": 127.0, "138": 138}, {"track": 573, "bpm": 137.831, "138": 138}, {"track": 574, "bpm": 140.005, "138": 138}, {"track": 575, "bpm": 137.974, "138": 138}, {"track": 576, "bpm": 130.003, "138": 138}, {"track": 577, "bpm": 139.965, "138": 138}, {"track": 578, "bpm": 132.993, "138": 138}, {"track": 579, "bpm": 132.014, "138": 138}, {"track": 580, "bpm": 127.964, "138": 138}, {"track": 581, "bpm": 127.993, "138": 138}, {"track": 582, "bpm": 130.007, "138": 138}, {"track": 583, "bpm": 125.003, "138": 138}, {"track": 584, "bpm": 137.985, "138": 138}, {"track": 585, "bpm": 129.995, "138": 138}, {"track": 586, "bpm": 127.003, "138": 138}, {"track": 587, "bpm": 137.022, "138": 138}, {"track": 588, "bpm": 137.956, "138": 138}, {"track": 589, "bpm": 131.997, "138": 138}, {"track": 590, "bpm": 133.981, "138": 138}, {"track": 591, "bpm": 139.993, "138": 138}, {"track": 592, "bpm": 126.003, "138": 138}, {"track": 593, "bpm": 137.988, "138": 138}, {"track": 594, "bpm": 127.953, "138": 138}, {"track": 595, "bpm": 127.995, "138": 138}, {"track": 596, "bpm": 128.0, "138": 138}, {"track": 597, "bpm": 136.005, "138": 138}, {"track": 598, "bpm": 133.977, "138": 138}, {"track": 599, "bpm": 137.978, "138": 138}, {"track": 600, "bpm": 131.993, "138": 138}, {"track": 601, "bpm": 131.994, "138": 138}, {"track": 602, "bpm": 133.987, "138": 138}, {"track": 603, "bpm": 138.01, "138": 138}, {"track": 604, "bpm": 128.0, "138": 138}, {"track": 605, "bpm": 131.964, "138": 138}, {"track": 606, "bpm": 135.018, "138": 138}, {"track": 607, "bpm": 129.967, "138": 138}, {"track": 608, "bpm": 138.018, "138": 138}, {"track": 609, "bpm": 138.001, "138": 138}, {"track": 610, "bpm": 139.969, "138": 138}, {"track": 611, "bpm": 137.977, "138": 138}, {"track": 612, "bpm": 137.99, "138": 138}, {"track": 613, "bpm": 131.993, "138": 138}, {"track": 614, "bpm": 134.98, "138": 138}, {"track": 615, "bpm": 139.982, "138": 138}, {"track": 616, "bpm": 132.006, "138": 138}, {"track": 617, "bpm": 129.987, "138": 138}, {"track": 618, "bpm": 127.987, "138": 138}, {"track": 619, "bpm": 138.014, "138": 138}, {"track": 620, "bpm": 137.997, "138": 138}, {"track": 621, "bpm": 127.962, "138": 138}, {"track": 622, "bpm": 134.007, "138": 138}, {"track": 623, "bpm": 138.001, "138": 138}, {"track": 624, "bpm": 134.99, "138": 138}, {"track": 625, "bpm": 134.982, "138": 138}, {"track": 626, "bpm": 139.996, "138": 138}, {"track": 627, "bpm": 139.982, "138": 138}, {"track": 628, "bpm": 133.919, "138": 138}, {"track": 629, "bpm": 137.997, "138": 138}, {"track": 630, "bpm": 138.002, "138": 138}, {"track": 631, "bpm": 141.981, "138": 138}, {"track": 632, "bpm": 140.017, "138": 138}, {"track": 633, "bpm": 128.056, "138": 138}, {"track": 634, "bpm": 138.007, "138": 138}, {"track": 635, "bpm": 127.971, "138": 138}, {"track": 636, "bpm": 129.965, "138": 138}, {"track": 637, "bpm": 131.993, "138": 138}, {"track": 638, "bpm": 139.984, "138": 138}, {"track": 639, "bpm": 136.97, "138": 138}, {"track": 640, "bpm": 127.981, "138": 138}, {"track": 641, "bpm": 135.966, "138": 138}, {"track": 642, "bpm": 133.981, "138": 138}, {"track": 643, "bpm": 127.886, "138": 138}, {"track": 644, "bpm": 132.002, "138": 138}, {"track": 645, "bpm": 133.992, "138": 138}, {"track": 646, "bpm": 138.005, "138": 138}, {"track": 647, "bpm": 135.99, "138": 138}, {"track": 648, "bpm": 137.986, "138": 138}, {"track": 649, "bpm": 136.007, "138": 138}, {"track": 650, "bpm": 137.994, "138": 138}, {"track": 651, "bpm": 135.001, "138": 138}, {"track": 652, "bpm": 127.993, "138": 138}, {"track": 653, "bpm": 131.855, "138": 138}, {"track": 654, "bpm": 131.999, "138": 138}, {"track": 655, "bpm": 130.997, "138": 138}, {"track": 656, "bpm": 136.024, "138": 138}, {"track": 657, "bpm": 137.0, "138": 138}, {"track": 658, "bpm": 127.976, "138": 138}, {"track": 659, "bpm": 127.988, "138": 138}, {"track": 660, "bpm": 130.007, "138": 138}, {"track": 661, "bpm": 136.989, "138": 138}, {"track": 662, "bpm": 128.044, "138": 138}, {"track": 663, "bpm": 129.997, "138": 138}, {"track": 664, "bpm": 138.02, "138": 138}, {"track": 665, "bpm": 139.98, "138": 138}, {"track": 666, "bpm": 133.978, "138": 138}, {"track": 667, "bpm": 127.99, "138": 138}, {"track": 668, "bpm": 131.99, "138": 138}, {"track": 669, "bpm": 139.986, "138": 138}, {"track": 670, "bpm": 130.987, "138": 138}, {"track": 671, "bpm": 130.015, "138": 138}, {"track": 672, "bpm": 135.018, "138": 138}, {"track": 673, "bpm": 133.985, "138": 138}, {"track": 674, "bpm": 132.008, "138": 138}, {"track": 675, "bpm": 138.015, "138": 138}, {"track": 676, "bpm": 135.999, "138": 138}, {"track": 677, "bpm": 138.011, "138": 138}, {"track": 678, "bpm": 139.023, "138": 138}, {"track": 679, "bpm": 137.992, "138": 138}, {"track": 680, "bpm": 137.997, "138": 138}, {"track": 681, "bpm": 136.001, "138": 138}, {"track": 682, "bpm": 131.995, "138": 138}, {"track": 683, "bpm": 130.018, "138": 138}, {"track": 684, "bpm": 133.977, "138": 138}, {"track": 685, "bpm": 135.983, "138": 138}, {"track": 686, "bpm": 132.994, "138": 138}, {"track": 687, "bpm": 137.982, "138": 138}, {"track": 688, "bpm": 140.004, "138": 138}, {"track": 689, "bpm": 134.007, "138": 138}, {"track": 690, "bpm": 132.009, "138": 138}, {"track": 691, "bpm": 135.02, "138": 138}, {"track": 692, "bpm": 125.984, "138": 138}, {"track": 693, "bpm": 133.986, "138": 138}, {"track": 694, "bpm": 128.006, "138": 138}, {"track": 695, "bpm": 132.01, "138": 138}, {"track": 696, "bpm": 129.995, "138": 138}, {"track": 697, "bpm": 124.008, "138": 138}, {"track": 698, "bpm": 131.001, "138": 138}, {"track": 699, "bpm": 138.015, "138": 138}, {"track": 700, "bpm": 135.99, "138": 138}, {"track": 701, "bpm": 129.968, "138": 138}, {"track": 702, "bpm": 139.99, "138": 138}, {"track": 703, "bpm": 133.982, "138": 138}, {"track": 704, "bpm": 137.994, "138": 138}, {"track": 705, "bpm": 138.016, "138": 138}, {"track": 706, "bpm": 128.007, "138": 138}, {"track": 707, "bpm": 134.036, "138": 138}, {"track": 708, "bpm": 129.986, "138": 138}, {"track": 709, "bpm": 130.991, "138": 138}, {"track": 710, "bpm": 139.988, "138": 138}, {"track": 711, "bpm": 135.017, "138": 138}, {"track": 712, "bpm": 140.011, "138": 138}, {"track": 713, "bpm": 137.995, "138": 138}, {"track": 714, "bpm": 136.988, "138": 138}, {"track": 715, "bpm": 130.015, "138": 138}, {"track": 716, "bpm": 129.987, "138": 138}, {"track": 717, "bpm": 137.985, "138": 138}, {"track": 718, "bpm": 127.984, "138": 138}, {"track": 719, "bpm": 138.024, "138": 138}, {"track": 720, "bpm": 128.021, "138": 138}, {"track": 721, "bpm": 137.003, "138": 138}, {"track": 722, "bpm": 132.007, "138": 138}, {"track": 723, "bpm": 128.001, "138": 138}, {"track": 724, "bpm": 137.996, "138": 138}, {"track": 725, "bpm": 137.991, "138": 138}, {"track": 726, "bpm": 134.019, "138": 138}, {"track": 727, "bpm": 132.011, "138": 138}, {"track": 728, "bpm": 132.008, "138": 138}, {"track": 729, "bpm": 138.0, "138": 138}, {"track": 730, "bpm": 138.007, "138": 138}, {"track": 731, "bpm": 138.0, "138": 138}, {"track": 732, "bpm": 139.993, "138": 138}, {"track": 733, "bpm": 132.024, "138": 138}, {"track": 734, "bpm": 134.983, "138": 138}, {"track": 735, "bpm": 141.063, "138": 138}, {"track": 736, "bpm": 135.002, "138": 138}, {"track": 737, "bpm": 138.019, "138": 138}, {"track": 738, "bpm": 124.986, "138": 138}, {"track": 739, "bpm": 138.021, "138": 138}, {"track": 740, "bpm": 137.991, "138": 138}, {"track": 741, "bpm": 130.004, "138": 138}, {"track": 742, "bpm": 138.012, "138": 138}, {"track": 743, "bpm": 137.983, "138": 138}, {"track": 744, "bpm": 125.989, "138": 138}, {"track": 745, "bpm": 128.582, "138": 138}, {"track": 746, "bpm": 137.989, "138": 138}, {"track": 747, "bpm": 128.01, "138": 138}, {"track": 748, "bpm": 137.994, "138": 138}, {"track": 749, "bpm": 132.011, "138": 138}, {"track": 750, "bpm": 131.008, "138": 138}, {"track": 751, "bpm": 135.007, "138": 138}, {"track": 752, "bpm": 137.985, "138": 138}, {"track": 753, "bpm": 134.011, "138": 138}, {"track": 754, "bpm": 138.979, "138": 138}, {"track": 755, "bpm": 136.003, "138": 138}, {"track": 756, "bpm": 132.06, "138": 138}, {"track": 757, "bpm": 127.957, "138": 138}, {"track": 758, "bpm": 130.991, "138": 138}, {"track": 759, "bpm": 138.011, "138": 138}, {"track": 760, "bpm": 137.995, "138": 138}, {"track": 761, "bpm": 128.005, "138": 138}, {"track": 762, "bpm": 139.997, "138": 138}, {"track": 763, "bpm": 132.994, "138": 138}, {"track": 764, "bpm": 139.973, "138": 138}, {"track": 765, "bpm": 127.964, "138": 138}, {"track": 766, "bpm": 140.01, "138": 138}, {"track": 767, "bpm": 128.083, "138": 138}, {"track": 768, "bpm": 136.974, "138": 138}, {"track": 769, "bpm": 130.006, "138": 138}, {"track": 770, "bpm": 132.01, "138": 138}, {"track": 771, "bpm": 137.997, "138": 138}, {"track": 772, "bpm": 138.001, "138": 138}, {"track": 773, "bpm": 134.979, "138": 138}, {"track": 774, "bpm": 138.017, "138": 138}, {"track": 775, "bpm": 131.982, "138": 138}, {"track": 776, "bpm": 134.997, "138": 138}, {"track": 777, "bpm": 137.983, "138": 138}, {"track": 778, "bpm": 129.994, "138": 138}, {"track": 779, "bpm": 128.013, "138": 138}, {"track": 780, "bpm": 138.033, "138": 138}, {"track": 781, "bpm": 137.998, "138": 138}, {"track": 782, "bpm": 137.992, "138": 138}, {"track": 783, "bpm": 140.022, "138": 138}, {"track": 784, "bpm": 131.982, "138": 138}, {"track": 785, "bpm": 128.004, "138": 138}, {"track": 786, "bpm": 131.013, "138": 138}, {"track": 787, "bpm": 137.984, "138": 138}, {"track": 788, "bpm": 131.995, "138": 138}, {"track": 789, "bpm": 138.015, "138": 138}, {"track": 790, "bpm": 131.978, "138": 138}, {"track": 791, "bpm": 138.007, "138": 138}, {"track": 792, "bpm": 137.988, "138": 138}, {"track": 793, "bpm": 132.007, "138": 138}, {"track": 794, "bpm": 140.034, "138": 138}, {"track": 795, "bpm": 140.014, "138": 138}, {"track": 796, "bpm": 132.998, "138": 138}, {"track": 797, "bpm": 139.989, "138": 138}, {"track": 798, "bpm": 133.981, "138": 138}, {"track": 799, "bpm": 131.99, "138": 138}, {"track": 800, "bpm": 135.998, "138": 138}, {"track": 801, "bpm": 130.0, "138": 138}, {"track": 802, "bpm": 129.992, "138": 138}, {"track": 803, "bpm": 128.023, "138": 138}, {"track": 804, "bpm": 138.003, "138": 138}, {"track": 805, "bpm": 130.006, "138": 138}, {"track": 806, "bpm": 134.988, "138": 138}, {"track": 807, "bpm": 137.023, "138": 138}, {"track": 808, "bpm": 131.996, "138": 138}, {"track": 809, "bpm": 131.989, "138": 138}, {"track": 810, "bpm": 127.996, "138": 138}, {"track": 811, "bpm": 134.822, "138": 138}, {"track": 812, "bpm": 132.075, "138": 138}, {"track": 813, "bpm": 137.996, "138": 138}, {"track": 814, "bpm": 137.961, "138": 138}, {"track": 815, "bpm": 127.971, "138": 138}, {"track": 816, "bpm": 140.006, "138": 138}, {"track": 817, "bpm": 131.992, "138": 138}, {"track": 818, "bpm": 137.988, "138": 138}, {"track": 819, "bpm": 128.011, "138": 138}, {"track": 820, "bpm": 129.996, "138": 138}, {"track": 821, "bpm": 138.007, "138": 138}, {"track": 822, "bpm": 129.986, "138": 138}, {"track": 823, "bpm": 138.019, "138": 138}, {"track": 824, "bpm": 138.0, "138": 138}, {"track": 825, "bpm": 140.0, "138": 138}, {"track": 826, "bpm": 138.002, "138": 138}, {"track": 827, "bpm": 135.996, "138": 138}, {"track": 828, "bpm": 135.002, "138": 138}, {"track": 829, "bpm": 136.012, "138": 138}, {"track": 830, "bpm": 137.973, "138": 138}, {"track": 831, "bpm": 132.034, "138": 138}, {"track": 832, "bpm": 135.938, "138": 138}, {"track": 833, "bpm": 136.044, "138": 138}, {"track": 834, "bpm": 128.0, "138": 138}, {"track": 835, "bpm": 136.994, "138": 138}, {"track": 836, "bpm": 128.02, "138": 138}, {"track": 837, "bpm": 128.003, "138": 138}, {"track": 838, "bpm": 132.006, "138": 138}, {"track": 839, "bpm": 128.019, "138": 138}, {"track": 840, "bpm": 125.156, "138": 138}, {"track": 841, "bpm": 131.815, "138": 138}, {"track": 842, "bpm": 138.03, "138": 138}, {"track": 843, "bpm": 138.006, "138": 138}, {"track": 844, "bpm": 136.018, "138": 138}, {"track": 845, "bpm": 135.984, "138": 138}, {"track": 846, "bpm": 127.977, "138": 138}, {"track": 847, "bpm": 130.014, "138": 138}, {"track": 848, "bpm": 129.012, "138": 138}, {"track": 849, "bpm": 138.002, "138": 138}, {"track": 850, "bpm": 135.985, "138": 138}, {"track": 851, "bpm": 131.998, "138": 138}, {"track": 852, "bpm": 135.984, "138": 138}, {"track": 853, "bpm": 137.49, "138": 138}, {"track": 854, "bpm": 137.016, "138": 138}, {"track": 855, "bpm": 131.999, "138": 138}, {"track": 856, "bpm": 137.988, "138": 138}, {"track": 857, "bpm": 137.989, "138": 138}, {"track": 858, "bpm": 134.005, "138": 138}, {"track": 859, "bpm": 136.002, "138": 138}, {"track": 860, "bpm": 138.013, "138": 138}, {"track": 861, "bpm": 137.998, "138": 138}, {"track": 862, "bpm": 131.962, "138": 138}, {"track": 863, "bpm": 132.019, "138": 138}, {"track": 864, "bpm": 138.003, "138": 138}, {"track": 865, "bpm": 136.993, "138": 138}, {"track": 866, "bpm": 132.986, "138": 138}, {"track": 867, "bpm": 137.954, "138": 138}, {"track": 868, "bpm": 135.976, "138": 138}, {"track": 869, "bpm": 132.014, "138": 138}, {"track": 870, "bpm": 138.001, "138": 138}, {"track": 871, "bpm": 137.998, "138": 138}, {"track": 872, "bpm": 139.99, "138": 138}, {"track": 873, "bpm": 131.988, "138": 138}, {"track": 874, "bpm": 135.001, "138": 138}, {"track": 875, "bpm": 130.231, "138": 138}, {"track": 876, "bpm": 127.002, "138": 138}, {"track": 877, "bpm": 137.999, "138": 138}, {"track": 878, "bpm": 135.013, "138": 138}, {"track": 879, "bpm": 139.987, "138": 138}, {"track": 880, "bpm": 139.987, "138": 138}, {"track": 881, "bpm": 134.984, "138": 138}, {"track": 882, "bpm": 135.0, "138": 138}, {"track": 883, "bpm": 134.989, "138": 138}, {"track": 884, "bpm": 138.02, "138": 138}, {"track": 885, "bpm": 131.986, "138": 138}, {"track": 886, "bpm": 139.996, "138": 138}, {"track": 887, "bpm": 135.002, "138": 138}, {"track": 888, "bpm": 130.975, "138": 138}, {"track": 889, "bpm": 137.99, "138": 138}, {"track": 890, "bpm": 129.981, "138": 138}, {"track": 891, "bpm": 132.007, "138": 138}, {"track": 892, "bpm": 138.008, "138": 138}, {"track": 893, "bpm": 130.003, "138": 138}, {"track": 894, "bpm": 130.024, "138": 138}, {"track": 895, "bpm": 137.988, "138": 138}, {"track": 896, "bpm": 137.997, "138": 138}, {"track": 897, "bpm": 139.999, "138": 138}, {"track": 898, "bpm": 128.026, "138": 138}, {"track": 899, "bpm": 137.983, "138": 138}, {"track": 900, "bpm": 135.007, "138": 138}, {"track": 901, "bpm": 135.875, "138": 138}, {"track": 902, "bpm": 132.985, "138": 138}, {"track": 903, "bpm": 142.016, "138": 138}, {"track": 904, "bpm": 137.961, "138": 138}, {"track": 905, "bpm": 137.987, "138": 138}, {"track": 906, "bpm": 126.003, "138": 138}, {"track": 907, "bpm": 127.989, "138": 138}, {"track": 908, "bpm": 138.051, "138": 138}, {"track": 909, "bpm": 139.05, "138": 138}, {"track": 910, "bpm": 131.987, "138": 138}, {"track": 911, "bpm": 127.981, "138": 138}, {"track": 912, "bpm": 143.012, "138": 138}, {"track": 913, "bpm": 135.085, "138": 138}, {"track": 914, "bpm": 139.997, "138": 138}, {"track": 915, "bpm": 134.984, "138": 138}, {"track": 916, "bpm": 132.979, "138": 138}, {"track": 917, "bpm": 135.002, "138": 138}, {"track": 918, "bpm": 135.023, "138": 138}, {"track": 919, "bpm": 138.003, "138": 138}, {"track": 920, "bpm": 138.002, "138": 138}, {"track": 921, "bpm": 133.991, "138": 138}, {"track": 922, "bpm": 135.011, "138": 138}, {"track": 923, "bpm": 134.004, "138": 138}, {"track": 924, "bpm": 138.027, "138": 138}, {"track": 925, "bpm": 138.013, "138": 138}, {"track": 926, "bpm": 137.946, "138": 138}, {"track": 927, "bpm": 134.99, "138": 138}, {"track": 928, "bpm": 132.997, "138": 138}, {"track": 929, "bpm": 138.042, "138": 138}, {"track": 930, "bpm": 135.014, "138": 138}, {"track": 931, "bpm": 135.032, "138": 138}, {"track": 932, "bpm": 137.845, "138": 138}, {"track": 933, "bpm": 138.0, "138": 138}, {"track": 934, "bpm": 134.983, "138": 138}, {"track": 935, "bpm": 135.004, "138": 138}, {"track": 936, "bpm": 137.995, "138": 138}, {"track": 937, "bpm": 128.017, "138": 138}, {"track": 938, "bpm": 138.027, "138": 138}, {"track": 939, "bpm": 134.959, "138": 138}, {"track": 940, "bpm": 134.997, "138": 138}, {"track": 941, "bpm": 137.997, "138": 138}, {"track": 942, "bpm": 136.0, "138": 138}, {"track": 943, "bpm": 135.997, "138": 138}, {"track": 944, "bpm": 135.026, "138": 138}, {"track": 945, "bpm": 131.983, "138": 138}, {"track": 946, "bpm": 139.988, "138": 138}, {"track": 947, "bpm": 139.015, "138": 138}, {"track": 948, "bpm": 137.029, "138": 138}, {"track": 949, "bpm": 136.012, "138": 138}, {"track": 950, "bpm": 140.044, "138": 138}, {"track": 951, "bpm": 135.002, "138": 138}, {"track": 952, "bpm": 138.012, "138": 138}, {"track": 953, "bpm": 133.997, "138": 138}, {"track": 954, "bpm": 139.997, "138": 138}, {"track": 955, "bpm": 139.978, "138": 138}, {"track": 956, "bpm": 132.995, "138": 138}, {"track": 957, "bpm": 138.029, "138": 138}, {"track": 958, "bpm": 140.977, "138": 138}, {"track": 959, "bpm": 138.004, "138": 138}, {"track": 960, "bpm": 135.979, "138": 138}, {"track": 961, "bpm": 140.006, "138": 138}, {"track": 962, "bpm": 137.985, "138": 138}, {"track": 963, "bpm": 137.981, "138": 138}, {"track": 964, "bpm": 135.1, "138": 138}, {"track": 965, "bpm": 138.014, "138": 138}, {"track": 966, "bpm": 136.979, "138": 138}, {"track": 967, "bpm": 137.065, "138": 138}, {"track": 968, "bpm": 130.024, "138": 138}, {"track": 969, "bpm": 131.014, "138": 138}, {"track": 970, "bpm": 131.928, "138": 138}, {"track": 971, "bpm": 129.992, "138": 138}, {"track": 972, "bpm": 135.989, "138": 138}, {"track": 973, "bpm": 139.353, "138": 138}, {"track": 974, "bpm": 132.01, "138": 138}, {"track": 975, "bpm": 130.98, "138": 138}, {"track": 976, "bpm": 131.986, "138": 138}, {"track": 977, "bpm": 130.031, "138": 138}, {"track": 978, "bpm": 134.01, "138": 138}, {"track": 979, "bpm": 140.019, "138": 138}, {"track": 980, "bpm": 134.999, "138": 138}, {"track": 981, "bpm": 139.991, "138": 138}, {"track": 982, "bpm": 135.005, "138": 138}, {"track": 983, "bpm": 140.006, "138": 138}, {"track": 984, "bpm": 138.258, "138": 138}, {"track": 985, "bpm": 136.059, "138": 138}, {"track": 986, "bpm": 138.01, "138": 138}, {"track": 987, "bpm": 138.039, "138": 138}, {"track": 988, "bpm": 129.99, "138": 138}, {"track": 989, "bpm": 134.012, "138": 138}, {"track": 990, "bpm": 138.013, "138": 138}, {"track": 991, "bpm": 129.982, "138": 138}, {"track": 992, "bpm": 135.0, "138": 138}, {"track": 993, "bpm": 137.996, "138": 138}, {"track": 994, "bpm": 132.002, "138": 138}, {"track": 995, "bpm": 135.988, "138": 138}, {"track": 996, "bpm": 137.978, "138": 138}, {"track": 997, "bpm": 131.991, "138": 138}, {"track": 998, "bpm": 139.985, "138": 138}, {"track": 999, "bpm": 135.011, "138": 138}]}}, {"mode": "vega-lite"});
</script>
</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>There's a few "outliers" that kind of throw off the graph - let's look at the tracks in the top 1,000 with the lowest and highest BPMs.</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="k">for</span> <span class="n">position</span><span class="p">,</span> <span class="n">track</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">top_1000_tracks</span><span class="p">):</span>
    <span class="n">tempo</span> <span class="o">=</span> <span class="n">sp</span><span class="o">.</span><span class="n">audio_features</span><span class="p">(</span><span class="n">track</span><span class="p">[</span><span class="s1">&#39;track&#39;</span><span class="p">][</span><span class="s1">&#39;uri&#39;</span><span class="p">])[</span><span class="mi">0</span><span class="p">][</span><span class="s1">&#39;tempo&#39;</span><span class="p">]</span>
    <span class="k">if</span> <span class="n">tempo</span> <span class="o">&lt;</span> <span class="mi">125</span> <span class="ow">or</span> <span class="n">tempo</span> <span class="o">&gt;</span> <span class="mi">141</span><span class="p">:</span> <span class="c1"># &quot;outliers&quot;</span>
        <span class="n">track_artist</span> <span class="o">=</span> <span class="n">track</span><span class="p">[</span><span class="s1">&#39;track&#39;</span><span class="p">][</span><span class="s1">&#39;artists&#39;</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="s1">&#39;name&#39;</span><span class="p">]</span>
        <span class="k">for</span> <span class="n">artist</span> <span class="ow">in</span> <span class="n">track</span><span class="p">[</span><span class="s1">&#39;track&#39;</span><span class="p">][</span><span class="s1">&#39;artists&#39;</span><span class="p">][</span><span class="mi">1</span><span class="p">:]:</span>
            <span class="n">track_artist</span> <span class="o">+=</span> <span class="s2">&quot; &amp; &quot;</span> <span class="o">+</span> <span class="n">artist</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">]</span>
        <span class="nb">print</span><span class="p">(</span><span class="mi">1000</span> <span class="o">-</span> <span class="n">position</span><span class="p">,</span> <span class="s1">&#39;.&#39;</span><span class="p">,</span> <span class="n">track_artist</span><span class="p">,</span> <span class="s1">&#39;-&#39;</span><span class="p">,</span> <span class="n">track</span><span class="p">[</span><span class="s1">&#39;track&#39;</span><span class="p">][</span><span class="s1">&#39;name&#39;</span><span class="p">],</span> <span class="s1">&#39;-&#39;</span><span class="p">,</span> <span class="n">tempo</span><span class="p">,</span> <span class="s1">&#39;BPM&#39;</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>951 . Hilight Tribe &amp; Vini Vici - Free Tibet - Vini Vici Remix - 103.512 BPM
950 . Jody Wisternoff &amp; Sian Evans - The Bridge - Chicane Rework - 124.998 BPM
917 . Vini Vici &amp; Jean Marie &amp; Hilight Tribe - Moyoni - 103.485 BPM
853 . Tinlicker - Sleepwalker - Extended Mix - 123.997 BPM
716 . Armin van Buuren &amp; Alexander Popov - Popcorn - Extended Mix - 94.915 BPM
711 . Parker &amp; Hanson - Gravity - Original Mix - 123.993 BPM
691 . Lost Witness &amp; Lange - Happiness Happening - Lange Remix - 141.85 BPM
654 . Cygnus X - The Orange Theme - Ferry Corsten&#39;s Moonman Orange Juice Remix - 144.988 BPM
650 . PRAANA &amp; Matt Fax &amp; HALIENE - Kaleidoscope - Extended Mix - 121.983 BPM
635 . Ilse DeLange - The Great Escape - 98.69 BPM
612 . Monolink &amp; ARTBAT - Return to Oz - ARTBAT Remix - 123.998 BPM
531 . Kyuss - Yeah - 0 BPM
467 . VER:WEST &amp; Tiësto - 5 Seconds Before Sunrise - 121.997 BPM
432 . Will Atkinson - Telescope - Extended Mix - 142.002 BPM
369 . Basic Dawn &amp; Nu NRG - Pure Thrust - NU NRG Remix - 141.981 BPM
303 . Above &amp; Beyond - Is It Love? (1001) - 124.008 BPM
265 . Rank 1 - Such Is Life - Original Version - 141.063 BPM
262 . Armin van Buuren &amp; Candace Sosa - Runaway - Extended Mix - 124.986 BPM
176 . Above &amp; Beyond - Sun In Your Eyes - Original Mix - 183.967 BPM
97 . John O&#39;Callaghan &amp; Bryan Kearney - Exactly - Original Mix - 142.016 BPM
88 . Giuseppe Ottaviani - Linking People - Original Mix - 143.012 BPM
</pre>
</div>
</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>But this is not entirely right, right? <a href="https://www.beatport.com/track/popcorn-original-mix/10531322">Beatport lists Popcorn as 138 BPM</a>. Again, I've done nothing to address any inconsistencies.</p>

</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="Now-you!">Now you!<a class="anchor-link" href="#Now-you!"> </a></h2>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>I've hardly covered the most basic analyses, so I'll leave you with a CSV file of tracks and <a href="https://developer.spotify.com/documentation/web-api/reference/#object-audiofeaturesobject">"audio features" from Spotify</a> so you can run the numbers yourself.</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="kn">import</span> <span class="nn">csv</span>

<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;../data/top-1000.csv&#39;</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">,</span> <span class="n">newline</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">csvfile</span><span class="p">:</span>
    <span class="n">topreader</span> <span class="o">=</span> <span class="n">csv</span><span class="o">.</span><span class="n">writer</span><span class="p">(</span><span class="n">csvfile</span><span class="p">,</span> <span class="n">delimiter</span><span class="o">=</span><span class="s1">&#39;,&#39;</span><span class="p">,</span>
                            <span class="n">quotechar</span><span class="o">=</span><span class="s1">&#39;|&#39;</span><span class="p">,</span> <span class="n">quoting</span><span class="o">=</span><span class="n">csv</span><span class="o">.</span><span class="n">QUOTE_MINIMAL</span><span class="p">)</span>
    <span class="n">topreader</span><span class="o">.</span><span class="n">writerow</span><span class="p">([</span><span class="s1">&#39;position&#39;</span><span class="p">,</span> <span class="s1">&#39;artist&#39;</span><span class="p">,</span> <span class="s1">&#39;track&#39;</span><span class="p">,</span> <span class="s1">&#39;year&#39;</span><span class="p">,</span> <span class="s1">&#39;danceability&#39;</span><span class="p">,</span> <span class="s1">&#39;energy&#39;</span><span class="p">,</span> <span class="s1">&#39;key&#39;</span><span class="p">,</span> <span class="s1">&#39;loudness&#39;</span><span class="p">,</span> <span class="s1">&#39;speechiness&#39;</span><span class="p">,</span> <span class="s1">&#39;acousticness&#39;</span><span class="p">,</span> <span class="s1">&#39;instrumentalness&#39;</span><span class="p">,</span> <span class="s1">&#39;liveness&#39;</span><span class="p">,</span> <span class="s1">&#39;valence&#39;</span><span class="p">,</span> <span class="s1">&#39;tempo&#39;</span><span class="p">,</span> <span class="s1">&#39;id&#39;</span><span class="p">,</span> <span class="s1">&#39;uri&#39;</span><span class="p">,</span> <span class="s1">&#39;duration_ms&#39;</span><span class="p">,</span> <span class="s1">&#39;time_signature&#39;</span><span class="p">])</span>
    <span class="k">for</span> <span class="n">position</span><span class="p">,</span> <span class="n">track</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">top_1000_tracks</span><span class="p">):</span>
        <span class="c1"># Get track artists</span>
        <span class="n">track_artist</span> <span class="o">=</span> <span class="n">track</span><span class="p">[</span><span class="s1">&#39;track&#39;</span><span class="p">][</span><span class="s1">&#39;artists&#39;</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="s1">&#39;name&#39;</span><span class="p">]</span>
        <span class="k">for</span> <span class="n">artist</span> <span class="ow">in</span> <span class="n">track</span><span class="p">[</span><span class="s1">&#39;track&#39;</span><span class="p">][</span><span class="s1">&#39;artists&#39;</span><span class="p">][</span><span class="mi">1</span><span class="p">:]:</span>
            <span class="n">track_artist</span> <span class="o">+=</span> <span class="s2">&quot; &amp; &quot;</span> <span class="o">+</span> <span class="n">artist</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">]</span>
        <span class="n">audio_features</span> <span class="o">=</span> <span class="n">sp</span><span class="o">.</span><span class="n">audio_features</span><span class="p">(</span><span class="n">track</span><span class="p">[</span><span class="s1">&#39;track&#39;</span><span class="p">][</span><span class="s1">&#39;uri&#39;</span><span class="p">])[</span><span class="mi">0</span><span class="p">]</span>
        <span class="n">topreader</span><span class="o">.</span><span class="n">writerow</span><span class="p">([</span><span class="mi">1000</span> <span class="o">-</span> <span class="n">position</span><span class="p">,</span> <span class="n">track_artist</span><span class="p">,</span> <span class="n">track</span><span class="p">[</span><span class="s1">&#39;track&#39;</span><span class="p">][</span><span class="s1">&#39;name&#39;</span><span class="p">],</span> <span class="n">track</span><span class="p">[</span><span class="s1">&#39;track&#39;</span><span class="p">][</span><span class="s1">&#39;album&#39;</span><span class="p">][</span><span class="s1">&#39;release_date&#39;</span><span class="p">][:</span><span class="mi">4</span><span class="p">],</span> <span class="n">audio_features</span><span class="p">[</span><span class="s1">&#39;danceability&#39;</span><span class="p">],</span> <span class="n">audio_features</span><span class="p">[</span><span class="s1">&#39;energy&#39;</span><span class="p">],</span> <span class="n">audio_features</span><span class="p">[</span><span class="s1">&#39;key&#39;</span><span class="p">],</span> <span class="n">audio_features</span><span class="p">[</span><span class="s1">&#39;loudness&#39;</span><span class="p">],</span> <span class="n">audio_features</span><span class="p">[</span><span class="s1">&#39;speechiness&#39;</span><span class="p">],</span> <span class="n">audio_features</span><span class="p">[</span><span class="s1">&#39;acousticness&#39;</span><span class="p">],</span> <span class="n">audio_features</span><span class="p">[</span><span class="s1">&#39;instrumentalness&#39;</span><span class="p">],</span> <span class="n">audio_features</span><span class="p">[</span><span class="s1">&#39;liveness&#39;</span><span class="p">],</span> <span class="n">audio_features</span><span class="p">[</span><span class="s1">&#39;valence&#39;</span><span class="p">],</span> <span class="n">audio_features</span><span class="p">[</span><span class="s1">&#39;tempo&#39;</span><span class="p">],</span> <span class="n">audio_features</span><span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">],</span> <span class="n">audio_features</span><span class="p">[</span><span class="s1">&#39;uri&#39;</span><span class="p">],</span> <span class="n">audio_features</span><span class="p">[</span><span class="s1">&#39;duration_ms&#39;</span><span class="p">],</span> <span class="n">audio_features</span><span class="p">[</span><span class="s1">&#39;time_signature&#39;</span><span class="p">]])</span>
</pre></div>

    </div>
</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>The resulting file can be found in <a href="https://github.com/ScottBrenner/asot-jupyter/blob/master/csv/top-1000.csv">https://github.com/ScottBrenner/asot-jupyter/blob/master/csv/top-1000.csv</a> - let me know what you make with it!</p>

</div>
</div>
</div>
</div>]]></content><author><name></name></author><category term="asot" /><category term="bpm" /><category term="artist" /><category term="year" /><summary type="html"><![CDATA[Celebrating 1,000 episodes of A State of Trance.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://scottbrenner.github.io/asot-jupyter/images/most-played-artists.png" /><media:content medium="image" url="https://scottbrenner.github.io/asot-jupyter/images/most-played-artists.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Annual Average Episode BPM</title><link href="https://scottbrenner.github.io/asot-jupyter/asot/bpm/2020/05/24/annual-avg-bpm.html" rel="alternate" type="text/html" title="Annual Average Episode BPM" /><published>2020-05-24T00:00:00-05:00</published><updated>2020-05-24T00:00:00-05:00</updated><id>https://scottbrenner.github.io/asot-jupyter/asot/bpm/2020/05/24/annual-avg-bpm</id><content type="html" xml:base="https://scottbrenner.github.io/asot-jupyter/asot/bpm/2020/05/24/annual-avg-bpm.html"><![CDATA[<!--
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: _notebooks/2020-05-24-annual-avg-bpm.ipynb
-->

<div class="container" id="notebook-container">
        
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="Introduction">Introduction<a class="anchor-link" href="#Introduction"> </a></h2>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>We've previously looked at A State of Trance's <a href="https://scottbrenner.github.io/asot-jupyter/asot/bpm/2020/04/28/avg-bpm.html">average episode BPM</a>, <a href="https://scottbrenner.github.io/asot-jupyter/asot/artists/2020/05/02/artist-plays.html">most-played artists</a> and <a href="https://scottbrenner.github.io/asot-jupyter/asot/tracks/2020/05/16/track-plays.html">most-played tracks</a> <em>overall</em>.</p>
<p>Starting with this post we'll do the same - but looking at things from <em>year-to-year</em>. Let's begin with annual average episode BPM.</p>

</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="Getting-Started">Getting Started<a class="anchor-link" href="#Getting-Started"> </a></h2>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p><a href="https://en.wikipedia.org/wiki/A_State_of_Trance#History">The first episode of A State of Trance aired in 2001</a>. Since then, the show has seen</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="nb">len</span><span class="p">(</span><span class="n">episodes</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">



<div class="output_text output_subarea output_execute_result">
<pre>963</pre>
</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>episodes of across its nearly 20-year run. <em>As of writing, according to Spotify, etc ..</em></p>
<p>As a weekly radio show, I'd expect to see about 52 episodes air each year. Is that correct?</p>
<p>Fortunately Spotify can tell us when an episode aired:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="k">for</span> <span class="n">episode</span> <span class="ow">in</span> <span class="n">episodes</span><span class="p">[:</span><span class="mi">10</span><span class="p">]:</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">episode</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">],</span> <span class="n">episode</span><span class="p">[</span><span class="s1">&#39;release_date&#39;</span><span class="p">])</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>A State Of Trance Episode 000 2001-05-17
A State Of Trance Episode 001 2001-05-31
A State Of Trance Episode 002 2001-06-07
A State Of Trance Episode 003 2001-06-14
A State Of Trance Episode 004 2001-06-21
A State Of Trance Episode 005 2001-06-28
A State Of Trance Episode 006 2001-07-19
A State Of Trance Episode 007 2001-07-26
A State Of Trance Episode 008 2001-08-02
A State Of Trance Episode 009 2001-08-09
</pre>
</div>
</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>So we can keep a running tally for each year, then print the result:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">defaultdict</span>

<span class="n">episodes_counter</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>

<span class="k">for</span> <span class="n">episode</span> <span class="ow">in</span> <span class="n">episodes</span><span class="p">:</span>
    <span class="n">episodes_counter</span><span class="p">[</span><span class="n">episode</span><span class="p">[</span><span class="s1">&#39;release_date&#39;</span><span class="p">][:</span><span class="mi">4</span><span class="p">]]</span> <span class="o">+=</span> <span class="mi">1</span>

<span class="nb">print</span><span class="p">(</span><span class="nb">dict</span><span class="p">(</span><span class="n">episodes_counter</span><span class="p">))</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>{&#39;2001&#39;: 27, &#39;2002&#39;: 50, &#39;2003&#39;: 50, &#39;2004&#39;: 52, &#39;2005&#39;: 48, &#39;2006&#39;: 50, &#39;2007&#39;: 51, &#39;2008&#39;: 51, &#39;2009&#39;: 51, &#39;2010&#39;: 50, &#39;2011&#39;: 52, &#39;2012&#39;: 51, &#39;2013&#39;: 51, &#39;2014&#39;: 51, &#39;2015&#39;: 52, &#39;2016&#39;: 50, &#39;2017&#39;: 51, &#39;2018&#39;: 52, &#39;2019&#39;: 52, &#39;2020&#39;: 21}
</pre>
</div>
</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Seems reasonable enough!</p>

</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="Calculating">Calculating<a class="anchor-link" href="#Calculating"> </a></h2>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Let's crunch some numbers.</p>
<p>What is the annual average episode BPM?</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">annual_total_bpm</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>
<span class="n">annual_avg_bpm</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>

<span class="k">for</span> <span class="n">episode</span> <span class="ow">in</span> <span class="n">episodes</span><span class="p">:</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">episode_bpm</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">tracks_counted</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">for</span> <span class="n">track</span> <span class="ow">in</span> <span class="n">sp</span><span class="o">.</span><span class="n">album_tracks</span><span class="p">(</span><span class="n">episode</span><span class="p">[</span><span class="s1">&#39;uri&#39;</span><span class="p">])[</span><span class="s1">&#39;items&#39;</span><span class="p">]:</span>
            <span class="k">if</span> <span class="s2">&quot;a state of trance&quot;</span> <span class="ow">in</span> <span class="n">track</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span> <span class="ow">or</span> <span class="s2">&quot;- interview&quot;</span> <span class="ow">in</span> <span class="n">track</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">lower</span><span class="p">():</span>
                <span class="k">continue</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">episode_bpm</span> <span class="o">+=</span> <span class="n">sp</span><span class="o">.</span><span class="n">audio_features</span><span class="p">(</span><span class="n">track</span><span class="p">[</span><span class="s1">&#39;uri&#39;</span><span class="p">])[</span><span class="mi">0</span><span class="p">][</span><span class="s1">&#39;tempo&#39;</span><span class="p">]</span>
                <span class="n">tracks_counted</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="n">episodes_counted</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="n">avg</span> <span class="o">=</span> <span class="n">episode_bpm</span><span class="o">/</span><span class="n">tracks_counted</span>
        <span class="n">annual_total_bpm</span><span class="p">[</span><span class="n">episode</span><span class="p">[</span><span class="s1">&#39;release_date&#39;</span><span class="p">][:</span><span class="mi">4</span><span class="p">]]</span> <span class="o">+=</span> <span class="n">avg</span>
    <span class="k">except</span><span class="p">:</span>
        <span class="k">pass</span>

<span class="k">for</span> <span class="n">year</span><span class="p">,</span> <span class="n">avg</span> <span class="ow">in</span> <span class="n">annual_total_bpm</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
    <span class="n">annual_avg_bpm</span><span class="p">[</span><span class="n">year</span><span class="p">]</span> <span class="o">=</span> <span class="n">avg</span> <span class="o">/</span> <span class="n">episodes_counter</span><span class="p">[</span><span class="n">year</span><span class="p">]</span>

<span class="nb">print</span><span class="p">(</span><span class="nb">dict</span><span class="p">(</span><span class="n">annual_avg_bpm</span><span class="p">))</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>{&#39;2001&#39;: 137.34653042328043, &#39;2002&#39;: 138.77037672527473, &#39;2003&#39;: 137.87648184593183, &#39;2004&#39;: 136.8379514048452, &#39;2005&#39;: 135.9946882254463, &#39;2006&#39;: 136.21986194104406, &#39;2007&#39;: 135.31834901771512, &#39;2008&#39;: 134.5739768988312, &#39;2009&#39;: 134.84276103847634, &#39;2010&#39;: 134.2873634011065, &#39;2011&#39;: 133.38769823050973, &#39;2012&#39;: 133.77641000308137, &#39;2013&#39;: 134.89472557606408, &#39;2014&#39;: 134.62926964078503, &#39;2015&#39;: 133.21748777702336, &#39;2016&#39;: 133.8357659060619, &#39;2017&#39;: 133.83226986060524, &#39;2018&#39;: 132.8617358100079, &#39;2019&#39;: 133.39046580493476, &#39;2020&#39;: 133.46879858547982}
</pre>
</div>
</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="Results">Results<a class="anchor-link" href="#Results"> </a></h2>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Let's see what we've got!</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">source</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">([(</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="p">)</span> <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">annual_avg_bpm</span><span class="o">.</span><span class="n">items</span><span class="p">()],</span> 
                   <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;Year&#39;</span><span class="p">,</span> <span class="s1">&#39;Average Episode BPM&#39;</span><span class="p">])</span>
<span class="n">source</span><span class="p">[</span><span class="s1">&#39;138&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="mi">138</span>

<span class="n">base</span> <span class="o">=</span> <span class="n">alt</span><span class="o">.</span><span class="n">Chart</span><span class="p">(</span><span class="n">source</span><span class="p">)</span><span class="o">.</span><span class="n">mark_line</span><span class="p">()</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span>
    <span class="n">x</span><span class="o">=</span><span class="n">alt</span><span class="o">.</span><span class="n">X</span><span class="p">(</span><span class="s1">&#39;Year&#39;</span><span class="p">),</span>
    <span class="n">y</span><span class="o">=</span><span class="n">alt</span><span class="o">.</span><span class="n">Y</span><span class="p">(</span><span class="s1">&#39;Average Episode BPM&#39;</span><span class="p">,</span> <span class="n">scale</span><span class="o">=</span><span class="n">alt</span><span class="o">.</span><span class="n">Scale</span><span class="p">(</span><span class="n">domain</span><span class="o">=</span><span class="p">(</span><span class="mi">130</span><span class="p">,</span> <span class="mi">140</span><span class="p">))),</span>
<span class="p">)</span><span class="o">.</span><span class="n">properties</span><span class="p">(</span>
    <span class="n">title</span><span class="o">=</span><span class="s2">&quot;A State of Trance - Annual Average BPM of Episode&quot;</span><span class="p">,</span>
    <span class="n">width</span><span class="o">=</span><span class="mi">600</span>
<span class="p">)</span>

<span class="n">rule</span> <span class="o">=</span> <span class="n">alt</span><span class="o">.</span><span class="n">Chart</span><span class="p">(</span><span class="n">source</span><span class="p">)</span><span class="o">.</span><span class="n">mark_rule</span><span class="p">(</span><span class="n">color</span><span class="o">=</span><span class="s1">&#39;red&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span>
    <span class="n">y</span><span class="o">=</span><span class="s1">&#39;138&#39;</span>
<span class="p">)</span>

<span class="n">base</span> <span class="o">+</span> <span class="n">rule</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">

<div id="altair-viz-f453ae05c1584c14be60e75f8b79a7e4"></div>
<script type="text/javascript">
  (function(spec, embedOpt){
    let outputDiv = document.currentScript.previousElementSibling;
    if (outputDiv.id !== "altair-viz-f453ae05c1584c14be60e75f8b79a7e4") {
      outputDiv = document.getElementById("altair-viz-f453ae05c1584c14be60e75f8b79a7e4");
    }
    const paths = {
      "vega": "https://cdn.jsdelivr.net/npm//vega@5?noext",
      "vega-lib": "https://cdn.jsdelivr.net/npm//vega-lib?noext",
      "vega-lite": "https://cdn.jsdelivr.net/npm//vega-lite@4.8.1?noext",
      "vega-embed": "https://cdn.jsdelivr.net/npm//vega-embed@6?noext",
    };

    function loadScript(lib) {
      return new Promise(function(resolve, reject) {
        var s = document.createElement('script');
        s.src = paths[lib];
        s.async = true;
        s.onload = () => resolve(paths[lib]);
        s.onerror = () => reject(`Error loading script: ${paths[lib]}`);
        document.getElementsByTagName("head")[0].appendChild(s);
      });
    }

    function showError(err) {
      outputDiv.innerHTML = `<div class="error" style="color:red;">${err}</div>`;
      throw err;
    }

    function displayChart(vegaEmbed) {
      vegaEmbed(outputDiv, spec, embedOpt)
        .catch(err => showError(`Javascript Error: ${err.message}<br>This usually means there's a typo in your chart specification. See the javascript console for the full traceback.`));
    }

    if(typeof define === "function" && define.amd) {
      requirejs.config({paths});
      require(["vega-embed"], displayChart, err => showError(`Error loading script: ${err.message}`));
    } else if (typeof vegaEmbed === "function") {
      displayChart(vegaEmbed);
    } else {
      loadScript("vega")
        .then(() => loadScript("vega-lite"))
        .then(() => loadScript("vega-embed"))
        .catch(showError)
        .then(() => displayChart(vegaEmbed));
    }
  })({"config": {"view": {"continuousWidth": 400, "continuousHeight": 300}}, "layer": [{"mark": "line", "encoding": {"x": {"type": "nominal", "field": "Year"}, "y": {"type": "quantitative", "field": "Average Episode BPM", "scale": {"domain": [130, 140]}}}, "title": "A State of Trance - Annual Average BPM of Episode", "width": 600}, {"mark": {"type": "rule", "color": "red"}, "encoding": {"y": {"type": "quantitative", "field": "138"}}}], "data": {"name": "data-24d5fd95359d0348eac083943aa57f1d"}, "$schema": "https://vega.github.io/schema/vega-lite/v4.8.1.json", "datasets": {"data-24d5fd95359d0348eac083943aa57f1d": [{"Year": "2001", "Average Episode BPM": 137.34653042328043, "138": 138}, {"Year": "2002", "Average Episode BPM": 138.77037672527473, "138": 138}, {"Year": "2003", "Average Episode BPM": 137.87648184593183, "138": 138}, {"Year": "2004", "Average Episode BPM": 136.8379514048452, "138": 138}, {"Year": "2005", "Average Episode BPM": 135.9946882254463, "138": 138}, {"Year": "2006", "Average Episode BPM": 136.21986194104406, "138": 138}, {"Year": "2007", "Average Episode BPM": 135.31834901771512, "138": 138}, {"Year": "2008", "Average Episode BPM": 134.5739768988312, "138": 138}, {"Year": "2009", "Average Episode BPM": 134.84276103847634, "138": 138}, {"Year": "2010", "Average Episode BPM": 134.2873634011065, "138": 138}, {"Year": "2011", "Average Episode BPM": 133.38769823050973, "138": 138}, {"Year": "2012", "Average Episode BPM": 133.77641000308137, "138": 138}, {"Year": "2013", "Average Episode BPM": 134.89472557606408, "138": 138}, {"Year": "2014", "Average Episode BPM": 134.62926964078503, "138": 138}, {"Year": "2015", "Average Episode BPM": 133.21748777702336, "138": 138}, {"Year": "2016", "Average Episode BPM": 133.8357659060619, "138": 138}, {"Year": "2017", "Average Episode BPM": 133.83226986060524, "138": 138}, {"Year": "2018", "Average Episode BPM": 132.8617358100079, "138": 138}, {"Year": "2019", "Average Episode BPM": 133.39046580493476, "138": 138}, {"Year": "2020", "Average Episode BPM": 133.46879858547982, "138": 138}]}}, {"mode": "vega-lite"});
</script>
</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Straightforward enough. In the coming posts we'll do something similar, looking at the most-played artists and tracks each year.</p>

</div>
</div>
</div>
</div>]]></content><author><name></name></author><category term="asot" /><category term="bpm" /><summary type="html"><![CDATA[Tracking average episode BPM over time .. over the years.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://scottbrenner.github.io/asot-jupyter/images/annual-avg-bpm.png" /><media:content medium="image" url="https://scottbrenner.github.io/asot-jupyter/images/annual-avg-bpm.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Track Plays</title><link href="https://scottbrenner.github.io/asot-jupyter/asot/tracks/2020/05/16/track-plays.html" rel="alternate" type="text/html" title="Track Plays" /><published>2020-05-16T00:00:00-05:00</published><updated>2020-05-16T00:00:00-05:00</updated><id>https://scottbrenner.github.io/asot-jupyter/asot/tracks/2020/05/16/track-plays</id><content type="html" xml:base="https://scottbrenner.github.io/asot-jupyter/asot/tracks/2020/05/16/track-plays.html"><![CDATA[<!--
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: _notebooks/2020-05-16-track-plays.ipynb
-->

<div class="container" id="notebook-container">
        
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="Introduction">Introduction<a class="anchor-link" href="#Introduction"> </a></h2>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>How many unique tracks have been played on A State of Trance over the years? What's been played the most?</p>
<p>In this post, we'll examine track plays over time.</p>

</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="Getting-Started">Getting Started<a class="anchor-link" href="#Getting-Started"> </a></h2>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>First, some baseline analysis. Let's first figure out how many tracks played on A State of Trance are available on Spotify:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">tracks_counted</span> <span class="o">=</span> <span class="mi">0</span>

<span class="k">for</span> <span class="n">episode</span> <span class="ow">in</span> <span class="n">episodes</span><span class="p">:</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">track</span> <span class="ow">in</span> <span class="n">sp</span><span class="o">.</span><span class="n">album_tracks</span><span class="p">(</span><span class="n">episode</span><span class="p">[</span><span class="s1">&#39;uri&#39;</span><span class="p">])[</span><span class="s1">&#39;items&#39;</span><span class="p">]:</span>
            <span class="k">if</span> <span class="s2">&quot;a state of trance&quot;</span> <span class="ow">in</span> <span class="n">track</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span> <span class="ow">or</span> <span class="s2">&quot;- interview&quot;</span> <span class="ow">in</span> <span class="n">track</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">lower</span><span class="p">():</span>
                <span class="k">continue</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">tracks_counted</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="k">except</span><span class="p">:</span>
        <span class="k">pass</span>

<span class="nb">print</span><span class="p">(</span><span class="n">tracks_counted</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>17369
</pre>
</div>
</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Wow - 17,000+ total tracks have been played! Remember, as we learned in the <a href="https://scottbrenner.github.io/asot-jupyter/asot/bpm/2020/04/27/methodology.html">"Methodology" post</a> some episodes - especially early ones - are incomplete.</p>
<p>How many unique tracks? Get your regular expressions ready ..</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="kn">import</span> <span class="nn">re</span>

<span class="n">unique_tracks</span> <span class="o">=</span> <span class="nb">set</span><span class="p">()</span>

<span class="k">for</span> <span class="n">episode</span> <span class="ow">in</span> <span class="n">episodes</span><span class="p">:</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">track</span> <span class="ow">in</span> <span class="n">sp</span><span class="o">.</span><span class="n">album_tracks</span><span class="p">(</span><span class="n">episode</span><span class="p">[</span><span class="s1">&#39;uri&#39;</span><span class="p">])[</span><span class="s1">&#39;items&#39;</span><span class="p">]:</span>
            <span class="k">if</span> <span class="s2">&quot;a state of trance&quot;</span> <span class="ow">in</span> <span class="n">track</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span> <span class="ow">or</span> <span class="s2">&quot;- interview&quot;</span> <span class="ow">in</span> <span class="n">track</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">lower</span><span class="p">():</span>
                <span class="k">continue</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">unique_tracks</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">re</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="s2">&quot;[\(\[].*?[\)\]]&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">,</span> <span class="n">track</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">]))</span> <span class="c1"># Remove episode numbers from track names (ex. &#39;Eternity [ASOT 005]&#39;)</span>
    <span class="k">except</span><span class="p">:</span>
        <span class="k">pass</span>

<span class="nb">print</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">unique_tracks</span><span class="p">))</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>12722
</pre>
</div>
</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>As always, this is a "best guess" - an approximation.</p>

</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="Calculating">Calculating<a class="anchor-link" href="#Calculating"> </a></h2>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Let's crunch some numbers.</p>
<p>Which tracks have the most plays?</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">defaultdict</span>

<span class="n">tracks_counter</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>

<span class="k">for</span> <span class="n">episode</span> <span class="ow">in</span> <span class="n">episodes</span><span class="p">:</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">track</span> <span class="ow">in</span> <span class="n">sp</span><span class="o">.</span><span class="n">album_tracks</span><span class="p">(</span><span class="n">episode</span><span class="p">[</span><span class="s1">&#39;uri&#39;</span><span class="p">])[</span><span class="s1">&#39;items&#39;</span><span class="p">]:</span>
            <span class="k">if</span> <span class="s2">&quot;a state of trance&quot;</span> <span class="ow">in</span> <span class="n">track</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span> <span class="ow">or</span> <span class="s2">&quot;- interview&quot;</span> <span class="ow">in</span> <span class="n">track</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">lower</span><span class="p">():</span>
                <span class="k">continue</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">track_artist</span> <span class="o">=</span> <span class="n">track</span><span class="p">[</span><span class="s1">&#39;artists&#39;</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="s1">&#39;name&#39;</span><span class="p">]</span>
                <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">track</span><span class="p">[</span><span class="s1">&#39;artists&#39;</span><span class="p">])</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">:</span>
                    <span class="k">for</span> <span class="n">artist</span> <span class="ow">in</span> <span class="n">track</span><span class="p">[</span><span class="s1">&#39;artists&#39;</span><span class="p">][</span><span class="mi">1</span><span class="p">:]:</span>
                        <span class="n">track_artist</span> <span class="o">+=</span> <span class="s2">&quot; &amp; &quot;</span> <span class="o">+</span> <span class="n">artist</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">]</span>
                <span class="n">tracks_counter</span><span class="p">[</span><span class="n">track_artist</span> <span class="o">+</span> <span class="s1">&#39; - &#39;</span> <span class="o">+</span> <span class="n">re</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="s2">&quot;[\(\[].*?[\)\]]&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">,</span> <span class="n">track</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">])]</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="k">except</span><span class="p">:</span>
        <span class="k">pass</span>

<span class="n">top_tracks</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">tracks_counter</span><span class="o">.</span><span class="n">items</span><span class="p">(),</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">k_v</span><span class="p">:</span> <span class="n">k_v</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">reverse</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="Results">Results<a class="anchor-link" href="#Results"> </a></h2>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Let's see what we've got!</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="k">for</span> <span class="n">track</span> <span class="ow">in</span> <span class="n">top_tracks</span><span class="p">[:</span><span class="mi">25</span><span class="p">]:</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">track</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>(&#39;Rising Star - Clear Blue Moon  - Original Mix&#39;, 10)
(&#39;Gareth Emery &amp; STANDERWICK &amp; HALIENE - Saving Light &#39;, 10)
(&#39;Solid Globe - North Pole  - Original Mix&#39;, 9)
(&#39;Active Sight - The Search For Freedom  - Original Mix&#39;, 9)
(&#39;EnMass - CQ  - Original Mix&#39;, 9)
(&#39;Jonas Steur - Castamara  - Original Mix&#39;, 9)
(&#39;Marco V - Simulated  - Original Mix&#39;, 8)
(&#39;Rank 1 - Awakening  - Original Mix&#39;, 8)
(&#39;Solarstone &amp; Scott Bond - 3rd Earth  - Original Mix&#39;, 8)
(&#39;Pulser - My Religion  - Original Mix&#39;, 8)
(&#39;Paul van Dyk &amp; Hemstock &amp; Jennings - Nothing But You  - Original Mix&#39;, 8)
(&#34;Perry O&#39;Neil - Wave Force  - Original Mix&#34;, 8)
(&#39;Re:Locate - Rogue  - Original Mix&#39;, 8)
(&#39;Jose Amnesia &amp; Jennifer Rene - Louder  - Original Mix&#39;, 8)
(&#34;Armin van Buuren &amp; Ana Criado - I&#39;ll Listen  - Original Mix&#34;, 8)
(&#39;ID - ID &#39;, 8)
(&#39;RAM - RAMexico &#39;, 8)
(&#39;Cosmic Gate &amp; Forêt - Need To Feel Loved &#39;, 8)
(&#39;Solarstone - Seven Cities  - Armin van Buuren Remix&#39;, 7)
(&#39;Solarstone &amp; Scott Bond - Naked Angel  - Original Mix&#39;, 7)
(&#39;Roland Klinkenberg - Monday Groove  - Original Mix&#39;, 7)
(&#39;Solid Globe - Sahara  - Original Mix&#39;, 7)
(&#39;Adam White &amp; Andy Moor &amp; Whiteroom - The White Room  - Original Mix&#39;, 7)
(&#39;Robert Gitelman - Children Of The Sun  - Original Mix&#39;, 7)
(&#39;Interstate - I Found You  - Original Mix&#39;, 7)
</pre>
</div>
</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>In a crude graph:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">source</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="o">.</span><span class="n">from_dict</span><span class="p">(</span><span class="n">top_tracks</span><span class="p">[:</span><span class="mi">25</span><span class="p">])</span>

<span class="n">bars</span> <span class="o">=</span> <span class="n">alt</span><span class="o">.</span><span class="n">Chart</span><span class="p">(</span><span class="n">source</span><span class="p">)</span><span class="o">.</span><span class="n">mark_bar</span><span class="p">()</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span>
    <span class="n">x</span><span class="o">=</span><span class="n">alt</span><span class="o">.</span><span class="n">X</span><span class="p">(</span><span class="s1">&#39;1:Q&#39;</span><span class="p">,</span> <span class="n">title</span><span class="o">=</span><span class="s1">&#39;Plays&#39;</span><span class="p">),</span>
    <span class="n">y</span><span class="o">=</span><span class="n">alt</span><span class="o">.</span><span class="n">Y</span><span class="p">(</span><span class="s1">&#39;0:N&#39;</span><span class="p">,</span> <span class="n">sort</span><span class="o">=</span><span class="s1">&#39;-x&#39;</span><span class="p">,</span> <span class="n">title</span><span class="o">=</span><span class="s1">&#39;Track&#39;</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="n">alt</span><span class="o">.</span><span class="n">Axis</span><span class="p">(</span><span class="n">labels</span><span class="o">=</span><span class="kc">False</span><span class="p">)),</span>
<span class="p">)</span><span class="o">.</span><span class="n">properties</span><span class="p">(</span>
    <span class="n">title</span><span class="o">=</span><span class="s2">&quot;A State of Trance - Most-played tracks&quot;</span><span class="p">,</span>
    <span class="n">width</span><span class="o">=</span><span class="mi">500</span>
<span class="p">)</span>

<span class="n">text</span> <span class="o">=</span> <span class="n">alt</span><span class="o">.</span><span class="n">Chart</span><span class="p">(</span><span class="n">source</span><span class="p">)</span><span class="o">.</span><span class="n">mark_text</span><span class="p">(</span><span class="n">dx</span><span class="o">=-</span><span class="mi">350</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;white&#39;</span><span class="p">,</span> <span class="n">align</span><span class="o">=</span><span class="s1">&#39;left&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span>
    <span class="n">x</span><span class="o">=</span><span class="n">alt</span><span class="o">.</span><span class="n">X</span><span class="p">(</span><span class="s1">&#39;1:Q&#39;</span><span class="p">,</span> <span class="n">title</span><span class="o">=</span><span class="s1">&#39;Plays&#39;</span><span class="p">),</span>
    <span class="n">y</span><span class="o">=</span><span class="n">alt</span><span class="o">.</span><span class="n">Y</span><span class="p">(</span><span class="s1">&#39;0:N&#39;</span><span class="p">,</span> <span class="n">sort</span><span class="o">=</span><span class="s1">&#39;-x&#39;</span><span class="p">),</span>
    <span class="n">text</span><span class="o">=</span><span class="n">alt</span><span class="o">.</span><span class="n">Text</span><span class="p">(</span><span class="s1">&#39;0:N&#39;</span><span class="p">)</span>
<span class="p">)</span>

<span class="n">bars</span> <span class="o">+</span> <span class="n">text</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">

<div id="altair-viz-28f801cf23424af78a73499a88c1c0b0"></div>
<script type="text/javascript">
  (function(spec, embedOpt){
    let outputDiv = document.currentScript.previousElementSibling;
    if (outputDiv.id !== "altair-viz-28f801cf23424af78a73499a88c1c0b0") {
      outputDiv = document.getElementById("altair-viz-28f801cf23424af78a73499a88c1c0b0");
    }
    const paths = {
      "vega": "https://cdn.jsdelivr.net/npm//vega@5?noext",
      "vega-lib": "https://cdn.jsdelivr.net/npm//vega-lib?noext",
      "vega-lite": "https://cdn.jsdelivr.net/npm//vega-lite@4.8.1?noext",
      "vega-embed": "https://cdn.jsdelivr.net/npm//vega-embed@6?noext",
    };

    function loadScript(lib) {
      return new Promise(function(resolve, reject) {
        var s = document.createElement('script');
        s.src = paths[lib];
        s.async = true;
        s.onload = () => resolve(paths[lib]);
        s.onerror = () => reject(`Error loading script: ${paths[lib]}`);
        document.getElementsByTagName("head")[0].appendChild(s);
      });
    }

    function showError(err) {
      outputDiv.innerHTML = `<div class="error" style="color:red;">${err}</div>`;
      throw err;
    }

    function displayChart(vegaEmbed) {
      vegaEmbed(outputDiv, spec, embedOpt)
        .catch(err => showError(`Javascript Error: ${err.message}<br>This usually means there's a typo in your chart specification. See the javascript console for the full traceback.`));
    }

    if(typeof define === "function" && define.amd) {
      requirejs.config({paths});
      require(["vega-embed"], displayChart, err => showError(`Error loading script: ${err.message}`));
    } else if (typeof vegaEmbed === "function") {
      displayChart(vegaEmbed);
    } else {
      loadScript("vega")
        .then(() => loadScript("vega-lite"))
        .then(() => loadScript("vega-embed"))
        .catch(showError)
        .then(() => displayChart(vegaEmbed));
    }
  })({"config": {"view": {"continuousWidth": 400, "continuousHeight": 300}}, "layer": [{"mark": "bar", "encoding": {"x": {"type": "quantitative", "field": "1", "title": "Plays"}, "y": {"type": "nominal", "axis": {"labels": false}, "field": "0", "sort": "-x", "title": "Track"}}, "title": "A State of Trance - Most-played tracks", "width": 500}, {"mark": {"type": "text", "align": "left", "color": "white", "dx": -350}, "encoding": {"text": {"type": "nominal", "field": "0"}, "x": {"type": "quantitative", "field": "1", "title": "Plays"}, "y": {"type": "nominal", "field": "0", "sort": "-x"}}}], "data": {"name": "data-e0cb0000e3691fbde5afc2f6157b7097"}, "$schema": "https://vega.github.io/schema/vega-lite/v4.8.1.json", "datasets": {"data-e0cb0000e3691fbde5afc2f6157b7097": [{"0": "Rising Star - Clear Blue Moon  - Original Mix", "1": 10}, {"0": "Gareth Emery & STANDERWICK & HALIENE - Saving Light ", "1": 10}, {"0": "Solid Globe - North Pole  - Original Mix", "1": 9}, {"0": "Active Sight - The Search For Freedom  - Original Mix", "1": 9}, {"0": "EnMass - CQ  - Original Mix", "1": 9}, {"0": "Jonas Steur - Castamara  - Original Mix", "1": 9}, {"0": "Marco V - Simulated  - Original Mix", "1": 8}, {"0": "Rank 1 - Awakening  - Original Mix", "1": 8}, {"0": "Solarstone & Scott Bond - 3rd Earth  - Original Mix", "1": 8}, {"0": "Pulser - My Religion  - Original Mix", "1": 8}, {"0": "Paul van Dyk & Hemstock & Jennings - Nothing But You  - Original Mix", "1": 8}, {"0": "Perry O'Neil - Wave Force  - Original Mix", "1": 8}, {"0": "Re:Locate - Rogue  - Original Mix", "1": 8}, {"0": "Jose Amnesia & Jennifer Rene - Louder  - Original Mix", "1": 8}, {"0": "Armin van Buuren & Ana Criado - I'll Listen  - Original Mix", "1": 8}, {"0": "ID - ID ", "1": 8}, {"0": "RAM - RAMexico ", "1": 8}, {"0": "Cosmic Gate & For\u00eat - Need To Feel Loved ", "1": 8}, {"0": "Solarstone - Seven Cities  - Armin van Buuren Remix", "1": 7}, {"0": "Solarstone & Scott Bond - Naked Angel  - Original Mix", "1": 7}, {"0": "Roland Klinkenberg - Monday Groove  - Original Mix", "1": 7}, {"0": "Solid Globe - Sahara  - Original Mix", "1": 7}, {"0": "Adam White & Andy Moor & Whiteroom - The White Room  - Original Mix", "1": 7}, {"0": "Robert Gitelman - Children Of The Sun  - Original Mix", "1": 7}, {"0": "Interstate - I Found You  - Original Mix", "1": 7}]}}, {"mode": "vega-lite"});
</script>
</div>

</div>

</div>
</div>

</div>
    

</div>]]></content><author><name></name></author><category term="asot" /><category term="tracks" /><summary type="html"><![CDATA[Tracking track plays over time.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://scottbrenner.github.io/asot-jupyter/images/track-plays.png" /><media:content medium="image" url="https://scottbrenner.github.io/asot-jupyter/images/track-plays.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Artist Plays</title><link href="https://scottbrenner.github.io/asot-jupyter/asot/artists/2020/05/02/artist-plays.html" rel="alternate" type="text/html" title="Artist Plays" /><published>2020-05-02T00:00:00-05:00</published><updated>2020-05-02T00:00:00-05:00</updated><id>https://scottbrenner.github.io/asot-jupyter/asot/artists/2020/05/02/artist-plays</id><content type="html" xml:base="https://scottbrenner.github.io/asot-jupyter/asot/artists/2020/05/02/artist-plays.html"><![CDATA[<!--
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: _notebooks/2020-05-02-artist-plays.ipynb
-->

<div class="container" id="notebook-container">
        
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="Introduction">Introduction<a class="anchor-link" href="#Introduction"> </a></h2>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>How many unique artists have been played on A State of Trance over the years? Who's been played the most? And the least?</p>
<p>In this post, we'll examine artist plays over time.</p>

</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="Getting-Started">Getting Started<a class="anchor-link" href="#Getting-Started"> </a></h2>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>First, some baseline analysis. Let's first figure out how many tracks played on A State of Trance are available on Spotify:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">tracks_counted</span> <span class="o">=</span> <span class="mi">0</span>

<span class="k">for</span> <span class="n">episode</span> <span class="ow">in</span> <span class="n">episodes</span><span class="p">:</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">track</span> <span class="ow">in</span> <span class="n">sp</span><span class="o">.</span><span class="n">album_tracks</span><span class="p">(</span><span class="n">episode</span><span class="p">[</span><span class="s1">&#39;uri&#39;</span><span class="p">])[</span><span class="s1">&#39;items&#39;</span><span class="p">]:</span>
            <span class="k">if</span> <span class="s2">&quot;a state of trance&quot;</span> <span class="ow">in</span> <span class="n">track</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span> <span class="ow">or</span> <span class="s2">&quot;- interview&quot;</span> <span class="ow">in</span> <span class="n">track</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">lower</span><span class="p">():</span>
                <span class="k">continue</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">tracks_counted</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="k">except</span><span class="p">:</span>
        <span class="k">pass</span>

<span class="nb">print</span><span class="p">(</span><span class="n">tracks_counted</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>17311
</pre>
</div>
</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Wow - 17,000+ total <em>(not unique)</em> tracks have been played! Remember, as we learned in the <a href="https://scottbrenner.github.io/asot-jupyter/asot/bpm/2020/04/27/methodology.html">"Methodology" post</a> some episodes - especially early ones - are incomplete.</p>
<p>How many unique artists?</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">unique_artists</span> <span class="o">=</span> <span class="nb">set</span><span class="p">()</span>

<span class="k">for</span> <span class="n">episode</span> <span class="ow">in</span> <span class="n">episodes</span><span class="p">:</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">track</span> <span class="ow">in</span> <span class="n">sp</span><span class="o">.</span><span class="n">album_tracks</span><span class="p">(</span><span class="n">episode</span><span class="p">[</span><span class="s1">&#39;uri&#39;</span><span class="p">])[</span><span class="s1">&#39;items&#39;</span><span class="p">]:</span>
            <span class="k">if</span> <span class="s2">&quot;a state of trance&quot;</span> <span class="ow">in</span> <span class="n">track</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span> <span class="ow">or</span> <span class="s2">&quot;- interview&quot;</span> <span class="ow">in</span> <span class="n">track</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">lower</span><span class="p">():</span>
                <span class="k">continue</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">for</span> <span class="n">artist</span> <span class="ow">in</span> <span class="n">track</span><span class="p">[</span><span class="s1">&#39;artists&#39;</span><span class="p">]:</span>
                    <span class="n">unique_artists</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">artist</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">])</span>
    <span class="k">except</span><span class="p">:</span>
        <span class="k">pass</span>

<span class="nb">print</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">unique_artists</span><span class="p">))</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>4079
</pre>
</div>
</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>As always, this is a "best guess" - an approximation.</p>
<p>For the sake of tallying unique artists, we are treating collaborators as individuals. A track produced by "Artist A &amp; Artist B" is recorded here as a production by Artist A and Artist B invididually.</p>

</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="Calculating">Calculating<a class="anchor-link" href="#Calculating"> </a></h2>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Let's crunch some numbers.</p>
<p>Which artists have the most plays?</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">defaultdict</span>

<span class="n">artist_counter</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>

<span class="k">for</span> <span class="n">episode</span> <span class="ow">in</span> <span class="n">episodes</span><span class="p">:</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">track</span> <span class="ow">in</span> <span class="n">sp</span><span class="o">.</span><span class="n">album_tracks</span><span class="p">(</span><span class="n">episode</span><span class="p">[</span><span class="s1">&#39;uri&#39;</span><span class="p">])[</span><span class="s1">&#39;items&#39;</span><span class="p">]:</span>
            <span class="k">if</span> <span class="s2">&quot;a state of trance&quot;</span> <span class="ow">in</span> <span class="n">track</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span> <span class="ow">or</span> <span class="s2">&quot;- interview&quot;</span> <span class="ow">in</span> <span class="n">track</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">lower</span><span class="p">():</span>
                <span class="k">continue</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">for</span> <span class="n">artist</span> <span class="ow">in</span> <span class="n">track</span><span class="p">[</span><span class="s1">&#39;artists&#39;</span><span class="p">]:</span>
                    <span class="n">artist_counter</span><span class="p">[</span><span class="n">artist</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">]]</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="k">except</span><span class="p">:</span>
        <span class="k">pass</span>

<span class="n">top_artists</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">artist_counter</span><span class="o">.</span><span class="n">items</span><span class="p">(),</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">k_v</span><span class="p">:</span> <span class="n">k_v</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">reverse</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Alright, let's see the top 25 in a graph..</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">source</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="o">.</span><span class="n">from_dict</span><span class="p">(</span><span class="n">top_artists</span><span class="p">[:</span><span class="mi">25</span><span class="p">])</span>

<span class="n">bars</span> <span class="o">=</span> <span class="n">alt</span><span class="o">.</span><span class="n">Chart</span><span class="p">(</span><span class="n">source</span><span class="p">)</span><span class="o">.</span><span class="n">mark_bar</span><span class="p">()</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span>
    <span class="n">x</span><span class="o">=</span><span class="n">alt</span><span class="o">.</span><span class="n">X</span><span class="p">(</span><span class="s1">&#39;1:Q&#39;</span><span class="p">,</span> <span class="n">title</span><span class="o">=</span><span class="s1">&#39;Plays&#39;</span><span class="p">),</span>
    <span class="n">y</span><span class="o">=</span><span class="n">alt</span><span class="o">.</span><span class="n">Y</span><span class="p">(</span><span class="s1">&#39;0:N&#39;</span><span class="p">,</span> <span class="n">sort</span><span class="o">=</span><span class="s1">&#39;-x&#39;</span><span class="p">,</span> <span class="n">title</span><span class="o">=</span><span class="s1">&#39;Artist&#39;</span><span class="p">)</span>
<span class="p">)</span><span class="o">.</span><span class="n">properties</span><span class="p">(</span>
    <span class="n">title</span><span class="o">=</span><span class="s2">&quot;A State of Trance - Most-played artists&quot;</span><span class="p">,</span>
    <span class="n">width</span><span class="o">=</span><span class="mi">600</span>
<span class="p">)</span>

<span class="n">text</span> <span class="o">=</span> <span class="n">bars</span><span class="o">.</span><span class="n">mark_text</span><span class="p">(</span>
    <span class="n">align</span><span class="o">=</span><span class="s1">&#39;left&#39;</span><span class="p">,</span>
    <span class="n">baseline</span><span class="o">=</span><span class="s1">&#39;middle&#39;</span><span class="p">,</span>
    <span class="n">dx</span><span class="o">=</span><span class="mi">3</span>  <span class="c1"># Nudges text to right so it doesn&#39;t appear on top of the bar</span>
<span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span>
    <span class="n">text</span><span class="o">=</span><span class="s1">&#39;1:Q&#39;</span>
<span class="p">)</span>

<span class="n">bars</span> <span class="o">+</span> <span class="n">text</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">

<div id="altair-viz-a39d4ddaa54945d49c8643364bde9973"></div>
<script type="text/javascript">
  (function(spec, embedOpt){
    let outputDiv = document.currentScript.previousElementSibling;
    if (outputDiv.id !== "altair-viz-a39d4ddaa54945d49c8643364bde9973") {
      outputDiv = document.getElementById("altair-viz-a39d4ddaa54945d49c8643364bde9973");
    }
    const paths = {
      "vega": "https://cdn.jsdelivr.net/npm//vega@5?noext",
      "vega-lib": "https://cdn.jsdelivr.net/npm//vega-lib?noext",
      "vega-lite": "https://cdn.jsdelivr.net/npm//vega-lite@4.8.1?noext",
      "vega-embed": "https://cdn.jsdelivr.net/npm//vega-embed@6?noext",
    };

    function loadScript(lib) {
      return new Promise(function(resolve, reject) {
        var s = document.createElement('script');
        s.src = paths[lib];
        s.async = true;
        s.onload = () => resolve(paths[lib]);
        s.onerror = () => reject(`Error loading script: ${paths[lib]}`);
        document.getElementsByTagName("head")[0].appendChild(s);
      });
    }

    function showError(err) {
      outputDiv.innerHTML = `<div class="error" style="color:red;">${err}</div>`;
      throw err;
    }

    function displayChart(vegaEmbed) {
      vegaEmbed(outputDiv, spec, embedOpt)
        .catch(err => showError(`Javascript Error: ${err.message}<br>This usually means there's a typo in your chart specification. See the javascript console for the full traceback.`));
    }

    if(typeof define === "function" && define.amd) {
      requirejs.config({paths});
      require(["vega-embed"], displayChart, err => showError(`Error loading script: ${err.message}`));
    } else if (typeof vegaEmbed === "function") {
      displayChart(vegaEmbed);
    } else {
      loadScript("vega")
        .then(() => loadScript("vega-lite"))
        .then(() => loadScript("vega-embed"))
        .catch(showError)
        .then(() => displayChart(vegaEmbed));
    }
  })({"config": {"view": {"continuousWidth": 400, "continuousHeight": 300}}, "layer": [{"mark": "bar", "encoding": {"x": {"type": "quantitative", "field": "1", "title": "Plays"}, "y": {"type": "nominal", "field": "0", "sort": "-x", "title": "Artist"}}, "title": "A State of Trance - Most-played artists", "width": 600}, {"mark": {"type": "text", "align": "left", "baseline": "middle", "dx": 3}, "encoding": {"text": {"type": "quantitative", "field": "1"}, "x": {"type": "quantitative", "field": "1", "title": "Plays"}, "y": {"type": "nominal", "field": "0", "sort": "-x", "title": "Artist"}}, "title": "A State of Trance - Most-played artists", "width": 600}], "data": {"name": "data-4e59e805ed06f2eb0e688ef43db64cb4"}, "$schema": "https://vega.github.io/schema/vega-lite/v4.8.1.json", "datasets": {"data-4e59e805ed06f2eb0e688ef43db64cb4": [{"0": "Armin van Buuren", "1": 1210}, {"0": "Cosmic Gate", "1": 251}, {"0": "Markus Schulz", "1": 232}, {"0": "Gareth Emery", "1": 230}, {"0": "Aly & Fila", "1": 224}, {"0": "Orjan Nilsen", "1": 210}, {"0": "Andrew Rayel", "1": 206}, {"0": "Alex M.O.R.P.H.", "1": 184}, {"0": "Giuseppe Ottaviani", "1": 182}, {"0": "John O'Callaghan", "1": 163}, {"0": "Kyau & Albert", "1": 160}, {"0": "Solarstone", "1": 159}, {"0": "Ferry Corsten", "1": 143}, {"0": "Christina Novelli", "1": 140}, {"0": "Andy Moor", "1": 139}, {"0": "Dash Berlin", "1": 133}, {"0": "Rank 1", "1": 127}, {"0": "GAIA", "1": 127}, {"0": "MaRLo", "1": 127}, {"0": "Emma Hewitt", "1": 118}, {"0": "Heatbeat", "1": 116}, {"0": "Ben Gold", "1": 115}, {"0": "The Thrillseekers", "1": 114}, {"0": "Ronski Speed", "1": 111}, {"0": "Allen Watts", "1": 111}]}}, {"mode": "vega-lite"});
</script>
</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>First place goes to the big man himself of course. Keep in mind we're counting a remix of an artist's track as a play for that artist.</p>
<p>From our numbers, a track that credits Armin van Buuren has been played 1210 times across 960 episodes. From this, we can say the average episode of A State of Trance has</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">top_artists</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">/</span> <span class="nb">len</span><span class="p">(</span><span class="n">episodes</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">



<div class="output_text output_subarea output_execute_result">
<pre>1.2604166666666667</pre>
</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>tracks produced by Armin van Buuren in some form or another, which is totally useless to know.</p>
<p>Earlier we found 17,000+ total tracks played from 4000+ unique artists based on what's currently available on Spotify. How many artists have been played exactly once?</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">artists_played_once</span> <span class="o">=</span> <span class="mi">0</span>
<span class="n">one_hit_wonders</span> <span class="o">=</span> <span class="p">[]</span>

<span class="k">for</span> <span class="n">artist</span><span class="p">,</span> <span class="n">plays</span> <span class="ow">in</span> <span class="n">artist_counter</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
    <span class="k">if</span> <span class="n">plays</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
        <span class="n">one_hit_wonders</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">artist</span><span class="p">)</span>
        <span class="n">artists_played_once</span> <span class="o">+=</span> <span class="mi">1</span>

<span class="nb">print</span><span class="p">(</span><span class="n">artists_played_once</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>1769
</pre>
</div>
</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Seems like quite a bit, what percentage is that?</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="nb">print</span><span class="p">(</span><span class="mi">100</span> <span class="o">*</span> <span class="n">artists_played_once</span> <span class="o">/</span> <span class="nb">len</span><span class="p">(</span><span class="n">unique_artists</span><span class="p">))</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>43.36847266486884
</pre>
</div>
</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>From the data available on Spotify, we can say 43% of artists played on A State of Trance were played exactly once. A full list of artists played once appears below:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="nb">print</span><span class="p">(</span><span class="nb">sorted</span><span class="p">(</span><span class="n">one_hit_wonders</span><span class="p">))</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>[&#39;16BL&#39;, &#39;2Symmetry&#39;, &#39;3 Amigos&#39;, &#39;3 Colours&#39;, &#39;3 Of Life&#39;, &#39;4 Mal&#39;, &#39;4Mal&#39;, &#39;7 Baltic&#39;, &#39;8.02&#39;, &#39;A Lost Connection&#39;, &#39;A&amp;Z&#39;, &#39;AA Meeting&#39;, &#39;ABHISHEK Y2V&#39;, &#39;AMTM&#39;, &#39;ANDO&#39;, &#39;ANIMA!&#39;, &#39;ANUQRAM&#39;, &#39;ANVY&#39;, &#39;ASCO&#39;, &#39;ATHOM&#39;, &#39;ATN&#39;, &#39;AWD&#39;, &#39;Abaze&#39;, &#39;Abraham Leoga&#39;, &#39;Ace Ventura&#39;, &#39;Active State&#39;, &#39;Adagio Sensus&#39;, &#39;Adaja&#39;, &#39;Adam Coppack&#39;, &#39;Adam Deane&#39;, &#39;Adam K &amp; Soha&#39;, &#39;Adam Lambert&#39;, &#39;Adam Lavel&#39;, &#39;Adam Lindburg&#39;, &#39;Adam Sheridan&#39;, &#39;Adam Sky&#39;, &#39;Adam Sobiech&#39;, &#39;Adam Tas&#39;, &#39;Adiva&#39;, &#39;Adrian Blue&#39;, &#39;Adrian Font&#39;, &#39;Adrian&amp;Raz&#39;, &#39;Adriana Thorpe&#39;, &#39;Advanced&#39;, &#39;Adymus&#39;, &#39;Aero 21&#39;, &#39;Aether&#39;, &#39;After Midnight&#39;, &#39;AfterU&#39;, &#39;Against The Grain&#39;, &#39;Aguada&#39;, &#39;Ahmed Atef&#39;, &#39;Ahorn&#39;, &#39;Aiden Arie&#39;, &#39;Aiera &amp; Osiris&#39;, &#39;Aimo&#39;, &#39;AirLab7&#39;, &#39;Airsun&#39;, &#39;Airtight&#39;, &#39;Airway 7&#39;, &#39;Aisling Jarvis&#39;, &#39;Aki Bergen &amp; Richter&#39;, &#39;Akku&#39;, &#39;Aknael &amp; Bekeela&#39;, &#39;Aknow&#39;, &#39;Alae Khaldi&#39;, &#39;Alan Banks&#39;, &#39;Alan Stott&#39;, &#39;Alan Wyse&#39;, &#39;Albert Keyn&#39;, &#39;Albion&#39;, &#39;Alco Rhyhtm&#39;, &#39;Aldo Henrycho&#39;, &#39;Aleksey Gunichev&#39;, &#39;Aleksey Sladkov&#39;, &#39;Alex&#39;, &#39;Alex Arestegui&#39;, &#39;Alex Djohn&#39;, &#39;Alex Fisher&#39;, &#39;Alex Humphreys&#39;, &#39;Alex John&#39;, &#39;Alex M.O.R.P.H. &amp; RAM&#39;, &#39;Alex M.O.R.P.H. feat. Sylvia Tosun&#39;, &#39;Alex Piletski&#39;, &#39;Alex Staltari&#39;, &#39;Alex Wackii&#39;, &#39;AlexMo&#39;, &#39;Alexan&#39;, &#39;Alexander Chekomasov&#39;, &#39;Alhena&#39;, &#39;Alias&#39;, &#39;Alice Berg&#39;, &#39;Alicia Madison&#39;, &#39;Alikast&#39;, &#39;Allam&#39;, &#39;Allan Morrow&#39;, &#39;Allen&#39;, &#39;Allen Belg&#39;, &#39;Allende&#39;, &#39;Allion&#39;, &#39;Allé&#39;, &#39;Almar&#39;, &#39;Alter Breed&#39;, &#39;Alucard&#39;, &#39;Alvin&#39;, &#39;Alyx Ander&#39;, &#39;Amanda Jamison&#39;, &#39;Amax DJ&#39;, &#39;Amba Sheperd&#39;, &#39;Ambassador&#39;, &#39;Ameera&#39;, &#39;Amersy&#39;, &#39;Amir Atme&#39;, &#39;Amo R&#39;, &#39;Amy J Price&#39;, &#39;Analogue Sound Department&#39;, &#39;Anbass&#39;, &#39;Ancient Mind&#39;, &#39;Anden&#39;, &#39;Anden State&#39;, &#39;Anders Duvald&#39;, &#39;Andre Sobota&#39;, &#39;Andrea Faustinelli&#39;, &#39;Andrea Saenz&#39;, &#39;Andretta&#39;, &#39;Andrew Benson&#39;, &#39;Andrew Candid&#39;, &#39;Andrew Cash&#39;, &#39;Andrew Henry&#39;, &#39;Andrew Langston&#39;, &#39;Andrew Mirt&#39;, &#39;Andrew Vass&#39;, &#39;Andrey Pashkov&#39;, &#39;André&#39;, &#39;André Sobota&#39;, &#39;Andski&#39;, &#39;Andy Bianchini&#39;, &#39;Andy Ruddy&#39;, &#39;Angel&#39;, &#39;Angel Ace&#39;, &#39;Angelique&#39;, &#39;Angie&#39;, &#39;Animato&#39;, &#39;Ankit Sharda&#39;, &#39;Ann Bailey&#39;, &#39;Anna Lee&#39;, &#39;Anna Toth&#39;, &#39;Anomaly&#39;, &#39;Another World&#39;, &#39;Anova&#39;, &#39;Anry&#39;, &#39;Anthanasia 2&#39;, &#39;Anthony Cordell&#39;, &#39;Anthony Ragni&#39;, &#39;Anthony S&#39;, &#39;Anthony Waldhorn&#39;, &#39;Antonia from Jets Overhead&#39;, &#39;Apollo Nash&#39;, &#39;Apple One&#39;, &#39;Approaching Black&#39;, &#39;Aquilo&#39;, &#39;Aradeo&#39;, &#39;Arc In The Sky&#39;, &#39;Architect&#39;, &#39;Arctic Lake&#39;, &#39;Aressa&#39;, &#39;Ariel &amp; Danilo&#39;, &#39;Arjans&#39;, &#39;Ark Planet&#39;, &#39;Arpiction&#39;, &#39;Arrival &amp; Fonar&#39;, &#39;Ars&#39;, &#39;Artra&#39;, &#39;Arty &amp; Mat Zo&#39;, &#39;Aryas&#39;, &#39;Arys&#39;, &#39;Aryue&#39;, &#39;As One&#39;, &#39;Asbjørn&#39;, &#39;Ashley Bradbury&#39;, &#39;Ashley Smith&#39;, &#39;Asia Whiteacre&#39;, &#39;Askery&#39;, &#39;Aspiration&#39;, &#39;Asteroid&#39;, &#39;Astral Projection&#39;, &#39;Astrid Suryanto&#39;, &#39;Astrosphere&#39;, &#39;Ataraxia&#39;, &#39;Atlantia&#39;, &#39;Atmosfearz&#39;, &#39;Audiko&#39;, &#39;Avalon&#39;, &#39;Avari&#39;, &#39;Avatar One&#39;, &#39;Aveo&#39;, &#39;Avergaint&#39;, &#39;Aylin&#39;, &#39;Azotti&#39;, &#39;Azzido Da Bass&#39;, &#39;B. Gheorghe&#39;, &#39;BBSOUND&#39;, &#39;BORDERLESS&#39;, &#39;BRKLYN&#39;, &#39;Backbeat&#39;, &#39;Badlands&#39;, &#39;Balearia&#39;, &#39;Bariuz&#39;, &#39;Barry Connell&#39;, &#39;Bart Skils&#39;, &#39;Bas van Essen&#39;, &#39;Bassbin Twins&#39;, &#39;Bassjackers&#39;, &#39;Bazooka&#39;, &#39;Beatman &amp; Ludmilla&#39;, &#39;BeeGee&#39;, &#39;Beltek&#39;, &#39;Ben Gold Remix&#39;, &#39;Benicio&#39;, &#39;Benjamin Bates&#39;, &#39;Benjani&#39;, &#39;Bent&#39;, &#39;Benya&#39;, &#39;Benz &amp; MD&#39;, &#39;Bev Wild&#39;, &#39;Big Top&#39;, &#39;Bixx&#39;, &#39;Bizzare Contact&#39;, &#39;Björn Niclas&#39;, &#39;Black &amp; Blue&#39;, &#39;Black XS&#39;, &#39;Blair Bitch&#39;, &#39;Blasterjaxx&#39;, &#39;Blood Groove&#39;, &#39;Blood Groove and Kikis&#39;, &#39;BluSkay&#39;, &#39;Blue Horizon&#39;, &#39;Blue Manta&#39;, &#39;Blue Silence&#39;, &#39;Blue5even&#39;, &#39;Blueberg&#39;, &#39;Bluefire&#39;, &#39;Bobak&#39;, &#39;Bodyrox&#39;, &#39;Bolier&#39;, &#39;Boom&#39;, &#39;Boombastix&#39;, &#39;Boosta&#39;, &#39;Born 87&#39;, &#39;Boss@nova&#39;, &#39;Bowdidge&#39;, &#39;Bowdidge &amp; Taylor&#39;, &#39;Boxer&#39;, &#39;Boxer &amp; Forbes&#39;, &#39;Braiman&#39;, &#39;Braiman &amp; Falcon&#39;, &#39;Brando&#39;, &#39;Brandt&#39;, &#39;Brave&#39;, &#39;Breathe Carolina&#39;, &#39;Breeder&#39;, &#39;Brian&#39;, &#39;Brian Cameron&#39;, &#39;Brian Laruso&#39;, &#39;Brigitta&#39;, &#39;Britty&#39;, &#39;Brooke Tomlinson&#39;, &#39;Brothers Funk&#39;, &#39;Bruce Cullen&#39;, &#39;Brute Force&#39;, &#39;Bryan Summerville&#39;, &#39;Burak &amp; Emre&#39;, &#39;C-Base&#39;, &#39;C-Jay&#39;, &#39;C.J.Seven&#39;, &#39;CADE&#39;, &#39;CHRISTON&#39;, &#39;CJ Arthur&#39;, &#39;CRW&#39;, &#39;CVNT5&#39;, &#39;CYA&#39;, &#39;Cadence&#39;, &#39;Callisto&#39;, &#39;Calvin Logue&#39;, &#39;Cam Melnyk&#39;, &#39;Canberra&#39;, &#39;Capa (Official)&#39;, &#39;Cara Salimando&#39;, &#39;Carah Faye&#39;, &#39;Carl Crellin&#39;, &#39;Carlos Martz&#39;, &#39;Carly Burns&#39;, &#39;Carol Lee&#39;, &#39;Caroline Harrison&#39;, &#39;Cary Nokey&#39;, &#39;Cassidy Ford&#39;, &#39;Catalyst&#39;, &#39;Cave&#39;, &#39;CeCe Peniston&#39;, &#39;Celauro&#39;, &#39;Cell X&#39;, &#39;Cenk Basaran&#39;, &#39;Centre&#39;, &#39;Cern&#39;, &#39;Cesar Lugo&#39;, &#39;Chab&#39;, &#39;Changer&#39;, &#39;Charles MCThorn&#39;, &#39;Charlie White&#39;, &#39;Charmy&#39;, &#39;Chelsea Lee&#39;, &#39;Cherry&#39;, &#39;Chloe Stamp&#39;, &#39;Choopie&#39;, &#39;Chris Antoine&#39;, &#39;Chris Callado&#39;, &#39;Chris Cockerill&#39;, &#39;Chris Giuliano&#39;, &#39;Chris James&#39;, &#39;Chris North&#39;, &#39;Chris Reece&#39;, &#39;Chris Severe&#39;, &#39;Christian Carcamo&#39;, &#39;Christian K.&#39;, &#39;Christian Zechner&#39;, &#39;Christina Novell&#39;, &#39;Christopher Norman&#39;, &#39;Christopher Tin&#39;, &#39;CiDiAN&#39;, &#39;Ciaran Dolan&#39;, &#39;Cirillo&#39;, &#39;Cla6&#39;, &#39;Claessen&#39;, &#39;Clancy&#39;, &#39;Clara Sofie&#39;, &#39;Claudinho Brasil&#39;, &#39;Clay C&#39;, &#39;Cloudbreak&#39;, &#39;Cloudriver&#39;, &#39;Coax&#39;, &#39;Coca &amp; Villa&#39;, &#39;Codeko&#39;, &#39;Coenraad&#39;, &#39;Coexist&#39;, &#39;Cold Face&#39;, &#39;Cole Plante&#39;, &#39;Coll&#39;, &#39;Colonial&#39;, &#39;Coming Soon&#39;, &#39;Con Phillips&#39;, &#39;Core &amp; Sørensen&#39;, &#39;Corey Andrews&#39;, &#39;Corey James&#39;, &#39;Cornelis Van Dijk&#39;, &#39;Cory Friesenhan&#39;, &#39;Cosmic Blueprint&#39;, &#39;Cosmicman&#39;, &#39;Cosmithex&#39;, &#39;Cosmo &amp; Skoro&#39;, &#39;Cosmo Kid&#39;, &#39;Costa Pantazis&#39;, &#39;Craig-O&#39;, &#39;Cristian Ketelaars&#39;, &#39;Crossover&#39;, &#39;Crusy&#39;, &#39;Cygnus X1&#39;, &#39;Cylum&#39;, &#39;Cymatics&#39;, &#39;D&amp;W&#39;, &#34;D&#39;Jaeger&#34;, &#39;D-Line&#39;, &#39;D. Ghioc&#39;, &#39;D.O.D&#39;, &#39;D:Folt&#39;, &#39;DJ AMO&#39;, &#39;DJ Aligator&#39;, &#39;DJ Dazzle&#39;, &#39;DJ Dean&#39;, &#39;DJ Dream&#39;, &#39;DJ Fred Numf&#39;, &#39;DJ Genix&#39;, &#39;DJ Ghost&#39;, &#39;DJ Halperin&#39;, &#39;DJ Jan&#39;, &#39;DJ Kim&#39;, &#39;DJ Manta&#39;, &#39;DJ Nukem&#39;, &#39;DJ Observer&#39;, &#39;DJ Preach&#39;, &#39;DJ Rap&#39;, &#39;DJ Shog&#39;, &#39;DJ Tommyboy&#39;, &#39;DJ Tostie&#39;, &#39;DJ Wag&#39;, &#39;DR. DRTY&#39;, &#39;Da Others&#39;, &#39;Daimy Lotus&#39;, &#39;Dallas Superstars&#39;, &#39;Damae&#39;, &#39;Dan Ginolfi&#39;, &#39;Dan Reaves &amp; Niels Von Ahorn&#39;, &#39;Dan Sanfilippo&#39;, &#39;Dani Avramov&#39;, &#39;Dani Boden&#39;, &#39;Daniel Baron&#39;, &#39;Daniel Blanks&#39;, &#39;Daniel Etienne&#39;, &#39;Daniel Paul Davis&#39;, &#39;Daniel Summers&#39;, &#39;Daniel Waanrooy&#39;, &#39;Danny Cullen&#39;, &#39;Danny Loko&#39;, &#39;Danny Ocean&#39;, &#39;Danny Young&#39;, &#39;Dany Dazano&#39;, &#39;Dany G&#39;, &#39;Danyella&#39;, &#39;Danyka Nedeau&#39;, &#39;Danza Violento&#39;, &#39;Danzfolk&#39;, &#39;Darius&#39;, &#39;Darius Romanowski&#39;, &#39;Dark Monks&#39;, &#39;Dark Moon&#39;, &#39;Darkness Falls&#39;, &#34;Darren O&#39;Brien&#34;, &#39;Dasha&#39;, &#39;Datt&#39;, &#39;Dave Blackman&#39;, &#39;Dave Dowsett&#39;, &#39;Dave Leyrock&#39;, &#39;Dave Nadz&#39;, &#39;Dave Pearce&#39;, &#39;David&#39;, &#39;David Amo &amp; Julio Navas&#39;, &#39;David Julien&#39;, &#39;Davy Van Eynde&#39;, &#39;Dawnseekers&#39;, &#39;Daïgon&#39;, &#39;DeColita&#39;, &#39;Deathmind&#39;, &#39;Deedrah&#39;, &#39;Deep Dish&#39;, &#39;Deep Fog&#39;, &#39;Deep Orbit&#39;, &#39;Delta One&#39;, &#39;Delta-S&#39;, &#39;Denga vs. Manus&#39;, &#39;Denis Airwave&#39;, &#39;Denis Karpinsky&#39;, &#39;Denis Neeve&#39;, &#39;Denis Rivera&#39;, &#39;Dennis Eshel&#39;, &#39;Dennis Kruissen&#39;, &#39;Deorro&#39;, &#39;Der Mystik&#39;, &#39;Devon Colombage&#39;, &#39;DiVasco&#39;, &#39;Diaz&#39;, &#39;Digital Blues&#39;, &#39;Digital Dreamerz&#39;, &#39;Digital Horizon&#39;, &#39;Digital Phaze&#39;, &#39;Digital Vision&#39;, &#39;Dilara&#39;, &#39;Dimitri Vangelis &amp; Wyman&#39;, &#39;Dirty South&#39;, &#39;Dirty Vegas&#39;, &#39;Dis Play&#39;, &#39;Disco Citizens&#39;, &#39;Disco Killerz&#39;, &#39;Discodyne&#39;, &#39;Disfunktion &amp; Husman&#39;, &#39;Diskomo&#39;, &#39;Diversion&#39;, &#39;Division Zero&#39;, &#39;Dj Mystic&#39;, &#39;Djiva&#39;, &#39;Dmitriy Kuznetsov&#39;, &#39;Dmitry Bessonov&#39;, &#39;Dmitry Federov&#39;, &#39;Dmitry Golban&#39;, &#39;Dom Youdan&#39;, &#39;Dominic Manns&#39;, &#39;Donny Mac&#39;, &#39;Dory Badawi&#39;, &#39;Dr Willis&#39;, &#39;Dr. Willis&#39;, &#39;Dragana&#39;, &#39;Dragon and Jontron&#39;, &#39;Dreamlife&#39;, &#39;Dreamseekers&#39;, &#39;Drew Ryn&#39;, &#39;DubVision&#39;, &#39;Durs&#39;, &#39;Dustin Hussain&#39;, &#39;Dymos&#39;, &#39;Dynamic Emotion&#39;, &#39;Dynamic Sense&#39;, &#39;E&amp;G&#39;, &#39;E.T Project&#39;, &#39;ESSEX&#39;, &#39;Earthbound&#39;, &#39;Earthspirit&#39;, &#39;East &amp; Atlas&#39;, &#39;Econu&#39;, &#39;Eddie Lung&#39;, &#39;Edun&#39;, &#39;Egera&#39;, &#39;Eide&#39;, &#39;Eireann Wax&#39;, &#39;Ekon&#39;, &#39;El&#39;, &#39;El Cortez&#39;, &#39;Electric Pulse&#39;, &#39;Electric Traveller&#39;, &#39;Electronic Nova&#39;, &#39;Elias B.&#39;, &#39;Ell-Er&#39;, &#39;Elle Ve&#39;, &#39;Ellez Ria&#39;, &#39;Elucidus&#39;, &#39;Elyes Karray&#39;, &#39;Emanuele Congeddu&#39;, &#39;Emery&#39;, &#39;Emi&#39;, &#39;Emi Jarvi&#39;, &#39;Emilio Fernandez&#39;, &#39;Emily Harder&#39;, &#39;Emily Vaughn&#39;, &#39;Eminence&#39;, &#39;Emma Gillespie&#39;, &#39;Emotional Horizons&#39;, &#39;Emporium&#39;, &#39;En-Motion&#39;, &#39;Endless Blue&#39;, &#39;Envy&#39;, &#39;Enya Angel&#39;, &#39;Enyo Giove&#39;, &#39;Epica&#39;, &#39;Epsilon 9&#39;, &#39;Erick Strong&#39;, &#39;Erika K&#39;, &#39;Erly Tepshi&#39;, &#39;Eshericks&#39;, &#39;Espen Lorentzen&#39;, &#39;Essonita&#39;, &#39;Etasonic&#39;, &#39;Ethillas&#39;, &#39;Eva Pavlova&#39;, &#39;Evan Kendricks&#39;, &#39;Evan London&#39;, &#39;Evan Pearce&#39;, &#39;Evave&#39;, &#39;Evelio&#39;, &#39;Evelyn&#39;, &#39;Ever Burn&#39;, &#39;Evil Sardine&#39;, &#39;Evin Skye&#39;, &#39;Ex-Driver&#39;, &#39;Exertion&#39;, &#39;Exirninds&#39;, &#39;Exit&#39;, &#39;ExoSun&#39;, &#39;F-6&#39;, &#39;F.U.S.E.&#39;, &#39;FACEPALM&#39;, &#39;FB&#39;, &#39;FERR&#39;, &#39;Fadios&#39;, &#39;Fady&#39;, &#39;Fafaq&#39;, &#39;Fallen Skies&#39;, &#39;Far &amp; Away&#39;, &#39;Faraway Project&#39;, &#39;Farb&#39;, &#39;Farra&#39;, &#39;Fatkid&#39;, &#39;Fergie &amp; Sadrian&#39;, &#39;Ferry&#39;, &#39;Fierce&#39;, &#39;Fifth Dimension&#39;, &#39;Filterheads&#39;, &#39;Final Aeon&#39;, &#39;Fingerling&#39;, &#39;Finlay&#39;, &#39;Fiona Reid&#39;, &#39;Firebeatz&#39;, &#39;First&#39;, &#39;First &amp; Andre Cruiser&#39;, &#39;Fisical Project&#39;, &#39;Fix To Fax&#39;, &#39;Flatdisk&#39;, &#39;FloE&#39;, &#39;Floor Divisions&#39;, &#39;Floria Ambra&#39;, &#39;Fluir&#39;, &#39;Flying Decibels&#39;, &#39;Fokko Versloot&#39;, &#39;Foot&#39;, &#39;Forerunners&#39;, &#39;Forion&#39;, &#39;Foundry&#39;, &#39;Franco Riccobaldi&#39;, &#39;Frank Dattilo&#39;, &#39;Frank T.R.A.X.&#39;, &#39;Frank Watson&#39;, &#39;Franz&#39;, &#39;Fredd Moz&#39;, &#39;Fredda. L&#39;, &#39;Fredrik Miller&#39;, &#39;FreeFall&#39;, &#39;Freek Geuze&#39;, &#39;Freelancer&#39;, &#39;Freigeist&#39;, &#39;Freischwimmer&#39;, &#39;French Skies&#39;, &#39;Frog &amp; Derb&#39;, &#39;Frontliner&#39;, &#39;Frost&#39;, &#39;Frost &amp; Maron&#39;, &#39;Funkagenda&#39;, &#39;Furkan Senol&#39;, &#39;Future Disciple&#39;, &#39;Futuristic Polar Bears&#39;, &#39;Fyrsta&#39;, &#39;G-Mark&#39;, &#39;G-Phaxe&#39;, &#39;G-Tek&#39;, &#39;G.D.&#39;, &#39;GMS&#39;, &#39;GQ&#39;, &#39;Gabriel Lukosz&#39;, &#39;Garrido&#39;, &#39;Garrido &amp; Skehan&#39;, &#39;Gary Proud&#39;, &#39;Gat Decor&#39;, &#39;Gate&#39;, &#39;Gate 4&#39;, &#39;Gather&#39;, &#39;Gaudium&#39;, &#39;Gavyn Mitchel&#39;, &#39;Gene Xander&#39;, &#39;Genesis&#39;, &#39;Gentech&#39;, &#39;Gerry Menu&#39;, &#39;Gil Zambrano&#39;, &#39;Gilbert AM&#39;, &#39;Glensk&#39;, &#39;Gliss&#39;, &#39;Global Experience&#39;, &#39;Glynn Alan&#39;, &#39;Gofman&#39;, &#39;Golax&#39;, &#39;Golden Girls&#39;, &#39;Gologan&#39;, &#39;Good &amp; Bower&#39;, &#39;Goom Gum&#39;, &#39;Gradian&#39;, &#39;Graham Gold&#39;, &#39;Graumann&#39;, &#39;Green &amp; Falkner&#39;, &#39;Green Atlas&#39;, &#39;Greenstone&#39;, &#39;Gregori Klosman&#39;, &#39;Gregory Esayan&#39;, &#39;Griff Clawson&#39;, &#39;Grizli Man&#39;, &#39;Groove Garcia&#39;, &#39;Group Number One&#39;, &#39;Guiseppe Ottaviani&#39;, &#39;Gum Me&#39;, &#39;HANDY K&#39;, &#39;HRTWRK&#39;, &#39;HVNNAH&#39;, &#39;Hadley&#39;, &#39;Halcyone&#39;, &#39;Haley&#39;, &#39;Hammer&#39;, &#39;Hannah Rose&#39;, &#39;Hans Seo&#39;, &#39;Happy Monkey&#39;, &#39;Hardfloor&#39;, &#39;Haris&#39;, &#39;Haris C&#39;, &#39;Harmonika&#39;, &#39;Harper &amp; Green&#39;, &#39;Hazrain Norman&#39;, &#39;Heard Right&#39;, &#39;Heidi Anne&#39;, &#39;Helen Sylk&#39;, &#39;Hello Machines&#39;, &#39;Hensha&#39;, &#39;Hesham Ghoneim&#39;, &#39;Hi Profile&#39;, &#39;High Frequencies&#39;, &#39;Hilton Caswell&#39;, &#39;Hindsight&#39;, &#39;Hiroyuki ODA&#39;, &#39;Hjerkinn&#39;, &#39;Hodel &amp; Hornblad&#39;, &#39;Holland&#39;, &#39;Howe&#39;, &#39;Huarache&#39;, &#39;Hudson &amp; Kant&#39;, &#39;Hybrid&#39;, &#39;Hydriod&#39;, &#39;Hydro Poison&#39;, &#39;Hypaton&#39;, &#39;HËLIX&#39;, &#39;I-Vision&#39;, &#39;IJA&#39;, &#39;IKO&#39;, &#39;INVIRON&#39;, &#39;Iain M&#39;, &#39;Ian Solano&#39;, &#39;Idaho&#39;, &#39;Ignas&#39;, &#39;Igor Dyachkov&#39;, &#39;Ikerya Project&#39;, &#39;Ilya Flame&#39;, &#34;Ima&#39;gin&#34;, &#39;Impulse Wave&#39;, &#39;In Gray&#39;, &#39;In-Phase&#39;, &#39;Inbox&#39;, &#39;Indifferent Guy&#39;, &#39;Infected Mushroom&#39;, &#39;Infected Mushrooms&#39;, &#39;Infinity&#39;, &#39;Inge Bergmann&#39;, &#39;Inge Lemon&#39;, &#39;Inger Hansen&#39;, &#39;Inner &amp; Outer&#39;, &#39;Innerlight&#39;, &#39;Inpetto&#39;, &#39;Interactive Noise&#39;, &#39;Intersonic&#39;, &#39;Intrique&#39;, &#39;Irdi&#39;, &#39;Irena Love&#39;, &#39;Irina Makosh&#39;, &#39;Isa Marie&#39;, &#39;Isha&#39;, &#39;Isobel Mai&#39;, &#39;Ivan Gough&#39;, &#39;Ivan Khurtin&#39;, &#39;Iversoon &amp; Alex Daf&#39;, &#39;Izzy Warner&#39;, &#39;J. Hart&#39;, &#39;J.L.N.D.&#39;, &#39;J.O.C.&#39;, &#39;J.Puchler&#39;, &#39;J.Shore&#39;, &#39;JAMASTER A&#39;, &#39;JC Chavez&#39;, &#39;JMS&#39;, &#39;Jacqueline&#39;, &#39;Jade 4 U&#39;, &#39;Jake Reese&#39;, &#39;Jake Terra&#39;, &#39;Jake Torrey&#39;, &#39;Jakko&#39;, &#39;Jam El Mar&#39;, &#39;JamX&#39;, &#39;Jamala&#39;, &#39;James Allan&#39;, &#39;James De Torres&#39;, &#39;James Kiedis&#39;, &#39;Jameson Tullar&#39;, &#39;Jamie Anderson&#39;, &#39;Jamie Harrison&#39;, &#39;Jamie K&#39;, &#39;Jamx &amp; De Leon&#39;, &#39;Jan Johnson&#39;, &#39;Jan Loper&#39;, &#39;Jan Miller&#39;, &#39;Jan Oostdijk&#39;, &#39;Jan Oostdyk&#39;, &#39;Jane Maximova&#39;, &#39;Jannika&#39;, &#39;January Embers&#39;, &#39;Jardin&#39;, &#39;Jared Lee&#39;, &#39;Jark Prongo&#39;, &#39;Jasmine Maurie&#39;, &#39;Jason Seizures&#39;, &#39;Javah&#39;, &#39;JayCan&#39;, &#39;Jaydee&#39;, &#39;Jeff Rona&#39;, &#39;Jeitam Osheen&#39;, &#39;Jenni Perez&#39;, &#39;Jennifer Cooke&#39;, &#39;Jennifer Paige&#39;, &#39;Jenry R&#39;, &#39;Jericho Frequency&#39;, &#39;Jerome&#39;, &#39;Jessica Riddle&#39;, &#39;Jessy Greene&#39;, &#39;Jetson&#39;, &#39;Jim&#39;, &#39;JimiJ&#39;, &#39;Jimmy Chou&#39;, &#39;Jinadu&#39;, &#39;Jinus&#39;, &#39;Jjoo&#39;, &#39;Jo Maddox&#39;, &#39;Joc&#39;, &#39;Jochan Morrisen&#39;, &#39;Joe Garrett&#39;, &#39;Joe Lyons&#39;, &#39;Joel Fletcher&#39;, &#39;Joel Peres&#39;, &#39;Joel Spencer&#39;, &#39;Johannes Fischer&#39;, &#39;John Henderson&#39;, &#39;John Hetmond&#39;, &#39;John Manz&#39;, &#39;John Mash&#39;, &#39;John Selway&#39;, &#39;John Swanson&#39;, &#39;Johnny B&#39;, &#39;Johnny Kelvin&#39;, &#39;Jokate Benson&#39;, &#39;Jon Hopkins&#39;, &#39;Joni Fatora&#39;, &#39;Jonny Royall&#39;, &#39;Joonas Hahmo presents DOS622&#39;, &#39;Jordy Dazz&#39;, &#39;Joren Heelsing&#39;, &#39;Joris Voorn&#39;, &#39;Jorn &amp; Vito&#39;, &#39;Jose De Mara&#39;, &#39;Jozhy K&#39;, &#39;Judie Tzuke&#39;, &#39;Jules&#39;, &#39;Jules Porter&#39;, &#39;Julia Ross&#39;, &#39;Julia Violine&#39;, &#39;Julie Morrison&#39;, &#39;Juliet Lyons&#39;, &#39;Jullians&#39;, &#39;Jumpy Jumps&#39;, &#39;Junostar&#39;, &#39;Just D&#39;, &#39;Justin Dobslaw&#39;, &#39;KAST&#39;, &#39;KINETICA&#39;, &#39;KOS Project&#39;, &#39;Kaelyn Behr&#39;, &#39;Kainos&#39;, &#39;Kalafut &amp; Fygle&#39;, &#39;Kaleena Zanders&#39;, &#39;Kamar 2&#39;, &#39;Kameron Alexander&#39;, &#39;Kamilo Sanclemente&#39;, &#39;Kane Nelson&#39;, &#39;Kara Sun&#39;, &#39;Kareem Fad&#39;, &#39;Karen&#39;, &#39;Karen Elliot&#39;, &#39;Karybde&#39;, &#39;Karybde &amp; Scylla&#39;, &#39;Kash Trivedi&#39;, &#39;Kaste&#39;, &#39;Kat Marsh&#39;, &#39;Kate Dowman&#39;, &#39;Kathy Heath&#39;, &#39;Katie DiCicco&#39;, &#39;Katri&#39;, &#39;Katrik&#39;, &#39;Kaya-T&#39;, &#39;Ken Loi&#39;, &#39;Ken Spector&#39;, &#39;Kenan Teke&#39;, &#39;Kenneth Cruz&#39;, &#39;Kent &amp; Gian&#39;, &#39;Keo Nozari&#39;, &#39;Kevin de Vries&#39;, &#39;Kevu&#39;, &#39;KeyWork&#39;, &#39;Khaz&#39;, &#39;Kikis&#39;, &#39;Killogy&#39;, &#39;Kinetica&#39;, &#39;Kirill Nikolaev&#39;, &#39;Kirsch&#39;, &#39;Kitimo Lopez&#39;, &#39;Kobbe&#39;, &#39;Kobee&#39;, &#39;Koen Lebbens&#39;, &#39;Koglin &amp; Dewar&#39;, &#39;Kokaholla&#39;, &#39;Koko LaRoo&#39;, &#39;Kostya Veter&#39;, &#39;Krama&#39;, &#39;Kris Maydak&#39;, &#39;Kris Menace&#39;, &#39;Kristian Naim&#39;, &#39;Kristina Sky&#39;, &#39;Kristoffer Ljungberg&#39;, &#39;Kuffdam&#39;, &#39;Kularis&#39;, &#39;Kutski&#39;, &#39;Kyamoto&#39;, &#39;Kye Sones&#39;, &#39;Kyle Pepper&#39;, &#39;L.S.G.&#39;, &#39;LACES&#39;, &#39;LFO&#39;, &#39;LR&#39;, &#39;LR Uplift&#39;, &#39;LaMoor&#39;, &#39;Lansy K&#39;, &#39;Larke&#39;, &#39;Larsson&#39;, &#39;Last Island&#39;, &#39;Latex Zebra&#39;, &#39;Laura Turner&#39;, &#39;Laurell&#39;, &#34;Lauren L&#39;aimant&#34;, &#39;Lauren Ní Chasaide&#39;, &#39;Lauren Ray&#39;, &#39;Lavoie&#39;, &#39;Lawson&#39;, &#39;LeBlanc&#39;, &#39;Lee And Slater&#39;, &#39;Lee Canning&#39;, &#39;Lee Haslam&#39;, &#39;Leilani&#39;, &#39;Lele Toniq&#39;, &#39;Lele Troniq&#39;, &#39;Lens&#39;, &#39;Leolife&#39;, &#39;Leon 78&#39;, &#39;Leon Lour&#39;, &#39;Lepi Taival&#39;, &#39;Les Hemstock&#39;, &#39;Levann&#39;, &#39;Lewis Dodkins&#39;, &#39;Lexicon 4&#39;, &#39;Liam Hathaway&#39;, &#39;Liam Nicklin&#39;, &#39;LibeDime&#39;, &#39;Liezl&#39;, &#39;Lifelike&#39;, &#39;Lifted Emotion&#39;, &#39;LightControl&#39;, &#39;Likwid&#39;, &#39;Line Pursuit&#39;, &#39;Linn&#39;, &#39;Liquid Life&#39;, &#39;Liquid Todd&#39;, &#39;Liquid Vision&#39;, &#39;Little Nikki&#39;, &#39;Lizzy Land&#39;, &#39;Ljungqvist&#39;, &#39;Logic Stories&#39;, &#39;Lokka&#39;, &#39;Lola&#39;, &#39;Lonely Boy&#39;, &#39;Loobosh&#39;, &#39;Loomer&#39;, &#39;Lost Lynx&#39;, &#39;Lost Sequence&#39;, &#39;Lostep&#39;, &#39;Lostman&#39;, &#39;Love N Frequency&#39;, &#39;Luciana Di Nardo&#39;, &#39;Lucien&#39;, &#39;Luise Najib&#39;, &#39;Luiz B&#39;, &#39;Lumin-8&#39;, &#39;Luminal&#39;, &#39;Lumination&#39;, &#39;Luminn&#39;, &#39;Luuya&#39;, &#39;Lyci&#39;, &#39;Lycii&#39;, &#39;M Waering&#39;, &#39;M-Wood&#39;, &#39;M. Wilson&#39;, &#39;M11&#39;, &#39;MCO&#39;, &#39;MDX&#39;, &#39;Ma2shek&#39;, &#39;Macj&#39;, &#39;Madelin Zero&#39;, &#39;Maerin&#39;, &#39;Maglev&#39;, &#39;Magnetic Point&#39;, &#39;Maguire&#39;, &#39;Mahaputra&#39;, &#39;MainGain&#39;, &#39;Mainx&#39;, &#39;Malu&#39;, &#39;Maluu&#39;, &#39;Mandy Jones&#39;, &#39;Maniel Le Saux&#39;, &#39;Mantra&#39;, &#39;Manuel Le Sau&#39;, &#39;Manufactured Superstars&#39;, &#39;Manvel Ter-Pogosyan&#39;, &#39;Marc Dawn&#39;, &#39;Marc Volt&#39;, &#39;Marcell Stone&#39;, &#39;Marco Svarda&#39;, &#39;Mariah McManus&#39;, &#39;Mario Ayuda&#39;, &#39;Marius Verwoert&#39;, &#39;Mark Brain&#39;, &#39;Mark Found&#39;, &#39;Mark Pledger&#39;, &#39;Mark S&#39;, &#39;Mark Sinclair&#39;, &#39;Mark Versluis&#39;, &#39;Mark W&#39;, &#39;Marko Kantola&#39;, &#39;Marksun&#39;, &#39;Marksun &amp; Brian&#39;, &#39;Martens&#39;, &#39;Martijn Stegerhoek&#39;, &#39;Martin Drake&#39;, &#39;Martin Soundriver&#39;, &#39;Mason&#39;, &#39;Massai One&#39;, &#39;Mastro&#39;, &#39;Matt Chowski&#39;, &#39;Matt Eray&#39;, &#39;Matt Everson&#39;, &#39;Matt Forner&#39;, &#39;Matt Lange&#39;, &#39;Matthew Adam&#39;, &#39;Matthew Preffekt&#39;, &#39;Matthew White&#39;, &#39;Matthias Bishop&#39;, &#39;Matti Laamanen&#39;, &#39;Matvey Emerson&#39;, &#39;Maurice Lekkerkerker&#39;, &#39;Mavi&#39;, &#39;Max Braiman&#39;, &#39;Max Denoise&#39;, &#39;Max Graham vs Protoculture&#39;, &#39;Max Roven&#39;, &#39;Max Vangeli&#39;, &#39;Maxi Jazz&#39;, &#39;Maxim Lany&#39;, &#39;May Hassan&#39;, &#39;Mazza&#39;, &#39;McAree&#39;, &#39;McAree &amp; Clancy&#39;, &#39;McAuley&#39;, &#39;McGregor&#39;, &#39;Medii&#39;, &#39;Megamind&#39;, &#39;Meirmans&#39;, &#39;Mekka&#39;, &#39;Melissa Mathes&#39;, &#39;Members Of Mayday&#39;, &#39;Memory Loss&#39;, &#39;Menfis&#39;, &#39;Meridith Call&#39;, &#39;Messler&#39;, &#39;Metroom&#39;, &#39;Meyer&#39;, &#39;Mhammed El Alam&#39;, &#39;Mia Koo&#39;, &#39;Micah Martin&#39;, &#39;Michael&#39;, &#39;Michael Badal&#39;, &#39;Michael Burns&#39;, &#39;Michael Kaelios&#39;, &#39;Michael Lee&#39;, &#39;Michael Mashkov&#39;, &#39;Michael-Li&#39;, &#39;Miella&#39;, &#39;Miguel Sassot&#39;, &#39;Miika Kuisma&#39;, &#39;Mike Efex&#39;, &#39;Mike Hawkins&#39;, &#39;Mike Heart&#39;, &#39;Mike Septima&#39;, &#39;Mike Wind&#39;, &#39;Mikkas&#39;, &#39;Mil Brokes&#39;, &#39;Miles&#39;, &#39;Miller vs Divini&#39;, &#39;Mina&#39;, &#39;Mindscope&#39;, &#39;Miranda Lee Richards&#39;, &#39;Miroslav Virlik&#39;, &#39;Misia Furtak&#39;, &#39;Mistigris&#39;, &#39;Mistral&#39;, &#39;Mivase&#39;, &#39;Mnemonic&#39;, &#39;Moby&#39;, &#39;Modena&#39;, &#39;Mohamed Hamdy&#39;, &#39;Mohammed Khalila&#39;, &#39;Moiez&#39;, &#39;Mokita&#39;, &#39;Monika Santucci&#39;, &#39;Monty Wells&#39;, &#39;Moon&#39;, &#39;Moonforce&#39;, &#39;More Analog&#39;, &#39;Morphing Shadows&#39;, &#39;Morten Granau&#39;, &#39;Mosimann&#39;, &#39;Mosko&#39;, &#39;Motion Sound&#39;, &#39;Mozella&#39;, &#39;Mr Andre&#39;, &#39;Mr Carefull&#39;, &#39;Mr. Sam&#39;, &#39;Mr. Sax&#39;, &#39;Muhib Khan&#39;, &#39;Murica&#39;, &#39;Murtagh&#39;, &#39;Musix&#39;, &#39;Muska&#39;, &#39;Myde&#39;, &#39;Myon &amp; Late Night Alumi&#39;, &#39;Myron&#39;, &#39;Mysterious Movement&#39;, &#39;Mystery Islands&#39;, &#39;Mystical Complex&#39;, &#39;N2o&#39;, &#39;NG Rezonance&#39;, &#39;NKI&#39;, &#39;NOHC&#39;, &#39;Naeba&#39;, &#39;Nail Abdiev&#39;, &#39;Nakadia&#39;, &#39;Nat Monday&#39;, &#39;Natalia Gioia&#39;, &#39;Natalie Holmes&#39;, &#39;Natalie Peris&#39;, &#39;Natalie Shay&#39;, &#39;Natlife&#39;, &#39;Nature One Inc.&#39;, &#39;Neil Hunter&#39;, &#39;Neo Kekkonen&#39;, &#39;Neofance&#39;, &#39;Neos&#39;, &#39;Neple&#39;, &#39;Neshi Futuro&#39;, &#39;Neve White&#39;, &#39;Nic Vegter&#39;, &#39;Nick Martin&#39;, &#39;Nick Robertson&#39;, &#39;Nick Stufano&#39;, &#39;Nick Thompson&#39;, &#39;Nickie Minshall&#39;, &#39;Nicole McKenna&#39;, &#39;Niels Von Ahorn&#39;, &#39;Nikhil Prakash&#39;, &#39;Nino Lucarelli&#39;, &#39;Nish&#39;, &#39;Nivaya&#39;, &#39;No Class&#39;, &#39;No Comment&#39;, &#39;Noctiva&#39;, &#39;Noel Gitman&#39;, &#39;Nomination&#39;, &#39;Nora En Pure&#39;, &#39;Norah B.&#39;, &#39;Nord Horizon&#39;, &#39;Nordan&#39;, &#39;Norin&#39;, &#39;Novan&#39;, &#39;Novastar&#39;, &#39;Nucvise&#39;, &#39;Nurlail&#39;, &#39;NuttaLyA&#39;, &#39;Oberon&#39;, &#39;Obie Fernandez&#39;, &#39;Oceania&#39;, &#39;Odison&#39;, &#39;Off Key&#39;, &#39;Off Limits&#39;, &#39;Ojan Nilsen&#39;, &#39;Oleg Espo&#39;, &#39;Oleg Farrier&#39;, &#39;Oliver &amp; Tom&#39;, &#39;Oliver Cattley&#39;, &#39;Oliver Englafjord&#39;, &#39;Oliver Lieb&#39;, &#39;Oliver Shine&#39;, &#39;Omen&#39;, &#39;Omiki&#39;, &#39;Omniks&#39;, &#39;One Half Bear&#39;, &#39;One Way&#39;, &#39;Opticane&#39;, &#39;Oradea&#39;, &#39;Orange 3&#39;, &#39;Orano&#39;, &#39;Origin&#39;, &#34;Orion&#39;s Dawn&#34;, &#39;Orjan Remix&#39;, &#39;Orkan&#39;, &#39;Orsa&#39;, &#39;Orunea&#39;, &#39;Osaru&#39;, &#39;Osip&#39;, &#39;Osiris&#39;, &#39;Osito&#39;, &#39;Ost&#39;, &#39;Oza&#39;, &#39;P.O.S.&#39;, &#39;PG2&#39;, &#39;PHD&#39;, &#39;PK&#39;, &#39;Pacheco&#39;, &#39;Paco Maroto&#39;, &#39;Paolo Mojo&#39;, &#39;Pathfinders&#39;, &#39;Patrick Devere&#39;, &#39;Patrick Stowson&#39;, &#39;Patricketto&#39;, &#39;Paul Allen&#39;, &#39;Paul Cook&#39;, &#39;Paul Courbet&#39;, &#39;Paul Gibson&#39;, &#39;Paul Johannessen&#39;, &#39;Paul Mayson&#39;, &#39;Paul Meany&#39;, &#39;Paul Mendez&#39;, &#39;Paul Morrell&#39;, &#39;Paul Rigel&#39;, &#39;Paul Skelton&#39;, &#39;Paul Tarrant&#39;, &#39;Paul Vernon&#39;, &#39;Pay &amp; White&#39;, &#39;Pearson &amp; Hirst&#39;, &#39;Pedersen&#39;, &#39;Penny Nixon&#39;, &#39;Perfect Vision&#39;, &#39;Perplexer&#39;, &#39;Pete Drury&#39;, &#39;Peter Dafnous&#39;, &#39;Peter McCowan&#39;, &#39;Pex L&#39;, &#39;Phaedra&#39;, &#39;Phanatic&#39;, &#39;Phatzoo&#39;, &#39;Phaxe&#39;, &#39;Philip Estevez&#39;, &#39;Philip Overdriver&#39;, &#39;Phillipe El Sisi&#39;, &#39;Philthy Chit&#39;, &#39;Phoebe Ryan&#39;, &#39;Phonic Youth&#39;, &#39;Pia Toscano&#39;, &#39;Pierce Fulton&#39;, &#39;Pierre in the Air&#39;, &#39;Pinkbox Special&#39;, &#39;Pinkque&#39;, &#39;Pino Benji&#39;, &#39;Pinque&#39;, &#39;Pirate&#39;, &#39;Pixel&#39;, &#39;Plastika&#39;, &#39;Plavka&#39;, &#39;Plexland&#39;, &#39;Plu-Ton&#39;, &#39;Pobsky&#39;, &#39;Poison Pro&#39;, &#39;Polaris&#39;, &#39;Poli Hubavenska&#39;, &#39;Polina&#39;, &#39;Poonyk&#39;, &#39;Portishead&#39;, &#39;Pretty Pink&#39;, &#39;Primo Lux&#39;, &#39;Prism&#39;, &#39;Private Collection&#39;, &#39;Project 8&#39;, &#39;Prototype&#39;, &#39;Psywork&#39;, &#39;Pulse Regime&#39;, &#39;Puma Scorz&#39;, &#39;Purelight&#39;, &#39;Qrion&#39;, &#39;Quadrophonia&#39;, &#39;Quizzow&#39;, &#39;R-Lend&#39;, &#39;R.E.N.O.I.S.E.&#39;, &#39;RAM presents RAW&#39;, &#39;RBBTS&#39;, &#39;RUMORS&#39;, &#39;RYDEX&#39;, &#39;Rad&#39;, &#39;Radiate&#39;, &#39;Radiate Worship&#39;, &#39;Radmila&#39;, &#39;Rafael Osmo&#39;, &#39;Rafif&#39;, &#39;Rakkano&#39;, &#39;Ralph Novell&#39;, &#39;Rambacy&#39;, &#39;Raminio&#39;, &#39;Ramsey Westwood&#39;, &#39;Randry&#39;, &#39;Randy Boyer &amp; Eric Tadla&#39;, &#39;Raneem&#39;, &#39;Rank&#39;, &#39;Rankey&#39;, &#39;Ransom&#39;, &#39;Rasster&#39;, &#39;Rated R&#39;, &#39;Ratty&#39;, &#39;Rave Channel&#39;, &#39;Raver&#39;, &#39;Rb Naylr&#39;, &#39;Re-Play&#39;, &#39;Re-Ward&#39;, &#39;ReDrive&#39;, &#39;Rea Garvey&#39;, &#39;Realm F&#39;, &#39;Reaves&#39;, &#39;Rebecca Emely&#39;, &#39;Rebourne&#39;, &#39;Receptive&#39;, &#39;Reconceal&#39;, &#39;Red Sky&#39;, &#39;Redd Square&#39;, &#39;Redhead Roman&#39;, &#39;Reece Low&#39;, &#39;Reez&#39;, &#39;Remco&#39;, &#39;Renvo&#39;, &#39;Rephlex One&#39;, &#39;Reunify&#39;, &#39;Revolution 9&#39;, &#39;Ria&#39;, &#39;Richie Loop&#39;, &#39;Rifter&#39;, &#39;Rigby&#39;, &#39;Rikkaz&#39;, &#39;Rimsky&#39;, &#39;Rinat Shabanov&#39;, &#39;Rio Lorenzo&#39;, &#39;Riot Night&#39;, &#39;Rising Altitude&#39;, &#39;Riva&#39;, &#39;Rob Naylor&#39;, &#39;Robbert Ladiges&#39;, &#39;Robert &amp; Jaron&#39;, &#39;Robert Darry&#39;, &#39;Roberta Harrison&#39;, &#39;Roddy Reyneart&#39;, &#39;Roland Clark&#39;, &#39;Rolfiek&#39;, &#39;Ron Malakai&#39;, &#39;Ron van den Beuken&#39;, &#39;Ronnie Allstar&#39;, &#39;Rory&#39;, &#34;Rory O&#39;Grady&#34;, &#39;Rosalee O’Connell&#39;, &#39;Rospy&#39;, &#39;Ross Ferguson&#39;, &#39;Roxanne Barton&#39;, &#39;Ruben de Rond&#39;, &#39;Rubi Heller&#39;, &#39;Run Rivers&#39;, &#39;Ruslan Aschaulov&#39;, &#39;Russell G&#39;, &#39;Russo&#39;, &#39;Rya &amp; Manida&#39;, &#39;Ryan Mendoza&#39;, &#39;Rymania&#39;, &#39;S&amp;L&#39;, &#39;S. Sinka&#39;, &#39;S.H.O.K.K.&#39;, &#39;SDS&#39;, &#39;SECTR 24&#39;, &#39;STEEM SL&#39;, &#39;Saav&#39;, &#39;Sabanci&#39;, &#39;Sabanci &amp; Truby&#39;, &#39;Saer&#39;, &#39;Saint&#39;, &#39;Saint Rush&#39;, &#39;Sally Saifi&#39;, &#39;Sam Knight&#39;, &#39;Sami S&#39;, &#39;San Antonio Harbour&#39;, &#39;Sander Playmo&#39;, &#39;Sander Van Dien&#39;, &#39;Sandra Wagner&#39;, &#39;Santoz&#39;, &#39;Sascha Milde&#39;, &#39;Sasha&#39;, &#39;Sasha August&#39;, &#39;Sasha da Link&#39;, &#39;Scarlett Quinn&#39;, &#39;Scenix&#39;, &#39;Science Deal&#39;, &#39;Scolario&#39;, &#39;Scott Lowe&#39;, &#39;Scylla&#39;, &#39;Sean &amp; Xander&#39;, &#39;Sean Ryan&#39;, &#39;SebDell&#39;, &#39;Sebu&#39;, &#39;Second Reason&#39;, &#39;Second Way&#39;, &#39;Secret Panda Society&#39;, &#39;Seegmo&#39;, &#39;Seelo&#39;, &#39;Sekiu&#39;, &#39;Sendr&#39;, &#39;Sense Of Shiver&#39;, &#39;Sequentia Remix&#39;, &#39;Seraque&#39;, &#39;Serenade&#39;, &#39;Sergey Shabanov&#39;, &#39;Sergey Vegas&#39;, &#39;Serial Smokers&#39;, &#39;Seroya&#39;, &#39;Sesto Sento&#39;, &#39;Seth Hutton&#39;, &#39;Sevenn&#39;, &#39;Sfinx&#39;, &#39;Shahin Badar&#39;, &#39;Shakeh&#39;, &#39;Shanti People&#39;, &#39;Shanti V Deedrah&#39;, &#39;Shaun Gregory&#39;, &#39;Shedona&#39;, &#39;Shelby Merry&#39;, &#39;Sheldon&#39;, &#39;Sherry Flavour&#39;, &#39;Shingo Nakamura&#39;, &#39;Shy Brothers&#39;, &#39;Sian Evans&#39;, &#39;Sian Kosheen&#39;, &#39;Siberian Sun&#39;, &#39;Sibicky&#39;, &#39;Side Effects&#39;, &#39;Sideform Suduaya&#39;, &#39;Signal Space&#39;, &#39;Silvermine&#39;, &#39;Silvester&#39;, &#39;Simadith Project&#39;, &#39;Simmons &amp; Blanc&#39;, &#39;Simon Lee&#39;, &#39;Simon Moon&#39;, &#39;Simon Pitt&#39;, &#39;Simple Art&#39;, &#39;Simply Drew&#39;, &#39;Simza&#39;, &#39;Sion Rae&#39;, &#39;Sirocco&#39;, &#39;Skehan&#39;, &#39;Sky Sound&#39;, &#39;Skye&#39;, &#39;Skyler Stonestreet&#39;, &#39;Slip Friction&#39;, &#39;Slusnik Luna&#39;, &#39;Smallow&#39;, &#39;Smart Apes&#39;, &#39;Smuel&#39;, &#39;Snitker&#39;, &#39;Snowseal&#39;, &#39;Soar&#39;, &#39;Solange&#39;, &#39;Solar Kid&#39;, &#39;Solarium&#39;, &#39;Solarstone Pure&#39;, &#39;Solex&#39;, &#39;Solicitous&#39;, &#39;Solid Skill&#39;, &#39;Solid Sleep&#39;, &#39;Something Good&#39;, &#39;Sonar Methods&#39;, &#39;Soncesvit&#39;, &#39;Song and the Moon&#39;, &#39;Sonic Division&#39;, &#39;Sons&#39;, &#39;Sons Of Methuselah&#39;, &#39;Sophie Moleta&#39;, &#39;SounEmot&#39;, &#39;Soundcheck&#39;, &#39;SouthLights&#39;, &#39;Space Raven&#39;, &#39;Spara&#39;, &#39;Spencer Tarring&#39;, &#39;Spherical Bloom&#39;, &#39;Sphinx&#39;, &#39;Spoiled and Zigo&#39;, &#39;St. John vs Locust&#39;, &#39;Stacker&#39;, &#39;Stan Serkin&#39;, &#39;Stanford&#39;, &#39;Stanfour&#39;, &#39;Star Industry&#39;, &#39;Starecase&#39;, &#39;Starfighter&#39;, &#39;Starkillers&#39;, &#39;State One&#39;, &#39;State of Mind&#39;, &#39;Stefan Cambridge&#39;, &#39;Stefan Dabruck&#39;, &#39;Steff da Campo&#39;, &#39;Stellz&#39;, &#39;Stephane Badey&#39;, &#39;Stephanie Kay&#39;, &#39;Stephen Kirkwood&#39;, &#39;Stephen Ridley&#39;, &#39;Stephey&#39;, &#39;Stereo Wildlife&#39;, &#39;Steve Allan&#39;, &#39;Steve Aoki&#39;, &#39;Steve Aries&#39;, &#39;Steve Bengaln&#39;, &#39;Steve Birch&#39;, &#39;Steve Forte Rio&#39;, &#39;Steve Haines&#39;, &#39;Steve Morley&#39;, &#39;Steven Brooks&#39;, &#39;Steven De Sar&#39;, &#39;Steven Force&#39;, &#39;Stimulator&#39;, &#39;Stoneface&#39;, &#39;Stoneless&#39;, &#39;Straight Up&#39;, &#39;Stream Noise&#39;, &#39;Street Punk&#39;, &#39;Stuart Millar&#39;, &#39;Stuart Trainer&#39;, &#39;Stvn&#39;, &#39;Stylo&#39;, &#39;Subimpact&#39;, &#39;Subversion&#39;, &#39;Sultan &amp; Sheperd&#39;, &#39;Sun Brothers&#39;, &#39;Sun State&#39;, &#39;Sunbrothers&#39;, &#39;Suncore&#39;, &#39;Suncrusaders&#39;, &#39;Sunday 5pm&#39;, &#39;Sunleed&#39;, &#39;Sunlight Project&#39;, &#39;Sunset Slave&#39;, &#39;Super8 &amp; DJ Tab&#39;, &#39;Supuer&#39;, &#39;Swanky Tunes&#39;, &#39;Swift&#39;, &#39;Sykamore&#39;, &#39;Sylvi&#39;, &#39;Symbolic&#39;, &#39;Symon &amp; Jay&#39;, &#39;Syndica&#39;, &#39;Syndique&#39;, &#39;System Nipel&#39;, &#39;Systembreaker&#39;, &#39;T.h.&#39;, &#39;TATA1&#39;, &#39;TEKNO&#39;, &#39;THNK&#39;, &#39;Tabasco Bob&#39;, &#39;Tadi &amp; Nv&#39;, &#39;Taiko&#39;, &#39;Taival&#39;, &#39;Tales Of Life&#39;, &#39;Tamra&#39;, &#39;Tangle &amp; Mateusz&#39;, &#39;Tania Mann&#39;, &#39;Tara Louise&#39;, &#39;Taranhawk&#39;, &#39;Tasadi&#39;, &#39;Tasso&#39;, &#39;Taucher&#39;, &#39;Taylor&#39;, &#39;Team Bastian&#39;, &#39;Tee-Ex&#39;, &#39;Tekno&#39;, &#39;Temperheart&#39;, &#39;Tensteps&#39;, &#39;Terminal&#39;, &#39;Terracotta Army&#39;, &#39;Terry Gaters&#39;, &#39;Tetarise&#39;, &#39;Tetraflux&#39;, &#39;Tetrazone&#39;, &#39;The A&amp;N Project&#39;, &#39;The Antipodes&#39;, &#39;The Ashk One&#39;, &#39;The Atari Babies&#39;, &#39;The Avains&#39;, &#39;The Chill Factor&#39;, &#39;The Conductor &amp; The Cowboy&#39;, &#39;The Delta Rock Duo&#39;, &#39;The Doppler Effect&#39;, &#39;The Enlightment&#39;, &#39;The Inheritors&#39;, &#39;The Midnight&#39;, &#39;The Nasty Boyz&#39;, &#39;The Orange&#39;, &#39;The Royalties STHLM&#39;, &#39;The Second Phase&#39;, &#39;The Spacelovers&#39;, &#39;The Spanish Armada&#39;, &#39;The Technicians&#39;, &#39;The Tribute&#39;, &#39;The Veil Kings&#39;, &#39;The WLT&#39;, &#39;Theo&#39;, &#39;Therese&#39;, &#39;Theresia Svensson&#39;, &#39;Thick As Thieves&#39;, &#34;Thomas Datt&#39;s&#34;, &#39;Thomas Kelle&#39;, &#39;Thomas Knight&#39;, &#39;Thomas Newson&#39;, &#39;Thomas Orlando&#39;, &#39;Thomas Sagstad&#39;, &#39;Thomas Schwartz&#39;, &#39;Thomas T&#39;, &#39;Thomas T.&#39;, &#39;Thomas Vink&#39;, &#39;Thoneick&#39;, &#39;Thorisson&#39;, &#39;Three Drives On A Vinyl&#39;, &#39;Tiffany Johnston&#39;, &#39;Tilt&#39;, &#39;Tim &amp; Misjah&#39;, &#39;Tim Besamusca&#39;, &#39;Tim Briggs&#39;, &#39;Tim Preijers&#39;, &#39;Tim White&#39;, &#39;Timelock&#39;, &#39;Timmo Hendriks&#39;, &#39;Timmus&#39;, &#39;Timo Vaittinen&#39;, &#39;Timur Shafiev&#39;, &#39;Timur Shafiey&#39;, &#39;Tobi Atkins&#39;, &#39;Tolga Uzulmez&#39;, &#39;Toltel&#39;, &#39;Tom Glide&#39;, &#39;Tom Porcell&#39;, &#39;Tom Stronghold&#39;, &#39;Tom Tyler&#39;, &#39;Tomahawk&#39;, &#39;Tommy Baynen&#39;, &#39;Tommy Conway&#39;, &#39;Torio&#39;, &#39;Tour de Trance&#39;, &#39;Trance Reserve&#39;, &#39;TranceEye&#39;, &#39;Tranceforce&#39;, &#39;Transa&#39;, &#39;Transwave&#39;, &#39;Treadstone&#39;, &#39;Trent McDermott&#39;, &#39;Tribal Point&#39;, &#39;Tricia McTeagu&#39;, &#39;Trilucid&#39;, &#39;Trine&#39;, &#39;Triple Seven&#39;, &#39;Triqz&#39;, &#39;Tristan&#39;, &#39;Tropical Groove&#39;, &#39;Truewave&#39;, &#39;Tsukerman&#39;, &#39;Tube &amp; Miller&#39;, &#39;Twilight&#39;, &#39;Tygris&#39;, &#39;U-Jeen&#39;, &#39;U-Turn&#39;, &#39;UMEK&#39;, &#34;Uberjak&#39;d&#34;, &#39;Uli Poeppelbaum&#39;, &#39;Unconditional&#39;, &#39;Underdown&#39;, &#39;Underwater&#39;, &#39;Universal Sense&#39;, &#39;Unknown Source&#39;, &#39;Unseen Dimensions&#39;, &#39;V-One&#39;, &#39;Vada&#39;, &#39;Vadik&#39;, &#39;Valhalla&#39;, &#39;Van Der Vleuten&#39;, &#39;Van Dresen&#39;, &#39;Van Eyden&#39;, &#39;Varsente&#39;, &#39;Vascotia&#39;, &#39;Vector 7&#39;, &#39;Vegaro&#39;, &#39;Vegas&#39;, &#39;Vegas Baby&#39;, &#39;Vehemence&#39;, &#39;Veit&#39;, &#39;Velden&#39;, &#39;Velvetine&#39;, &#39;Venice&#39;, &#39;Vercitti&#39;, &#39;Verny&#39;, &#39;Vertel&#39;, &#39;Vertruda&#39;, &#39;Vicky Fee&#39;, &#39;Victoria Duffield&#39;, &#39;Vince Schuld&#39;, &#39;Vincent Voort&#39;, &#39;Vir2l Vision&#39;, &#39;Visionaire&#39;, &#39;Visior&#39;, &#39;Vlad Captivity&#39;, &#39;Vol Deeman&#39;, &#39;Volition&#39;, &#39;Voolgarizm&#39;, &#39;Voytech&#39;, &#39;Vök&#39;, &#39;WARRIORS&#39;, &#39;Walden&#39;, &#39;Walsh&#39;, &#39;Warren Adam&#39;, &#39;Waterspark&#39;, &#39;Wayne Jackson&#39;, &#39;We Are Loud&#39;, &#39;WeAreAlien&#39;, &#39;WeareD&#39;, &#39;Wellenrausch&#39;, &#39;Westlake&#39;, &#39;What So Not&#39;, &#39;Whitelight&#39;, &#39;Wiegel&#39;, &#39;WildOnes&#39;, &#39;Wildstylez&#39;, &#39;Will Watson&#39;, &#39;Win and Woo&#39;, &#39;Winona Oak&#39;, &#39;With The Winds&#39;, &#39;Within Temptation&#39;, &#39;Wonder Element&#39;, &#39;Woodshokk&#39;, &#39;X-Ploarations&#39;, &#39;XIRA&#39;, &#39;Xanwow&#39;, &#39;Xijaro&#39;, &#39;Xspective Sense&#39;, &#39;Yanave&#39;, &#39;Yotto&#39;, &#39;Young Rebels&#39;, &#39;Yourdee&#39;, &#39;Yuna-X&#39;, &#39;ZOYA&#39;, &#39;Zach Zlov&#39;, &#39;Zack Evans&#39;, &#39;Zack Martino&#39;, &#39;Zehavi &amp; Rand&#39;, &#39;Zein Hallak&#39;, &#39;Ziger&#39;, &#39;Zigi&#39;, &#39;Ziki&#39;, &#39;Zinkibaru&#39;, &#39;Zinou&#39;, &#39;Zyce&#39;, &#39;brando&#39;, &#39;i&#39;, &#39;tAudrey Gallagher&#39;, &#39;tyDi &amp; Dennis Sheperd&#39;]
</pre>
</div>
</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Highlights include Steve Aoki and What So Not, among others. Again, this is based on how artists are reported in Spotify and as such is not entirely accurate. In the above we see 'tAudrey Gallagher' and "Thomas Datt's", both typos, report as separate from their namesake.</p>

</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="Summary">Summary<a class="anchor-link" href="#Summary"> </a></h2>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>In conclusion, across the current (as of writing) 960 episodes of A State of Trance...</p>
<ul>
<li>17,000+ total tracks have been played</li>
<li>4,000+ unique artists have been featured</li>
<li>1,200+ tracks produced by Armin van Buuren in some form or another have been played</li>
<li>1,700+ artists (43%) have been played exactly once</li>
</ul>
<p>And there we have it! There's plenty more to investigate, stay tuned..</p>

</div>
</div>
</div>
</div>]]></content><author><name></name></author><category term="asot" /><category term="artists" /><summary type="html"><![CDATA[Tracking artist plays over time.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://scottbrenner.github.io/asot-jupyter/images/artist-plays.png" /><media:content medium="image" url="https://scottbrenner.github.io/asot-jupyter/images/artist-plays.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Average Episode BPM</title><link href="https://scottbrenner.github.io/asot-jupyter/asot/bpm/2020/04/28/avg-bpm.html" rel="alternate" type="text/html" title="Average Episode BPM" /><published>2020-04-28T00:00:00-05:00</published><updated>2020-04-28T00:00:00-05:00</updated><id>https://scottbrenner.github.io/asot-jupyter/asot/bpm/2020/04/28/avg-bpm</id><content type="html" xml:base="https://scottbrenner.github.io/asot-jupyter/asot/bpm/2020/04/28/avg-bpm.html"><![CDATA[<!--
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: _notebooks/2020-04-28-avg-bpm.ipynb
-->

<div class="container" id="notebook-container">
        
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="Introduction">Introduction<a class="anchor-link" href="#Introduction"> </a></h2>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p><a href="https://scottbrenner.github.io/asot-jupyter/asot/bpm/2020/04/27/methodology.html">Previously</a> on "<em>How has A State of Trance changed over time?</em>" we poked the Spotify Web API and returned with every episode of A State of Trance. In this post, we'll examine how the show's BPM has changed over time.</p>

</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="On-Averages">On Averages<a class="anchor-link" href="#On-Averages"> </a></h2>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>First, some housekeeping items.</p>
<p>In the <a href="https://scottbrenner.github.io/asot-jupyter/asot/bpm/2020/04/27/methodology.html">"Methodology" post</a> we learned Spotify's catalogue of A State of Trance, while it seems to contain every episode, does not have every track in some episodes.</p>
<p>Due to the nature of averages, this will cause our calculations to be skewed somewhat. Filling in the blanks is left as an exercise for the reader.</p>

</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="Calculating">Calculating<a class="anchor-link" href="#Calculating"> </a></h2>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Let's find the average BPM of each episode and graph it over time.</p>
<p>We'll ask Spotify for the BPM of every track in an episode, add it all up, and divide by the number of tracks - removing the voiceovers and interludes of course! For the first 10 episodes, this looks like:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">episode_avg_bpm</span> <span class="o">=</span> <span class="p">[]</span>

<span class="k">for</span> <span class="n">episode</span> <span class="ow">in</span> <span class="n">episodes</span><span class="p">[:</span><span class="mi">10</span><span class="p">]:</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">episode_bpm</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">tracks_counted</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">for</span> <span class="n">track</span> <span class="ow">in</span> <span class="n">sp</span><span class="o">.</span><span class="n">album_tracks</span><span class="p">(</span><span class="n">episode</span><span class="p">[</span><span class="s1">&#39;uri&#39;</span><span class="p">])[</span><span class="s1">&#39;items&#39;</span><span class="p">]:</span>
            <span class="k">if</span> <span class="s2">&quot;a atate of trance&quot;</span> <span class="ow">in</span> <span class="n">track</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span> <span class="ow">or</span> <span class="s2">&quot;- interview&quot;</span> <span class="ow">in</span> <span class="n">track</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">lower</span><span class="p">():</span>
                <span class="k">continue</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">episode_bpm</span> <span class="o">+=</span> <span class="n">sp</span><span class="o">.</span><span class="n">audio_features</span><span class="p">(</span><span class="n">track</span><span class="p">[</span><span class="s1">&#39;uri&#39;</span><span class="p">])[</span><span class="mi">0</span><span class="p">][</span><span class="s1">&#39;tempo&#39;</span><span class="p">]</span>
                <span class="n">tracks_counted</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="n">avg</span> <span class="o">=</span> <span class="n">episode_bpm</span><span class="o">/</span><span class="n">tracks_counted</span>
        <span class="nb">print</span><span class="p">(</span><span class="n">episode</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">],</span> <span class="n">avg</span><span class="p">)</span>
        <span class="n">episode_avg_bpm</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">avg</span><span class="p">)</span>
    <span class="k">except</span><span class="p">:</span>
        <span class="k">pass</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>A State Of Trance Episode 000 135.77875
A State Of Trance Episode 001 138.86957142857142
A State Of Trance Episode 002 135.95900000000003
A State Of Trance Episode 003 135.295
A State Of Trance Episode 004 137.3078
A State Of Trance Episode 005 137.122875
A State Of Trance Episode 006 136.12875
A State Of Trance Episode 007 137.459125
A State Of Trance Episode 008 136.409
A State Of Trance Episode 009 138.58033333333333
</pre>
</div>
</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Rinse and repeat for 950+ episodes. Grab a tea or coffee, this could take a bit!</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">episode_avg_bpm</span> <span class="o">=</span> <span class="p">[]</span>

<span class="k">for</span> <span class="n">episode</span> <span class="ow">in</span> <span class="n">episodes</span><span class="p">:</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">episode_bpm</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">tracks_counted</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">for</span> <span class="n">track</span> <span class="ow">in</span> <span class="n">sp</span><span class="o">.</span><span class="n">album_tracks</span><span class="p">(</span><span class="n">episode</span><span class="p">[</span><span class="s1">&#39;uri&#39;</span><span class="p">])[</span><span class="s1">&#39;items&#39;</span><span class="p">]:</span>
            <span class="k">if</span> <span class="s2">&quot;a state of trance&quot;</span> <span class="ow">in</span> <span class="n">track</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span> <span class="ow">or</span> <span class="s2">&quot;- interview&quot;</span> <span class="ow">in</span> <span class="n">track</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">lower</span><span class="p">():</span>
                <span class="k">continue</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">episode_bpm</span> <span class="o">+=</span> <span class="n">sp</span><span class="o">.</span><span class="n">audio_features</span><span class="p">(</span><span class="n">track</span><span class="p">[</span><span class="s1">&#39;uri&#39;</span><span class="p">])[</span><span class="mi">0</span><span class="p">][</span><span class="s1">&#39;tempo&#39;</span><span class="p">]</span>
                <span class="n">tracks_counted</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="n">avg</span> <span class="o">=</span> <span class="n">episode_bpm</span><span class="o">/</span><span class="n">tracks_counted</span>
        <span class="n">episode_avg_bpm</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">avg</span><span class="p">)</span>
    <span class="k">except</span><span class="p">:</span>
        <span class="k">pass</span>
</pre></div>

    </div>
</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Instead of printing this, let's throw it into a quick Altair graph:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">episode_avg_bpm</span><span class="p">))</span>   

<span class="n">source</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">({</span>
  <span class="s1">&#39;episode&#39;</span><span class="p">:</span> <span class="n">x</span><span class="p">,</span>
  <span class="s1">&#39;avg bpm&#39;</span><span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="n">episode_avg_bpm</span><span class="p">)</span>
<span class="p">})</span>

<span class="n">alt</span><span class="o">.</span><span class="n">Chart</span><span class="p">(</span><span class="n">source</span><span class="p">)</span><span class="o">.</span><span class="n">mark_line</span><span class="p">()</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span>
    <span class="n">alt</span><span class="o">.</span><span class="n">X</span><span class="p">(</span><span class="s1">&#39;episode&#39;</span><span class="p">),</span>
    <span class="n">alt</span><span class="o">.</span><span class="n">Y</span><span class="p">(</span><span class="s1">&#39;avg bpm&#39;</span><span class="p">,</span> <span class="n">scale</span><span class="o">=</span><span class="n">alt</span><span class="o">.</span><span class="n">Scale</span><span class="p">(</span><span class="n">domain</span><span class="o">=</span><span class="p">(</span><span class="mi">120</span><span class="p">,</span> <span class="mi">150</span><span class="p">))),</span>
<span class="p">)</span><span class="o">.</span><span class="n">properties</span><span class="p">(</span>
    <span class="n">title</span><span class="o">=</span><span class="s2">&quot;A State of Trance - Average BPM of episode&quot;</span>
<span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">

<div id="altair-viz-ada3a62e03f240ca824377310b6b23db"></div>
<script type="text/javascript">
  (function(spec, embedOpt){
    let outputDiv = document.currentScript.previousElementSibling;
    if (outputDiv.id !== "altair-viz-ada3a62e03f240ca824377310b6b23db") {
      outputDiv = document.getElementById("altair-viz-ada3a62e03f240ca824377310b6b23db");
    }
    const paths = {
      "vega": "https://cdn.jsdelivr.net/npm//vega@5?noext",
      "vega-lib": "https://cdn.jsdelivr.net/npm//vega-lib?noext",
      "vega-lite": "https://cdn.jsdelivr.net/npm//vega-lite@4.8.1?noext",
      "vega-embed": "https://cdn.jsdelivr.net/npm//vega-embed@6?noext",
    };

    function loadScript(lib) {
      return new Promise(function(resolve, reject) {
        var s = document.createElement('script');
        s.src = paths[lib];
        s.async = true;
        s.onload = () => resolve(paths[lib]);
        s.onerror = () => reject(`Error loading script: ${paths[lib]}`);
        document.getElementsByTagName("head")[0].appendChild(s);
      });
    }

    function showError(err) {
      outputDiv.innerHTML = `<div class="error" style="color:red;">${err}</div>`;
      throw err;
    }

    function displayChart(vegaEmbed) {
      vegaEmbed(outputDiv, spec, embedOpt)
        .catch(err => showError(`Javascript Error: ${err.message}<br>This usually means there's a typo in your chart specification. See the javascript console for the full traceback.`));
    }

    if(typeof define === "function" && define.amd) {
      requirejs.config({paths});
      require(["vega-embed"], displayChart, err => showError(`Error loading script: ${err.message}`));
    } else if (typeof vegaEmbed === "function") {
      displayChart(vegaEmbed);
    } else {
      loadScript("vega")
        .then(() => loadScript("vega-lite"))
        .then(() => loadScript("vega-embed"))
        .catch(showError)
        .then(() => displayChart(vegaEmbed));
    }
  })({"config": {"view": {"continuousWidth": 400, "continuousHeight": 300}}, "data": {"name": "data-db545bda9d2e8d5ffd28102a68e621bb"}, "mark": "line", "encoding": {"x": {"type": "quantitative", "field": "episode"}, "y": {"type": "quantitative", "field": "avg bpm", "scale": {"domain": [120, 150]}}}, "title": "A State of Trance - Average BPM of episode", "$schema": "https://vega.github.io/schema/vega-lite/v4.8.1.json", "datasets": {"data-db545bda9d2e8d5ffd28102a68e621bb": [{"episode": 0, "avg bpm": 135.77875}, {"episode": 1, "avg bpm": 138.86957142857142}, {"episode": 2, "avg bpm": 135.95900000000003}, {"episode": 3, "avg bpm": 135.295}, {"episode": 4, "avg bpm": 137.3078}, {"episode": 5, "avg bpm": 137.122875}, {"episode": 6, "avg bpm": 136.12875}, {"episode": 7, "avg bpm": 137.459125}, {"episode": 8, "avg bpm": 136.409}, {"episode": 9, "avg bpm": 138.58033333333333}, {"episode": 10, "avg bpm": 137.5172}, {"episode": 11, "avg bpm": 138.515}, {"episode": 12, "avg bpm": 138.5285}, {"episode": 13, "avg bpm": 135.861}, {"episode": 14, "avg bpm": 136.26149999999998}, {"episode": 15, "avg bpm": 138.09266666666667}, {"episode": 16, "avg bpm": 136.60533333333333}, {"episode": 17, "avg bpm": 136.7673333333333}, {"episode": 18, "avg bpm": 135.445}, {"episode": 19, "avg bpm": 135.24450000000002}, {"episode": 20, "avg bpm": 137.018}, {"episode": 21, "avg bpm": 139.79133333333334}, {"episode": 22, "avg bpm": 140.60899999999998}, {"episode": 23, "avg bpm": 138.4986}, {"episode": 24, "avg bpm": 137.71574999999999}, {"episode": 25, "avg bpm": 138.07}, {"episode": 26, "avg bpm": 138.9054}, {"episode": 27, "avg bpm": 139.02800000000002}, {"episode": 28, "avg bpm": 137.06583333333336}, {"episode": 29, "avg bpm": 139.99871428571427}, {"episode": 30, "avg bpm": 135.74475}, {"episode": 31, "avg bpm": 136.26457142857143}, {"episode": 32, "avg bpm": 144.61933333333334}, {"episode": 33, "avg bpm": 138.22199999999998}, {"episode": 34, "avg bpm": 138.38516666666666}, {"episode": 35, "avg bpm": 137.13842857142856}, {"episode": 36, "avg bpm": 140.3166666666667}, {"episode": 37, "avg bpm": 137.05533333333332}, {"episode": 38, "avg bpm": 137.9286666666667}, {"episode": 39, "avg bpm": 138.87571428571428}, {"episode": 40, "avg bpm": 141.91925}, {"episode": 41, "avg bpm": 141.19566666666665}, {"episode": 42, "avg bpm": 140.53566666666666}, {"episode": 43, "avg bpm": 136.28357142857143}, {"episode": 44, "avg bpm": 138.69183333333334}, {"episode": 45, "avg bpm": 138.473}, {"episode": 46, "avg bpm": 137.671}, {"episode": 47, "avg bpm": 134.623125}, {"episode": 48, "avg bpm": 137.00514285714286}, {"episode": 49, "avg bpm": 138.78814285714284}, {"episode": 50, "avg bpm": 137.69255555555554}, {"episode": 51, "avg bpm": 135.5205}, {"episode": 52, "avg bpm": 138.3696}, {"episode": 53, "avg bpm": 138.65566666666666}, {"episode": 54, "avg bpm": 140.29033333333334}, {"episode": 55, "avg bpm": 148.7766}, {"episode": 56, "avg bpm": 138.87983333333335}, {"episode": 57, "avg bpm": 139.02828571428572}, {"episode": 58, "avg bpm": 139.7276}, {"episode": 59, "avg bpm": 139.63266666666667}, {"episode": 60, "avg bpm": 139.386}, {"episode": 61, "avg bpm": 139.43866666666665}, {"episode": 62, "avg bpm": 139.90242857142854}, {"episode": 63, "avg bpm": 137.785}, {"episode": 64, "avg bpm": 137.789}, {"episode": 65, "avg bpm": 138.3738888888889}, {"episode": 66, "avg bpm": 139.39666666666668}, {"episode": 67, "avg bpm": 135.26999999999998}, {"episode": 68, "avg bpm": 140.1728}, {"episode": 69, "avg bpm": 135.591375}, {"episode": 70, "avg bpm": 137.80183333333332}, {"episode": 71, "avg bpm": 137.386}, {"episode": 72, "avg bpm": 140.33942857142856}, {"episode": 73, "avg bpm": 138.9662222222222}, {"episode": 74, "avg bpm": 140.03400000000002}, {"episode": 75, "avg bpm": 138.957}, {"episode": 76, "avg bpm": 139.52530769230768}, {"episode": 77, "avg bpm": 138.32633333333334}, {"episode": 78, "avg bpm": 138.32281818181818}, {"episode": 79, "avg bpm": 140.4349}, {"episode": 80, "avg bpm": 140.3574}, {"episode": 81, "avg bpm": 138.43919999999997}, {"episode": 82, "avg bpm": 137.4392222222222}, {"episode": 83, "avg bpm": 137.71928571428572}, {"episode": 84, "avg bpm": 138.7435714285714}, {"episode": 85, "avg bpm": 141.18491666666668}, {"episode": 86, "avg bpm": 137.269125}, {"episode": 87, "avg bpm": 135.37425}, {"episode": 88, "avg bpm": 138.086}, {"episode": 89, "avg bpm": 138.75060000000002}, {"episode": 90, "avg bpm": 136.90985714285716}, {"episode": 91, "avg bpm": 137.60391666666666}, {"episode": 92, "avg bpm": 136.978}, {"episode": 93, "avg bpm": 138.18333333333334}, {"episode": 94, "avg bpm": 146.68666666666667}, {"episode": 95, "avg bpm": 139.04825}, {"episode": 96, "avg bpm": 138.1762}, {"episode": 97, "avg bpm": 137.31514285714283}, {"episode": 98, "avg bpm": 140.97688888888888}, {"episode": 99, "avg bpm": 136.86914285714286}, {"episode": 100, "avg bpm": 138.2367777777778}, {"episode": 101, "avg bpm": 138.640625}, {"episode": 102, "avg bpm": 136.7052}, {"episode": 103, "avg bpm": 138.0888}, {"episode": 104, "avg bpm": 135.64842857142858}, {"episode": 105, "avg bpm": 139.80483333333333}, {"episode": 106, "avg bpm": 137.81830769230768}, {"episode": 107, "avg bpm": 138.47942857142854}, {"episode": 108, "avg bpm": 139.940875}, {"episode": 109, "avg bpm": 137.147}, {"episode": 110, "avg bpm": 136.61958333333334}, {"episode": 111, "avg bpm": 137.47363636363636}, {"episode": 112, "avg bpm": 136.13683333333333}, {"episode": 113, "avg bpm": 137.8683076923077}, {"episode": 114, "avg bpm": 137.87436363636363}, {"episode": 115, "avg bpm": 135.40439999999998}, {"episode": 116, "avg bpm": 138.15733333333333}, {"episode": 117, "avg bpm": 135.34466666666668}, {"episode": 118, "avg bpm": 136.80800000000002}, {"episode": 119, "avg bpm": 136.6595}, {"episode": 120, "avg bpm": 138.72385714285713}, {"episode": 121, "avg bpm": 136.915}, {"episode": 122, "avg bpm": 137.21570000000003}, {"episode": 123, "avg bpm": 136.96959999999999}, {"episode": 124, "avg bpm": 132.0812222222222}, {"episode": 125, "avg bpm": 135.717125}, {"episode": 126, "avg bpm": 138.14966666666666}, {"episode": 127, "avg bpm": 136.4634}, {"episode": 128, "avg bpm": 137.02883333333332}, {"episode": 129, "avg bpm": 136.30087500000002}, {"episode": 130, "avg bpm": 135.75822222222223}, {"episode": 131, "avg bpm": 137.14}, {"episode": 132, "avg bpm": 136.80316666666667}, {"episode": 133, "avg bpm": 138.3098}, {"episode": 134, "avg bpm": 138.14700000000002}, {"episode": 135, "avg bpm": 136.5217}, {"episode": 136, "avg bpm": 137.73850000000002}, {"episode": 137, "avg bpm": 137.33642857142857}, {"episode": 138, "avg bpm": 138.87833333333333}, {"episode": 139, "avg bpm": 136.5884}, {"episode": 140, "avg bpm": 136.79636363636365}, {"episode": 141, "avg bpm": 137.92569999999998}, {"episode": 142, "avg bpm": 138.206625}, {"episode": 143, "avg bpm": 135.52477777777779}, {"episode": 144, "avg bpm": 136.62358333333333}, {"episode": 145, "avg bpm": 136.599375}, {"episode": 146, "avg bpm": 138.34066666666666}, {"episode": 147, "avg bpm": 136.7629}, {"episode": 148, "avg bpm": 136.42414285714287}, {"episode": 149, "avg bpm": 137.76828571428572}, {"episode": 150, "avg bpm": 137.75257142857143}, {"episode": 151, "avg bpm": 136.0557}, {"episode": 152, "avg bpm": 138.2335}, {"episode": 153, "avg bpm": 134.29011111111112}, {"episode": 154, "avg bpm": 136.65136363636364}, {"episode": 155, "avg bpm": 137.1471}, {"episode": 156, "avg bpm": 139.40650000000002}, {"episode": 157, "avg bpm": 137.75227272727273}, {"episode": 158, "avg bpm": 136.93681818181818}, {"episode": 159, "avg bpm": 137.29636363636362}, {"episode": 160, "avg bpm": 137.54989999999998}, {"episode": 161, "avg bpm": 136.17233333333334}, {"episode": 162, "avg bpm": 137.276375}, {"episode": 163, "avg bpm": 137.6368181818182}, {"episode": 164, "avg bpm": 134.24733333333333}, {"episode": 165, "avg bpm": 135.65583333333333}, {"episode": 166, "avg bpm": 138.5762727272727}, {"episode": 167, "avg bpm": 135.68436363636363}, {"episode": 168, "avg bpm": 136.82825000000003}, {"episode": 169, "avg bpm": 135.42445454545458}, {"episode": 170, "avg bpm": 134.83041666666665}, {"episode": 171, "avg bpm": 135.73446666666666}, {"episode": 172, "avg bpm": 137.47742857142856}, {"episode": 173, "avg bpm": 136.05183333333335}, {"episode": 174, "avg bpm": 135.575625}, {"episode": 175, "avg bpm": 136.28544444444444}, {"episode": 176, "avg bpm": 136.09591666666668}, {"episode": 177, "avg bpm": 137.45444444444445}, {"episode": 178, "avg bpm": 135.50658333333334}, {"episode": 179, "avg bpm": 129.4562857142857}, {"episode": 180, "avg bpm": 135.55522222222223}, {"episode": 181, "avg bpm": 136.226}, {"episode": 182, "avg bpm": 136.65466666666669}, {"episode": 183, "avg bpm": 136.17725000000002}, {"episode": 184, "avg bpm": 135.741}, {"episode": 185, "avg bpm": 134.17035714285714}, {"episode": 186, "avg bpm": 135.5139090909091}, {"episode": 187, "avg bpm": 137.28716666666665}, {"episode": 188, "avg bpm": 136.808875}, {"episode": 189, "avg bpm": 134.3753888888889}, {"episode": 190, "avg bpm": 137.09781250000003}, {"episode": 191, "avg bpm": 136.390125}, {"episode": 192, "avg bpm": 136.18845454545453}, {"episode": 193, "avg bpm": 135.86170000000004}, {"episode": 194, "avg bpm": 136.16572727272728}, {"episode": 195, "avg bpm": 135.234375}, {"episode": 196, "avg bpm": 135.73615384615383}, {"episode": 197, "avg bpm": 135.94040540540541}, {"episode": 198, "avg bpm": 136.17453333333333}, {"episode": 199, "avg bpm": 135.44436363636365}, {"episode": 200, "avg bpm": 135.7317}, {"episode": 201, "avg bpm": 137.07164285714285}, {"episode": 202, "avg bpm": 136.6292}, {"episode": 203, "avg bpm": 136.35016666666667}, {"episode": 204, "avg bpm": 136.91412499999998}, {"episode": 205, "avg bpm": 137.88591666666665}, {"episode": 206, "avg bpm": 137.7781}, {"episode": 207, "avg bpm": 138.372}, {"episode": 208, "avg bpm": 135.1514}, {"episode": 209, "avg bpm": 135.8265}, {"episode": 210, "avg bpm": 136.12775}, {"episode": 211, "avg bpm": 136.59172727272724}, {"episode": 212, "avg bpm": 136.72179999999997}, {"episode": 213, "avg bpm": 136.8205714285714}, {"episode": 214, "avg bpm": 135.58400000000003}, {"episode": 215, "avg bpm": 133.697625}, {"episode": 216, "avg bpm": 135.30045454545456}, {"episode": 217, "avg bpm": 137.57653846153846}, {"episode": 218, "avg bpm": 135.86327272727272}, {"episode": 219, "avg bpm": 135.96406666666664}, {"episode": 220, "avg bpm": 136.09866666666665}, {"episode": 221, "avg bpm": 137.06758333333335}, {"episode": 222, "avg bpm": 135.1551}, {"episode": 223, "avg bpm": 134.95281818181817}, {"episode": 224, "avg bpm": 135.49733333333333}, {"episode": 225, "avg bpm": 137.30242857142858}, {"episode": 226, "avg bpm": 135.51277551020408}, {"episode": 227, "avg bpm": 136.30177777777777}, {"episode": 228, "avg bpm": 136.24024999999997}, {"episode": 229, "avg bpm": 136.1632222222222}, {"episode": 230, "avg bpm": 136.4811111111111}, {"episode": 231, "avg bpm": 136.9388}, {"episode": 232, "avg bpm": 136.86964285714288}, {"episode": 233, "avg bpm": 136.758}, {"episode": 234, "avg bpm": 136.4348888888889}, {"episode": 235, "avg bpm": 135.9394}, {"episode": 236, "avg bpm": 136.8038666666667}, {"episode": 237, "avg bpm": 134.3715}, {"episode": 238, "avg bpm": 137.8883076923077}, {"episode": 239, "avg bpm": 134.40466666666666}, {"episode": 240, "avg bpm": 135.8553076923077}, {"episode": 241, "avg bpm": 136.82487500000002}, {"episode": 242, "avg bpm": 134.91481818181816}, {"episode": 243, "avg bpm": 135.44408333333334}, {"episode": 244, "avg bpm": 136.13533333333334}, {"episode": 245, "avg bpm": 135.3953}, {"episode": 246, "avg bpm": 134.3926}, {"episode": 247, "avg bpm": 135.77933333333334}, {"episode": 248, "avg bpm": 136.11323529411766}, {"episode": 249, "avg bpm": 136.13509090909093}, {"episode": 250, "avg bpm": 134.7114}, {"episode": 251, "avg bpm": 136.0399166666667}, {"episode": 252, "avg bpm": 139.27100000000002}, {"episode": 253, "avg bpm": 137.27730000000003}, {"episode": 254, "avg bpm": 136.1520909090909}, {"episode": 255, "avg bpm": 136.050875}, {"episode": 256, "avg bpm": 136.20416666666668}, {"episode": 257, "avg bpm": 136.4595}, {"episode": 258, "avg bpm": 135.16314285714287}, {"episode": 259, "avg bpm": 137.1573}, {"episode": 260, "avg bpm": 137.17891666666665}, {"episode": 261, "avg bpm": 137.87033333333332}, {"episode": 262, "avg bpm": 135.77462500000001}, {"episode": 263, "avg bpm": 137.29654545454545}, {"episode": 264, "avg bpm": 135.650375}, {"episode": 265, "avg bpm": 135.70463636363635}, {"episode": 266, "avg bpm": 135.9524}, {"episode": 267, "avg bpm": 135.67015384615382}, {"episode": 268, "avg bpm": 137.7816}, {"episode": 269, "avg bpm": 136.4588}, {"episode": 270, "avg bpm": 135.78928571428574}, {"episode": 271, "avg bpm": 136.3692727272727}, {"episode": 272, "avg bpm": 136.0135}, {"episode": 273, "avg bpm": 136.79049999999998}, {"episode": 274, "avg bpm": 136.7731111111111}, {"episode": 275, "avg bpm": 135.61485714285715}, {"episode": 276, "avg bpm": 135.23208163265303}, {"episode": 277, "avg bpm": 136.16036363636363}, {"episode": 278, "avg bpm": 137.01784615384616}, {"episode": 279, "avg bpm": 136.15593333333334}, {"episode": 280, "avg bpm": 137.62727272727273}, {"episode": 281, "avg bpm": 137.29478571428572}, {"episode": 282, "avg bpm": 137.31300000000002}, {"episode": 283, "avg bpm": 134.97085714285714}, {"episode": 284, "avg bpm": 135.16891666666666}, {"episode": 285, "avg bpm": 137.21688888888886}, {"episode": 286, "avg bpm": 136.18464285714285}, {"episode": 287, "avg bpm": 136.54412499999998}, {"episode": 288, "avg bpm": 136.57708333333335}, {"episode": 289, "avg bpm": 134.52566666666667}, {"episode": 290, "avg bpm": 134.46945454545454}, {"episode": 291, "avg bpm": 135.85}, {"episode": 292, "avg bpm": 135.6542727272727}, {"episode": 293, "avg bpm": 135.01569999999998}, {"episode": 294, "avg bpm": 136.698}, {"episode": 295, "avg bpm": 135.49628571428573}, {"episode": 296, "avg bpm": 135.15976923076923}, {"episode": 297, "avg bpm": 135.64700000000002}, {"episode": 298, "avg bpm": 135.44324999999998}, {"episode": 299, "avg bpm": 136.0727692307692}, {"episode": 300, "avg bpm": 135.39589999999998}, {"episode": 301, "avg bpm": 134.6199}, {"episode": 302, "avg bpm": 135.0}, {"episode": 303, "avg bpm": 135.2457777777778}, {"episode": 304, "avg bpm": 135.2378888888889}, {"episode": 305, "avg bpm": 135.227}, {"episode": 306, "avg bpm": 137.02291666666667}, {"episode": 307, "avg bpm": 135.843}, {"episode": 308, "avg bpm": 132.457}, {"episode": 309, "avg bpm": 136.1057}, {"episode": 310, "avg bpm": 134.55041666666668}, {"episode": 311, "avg bpm": 135.43024999999997}, {"episode": 312, "avg bpm": 134.28766666666667}, {"episode": 313, "avg bpm": 133.21814285714282}, {"episode": 314, "avg bpm": 133.897}, {"episode": 315, "avg bpm": 133.80329999999998}, {"episode": 316, "avg bpm": 133.60572727272728}, {"episode": 317, "avg bpm": 135.20009999999996}, {"episode": 318, "avg bpm": 134.9646666666667}, {"episode": 319, "avg bpm": 134.27381818181817}, {"episode": 320, "avg bpm": 135.4997142857143}, {"episode": 321, "avg bpm": 134.98430000000002}, {"episode": 322, "avg bpm": 134.31535714285715}, {"episode": 323, "avg bpm": 133.6753125}, {"episode": 324, "avg bpm": 134.496625}, {"episode": 325, "avg bpm": 135.003625}, {"episode": 326, "avg bpm": 134.36454545454546}, {"episode": 327, "avg bpm": 135.24626530612247}, {"episode": 328, "avg bpm": 134.32042857142855}, {"episode": 329, "avg bpm": 132.90089999999998}, {"episode": 330, "avg bpm": 133.91227272727272}, {"episode": 331, "avg bpm": 136.54888888888888}, {"episode": 332, "avg bpm": 134.3184375}, {"episode": 333, "avg bpm": 133.9065}, {"episode": 334, "avg bpm": 134.07353333333333}, {"episode": 335, "avg bpm": 136.4604}, {"episode": 336, "avg bpm": 134.3936666666667}, {"episode": 337, "avg bpm": 135.3023}, {"episode": 338, "avg bpm": 135.31136363636364}, {"episode": 339, "avg bpm": 133.84133333333332}, {"episode": 340, "avg bpm": 135.17733333333334}, {"episode": 341, "avg bpm": 133.9919166666667}, {"episode": 342, "avg bpm": 134.8081875}, {"episode": 343, "avg bpm": 133.91195}, {"episode": 344, "avg bpm": 134.35383333333334}, {"episode": 345, "avg bpm": 135.3487142857143}, {"episode": 346, "avg bpm": 134.67446153846154}, {"episode": 347, "avg bpm": 136.42264705882351}, {"episode": 348, "avg bpm": 134.2847857142857}, {"episode": 349, "avg bpm": 135.59099999999998}, {"episode": 350, "avg bpm": 135.36118181818182}, {"episode": 351, "avg bpm": 135.27290909090908}, {"episode": 352, "avg bpm": 133.64980000000003}, {"episode": 353, "avg bpm": 135.8192142857143}, {"episode": 354, "avg bpm": 134.7508333333333}, {"episode": 355, "avg bpm": 134.28314285714285}, {"episode": 356, "avg bpm": 134.99584615384612}, {"episode": 357, "avg bpm": 134.44377777777777}, {"episode": 358, "avg bpm": 134.08625}, {"episode": 359, "avg bpm": 133.66772727272726}, {"episode": 360, "avg bpm": 136.02515384615387}, {"episode": 361, "avg bpm": 136.20584615384615}, {"episode": 362, "avg bpm": 135.7968333333333}, {"episode": 363, "avg bpm": 135.27272727272728}, {"episode": 364, "avg bpm": 134.5308888888889}, {"episode": 365, "avg bpm": 133.71795454545455}, {"episode": 366, "avg bpm": 135.19113333333334}, {"episode": 367, "avg bpm": 134.83738461538462}, {"episode": 368, "avg bpm": 134.89399999999998}, {"episode": 369, "avg bpm": 134.00091666666665}, {"episode": 370, "avg bpm": 135.06646153846154}, {"episode": 371, "avg bpm": 135.524875}, {"episode": 372, "avg bpm": 134.15591666666666}, {"episode": 373, "avg bpm": 133.79273333333333}, {"episode": 374, "avg bpm": 132.12300000000002}, {"episode": 375, "avg bpm": 133.06907142857145}, {"episode": 376, "avg bpm": 134.74721428571428}, {"episode": 377, "avg bpm": 134.74715384615382}, {"episode": 378, "avg bpm": 129.38802040816327}, {"episode": 379, "avg bpm": 134.69807692307694}, {"episode": 380, "avg bpm": 134.5194}, {"episode": 381, "avg bpm": 134.52041666666665}, {"episode": 382, "avg bpm": 134.01357142857142}, {"episode": 383, "avg bpm": 134.01464285714286}, {"episode": 384, "avg bpm": 134.8552857142857}, {"episode": 385, "avg bpm": 135.30438461538463}, {"episode": 386, "avg bpm": 135.3860714285714}, {"episode": 387, "avg bpm": 134.37378571428573}, {"episode": 388, "avg bpm": 134.89718750000003}, {"episode": 389, "avg bpm": 134.84369230769232}, {"episode": 390, "avg bpm": 134.91699999999997}, {"episode": 391, "avg bpm": 134.87564285714282}, {"episode": 392, "avg bpm": 135.59064285714285}, {"episode": 393, "avg bpm": 134.08111764705885}, {"episode": 394, "avg bpm": 137.125625}, {"episode": 395, "avg bpm": 135.00935714285717}, {"episode": 396, "avg bpm": 134.43617647058824}, {"episode": 397, "avg bpm": 133.86864285714285}, {"episode": 398, "avg bpm": 134.28346666666667}, {"episode": 399, "avg bpm": 134.1881052631579}, {"episode": 400, "avg bpm": 134.77670588235296}, {"episode": 401, "avg bpm": 134.52462500000001}, {"episode": 402, "avg bpm": 133.03575}, {"episode": 403, "avg bpm": 133.8165}, {"episode": 404, "avg bpm": 133.26100000000002}, {"episode": 405, "avg bpm": 132.43207142857142}, {"episode": 406, "avg bpm": 137.08030769230766}, {"episode": 407, "avg bpm": 135.23686666666669}, {"episode": 408, "avg bpm": 136.11092857142856}, {"episode": 409, "avg bpm": 135.2796153846154}, {"episode": 410, "avg bpm": 134.70864705882354}, {"episode": 411, "avg bpm": 134.49244444444446}, {"episode": 412, "avg bpm": 135.23292857142857}, {"episode": 413, "avg bpm": 135.1433846153846}, {"episode": 414, "avg bpm": 137.78884210526314}, {"episode": 415, "avg bpm": 133.03749999999997}, {"episode": 416, "avg bpm": 134.36350000000002}, {"episode": 417, "avg bpm": 136.25366666666665}, {"episode": 418, "avg bpm": 137.16929411764707}, {"episode": 419, "avg bpm": 135.90914285714285}, {"episode": 420, "avg bpm": 134.9467142857143}, {"episode": 421, "avg bpm": 133.341375}, {"episode": 422, "avg bpm": 134.61294444444442}, {"episode": 423, "avg bpm": 136.47270588235295}, {"episode": 424, "avg bpm": 135.34816666666663}, {"episode": 425, "avg bpm": 136.10176470588235}, {"episode": 426, "avg bpm": 133.65652941176472}, {"episode": 427, "avg bpm": 134.9131818181818}, {"episode": 428, "avg bpm": 135.05576470588235}, {"episode": 429, "avg bpm": 133.07565306122447}, {"episode": 430, "avg bpm": 135.08392307692307}, {"episode": 431, "avg bpm": 134.82935714285713}, {"episode": 432, "avg bpm": 135.5085714285714}, {"episode": 433, "avg bpm": 134.80366666666666}, {"episode": 434, "avg bpm": 134.9720714285714}, {"episode": 435, "avg bpm": 133.72566666666665}, {"episode": 436, "avg bpm": 133.4702142857143}, {"episode": 437, "avg bpm": 134.76053333333334}, {"episode": 438, "avg bpm": 134.0622142857143}, {"episode": 439, "avg bpm": 134.07}, {"episode": 440, "avg bpm": 134.4936923076923}, {"episode": 441, "avg bpm": 134.19775}, {"episode": 442, "avg bpm": 136.22035714285715}, {"episode": 443, "avg bpm": 134.3706875}, {"episode": 444, "avg bpm": 134.28822222222223}, {"episode": 445, "avg bpm": 134.36694736842105}, {"episode": 446, "avg bpm": 134.6929375}, {"episode": 447, "avg bpm": 134.25047058823532}, {"episode": 448, "avg bpm": 133.5583888888889}, {"episode": 449, "avg bpm": 135.2905263157895}, {"episode": 450, "avg bpm": 133.21213333333333}, {"episode": 451, "avg bpm": 135.3856153846154}, {"episode": 452, "avg bpm": 132.474625}, {"episode": 453, "avg bpm": 134.48542857142857}, {"episode": 454, "avg bpm": 134.50656250000003}, {"episode": 455, "avg bpm": 134.71914285714283}, {"episode": 456, "avg bpm": 134.9620625}, {"episode": 457, "avg bpm": 135.15157142857143}, {"episode": 458, "avg bpm": 134.85358823529415}, {"episode": 459, "avg bpm": 132.25161538461538}, {"episode": 460, "avg bpm": 134.65099999999998}, {"episode": 461, "avg bpm": 132.0472777777778}, {"episode": 462, "avg bpm": 133.33523529411764}, {"episode": 463, "avg bpm": 134.00425}, {"episode": 464, "avg bpm": 134.9832857142857}, {"episode": 465, "avg bpm": 133.71814285714285}, {"episode": 466, "avg bpm": 134.3264666666667}, {"episode": 467, "avg bpm": 132.92214285714286}, {"episode": 468, "avg bpm": 133.67686666666665}, {"episode": 469, "avg bpm": 136.46014285714287}, {"episode": 470, "avg bpm": 134.6082222222222}, {"episode": 471, "avg bpm": 134.48476470588236}, {"episode": 472, "avg bpm": 133.91225}, {"episode": 473, "avg bpm": 134.7495}, {"episode": 474, "avg bpm": 134.9245}, {"episode": 475, "avg bpm": 134.11694444444447}, {"episode": 476, "avg bpm": 134.26073333333335}, {"episode": 477, "avg bpm": 133.91146153846154}, {"episode": 478, "avg bpm": 131.28538095238096}, {"episode": 479, "avg bpm": 134.9710588235294}, {"episode": 480, "avg bpm": 134.30775}, {"episode": 481, "avg bpm": 132.94133333333332}, {"episode": 482, "avg bpm": 133.88610526315787}, {"episode": 483, "avg bpm": 131.0509375}, {"episode": 484, "avg bpm": 134.23524999999998}, {"episode": 485, "avg bpm": 133.72011764705883}, {"episode": 486, "avg bpm": 133.29817647058826}, {"episode": 487, "avg bpm": 133.89711111111112}, {"episode": 488, "avg bpm": 134.25459999999998}, {"episode": 489, "avg bpm": 132.99021052631576}, {"episode": 490, "avg bpm": 133.5433}, {"episode": 491, "avg bpm": 133.99422222222222}, {"episode": 492, "avg bpm": 134.3973333333333}, {"episode": 493, "avg bpm": 133.7203}, {"episode": 494, "avg bpm": 131.69121052631579}, {"episode": 495, "avg bpm": 132.08741666666666}, {"episode": 496, "avg bpm": 132.9712352941176}, {"episode": 497, "avg bpm": 133.75306249999997}, {"episode": 498, "avg bpm": 133.8055909090909}, {"episode": 499, "avg bpm": 133.53168421052632}, {"episode": 500, "avg bpm": 133.2331}, {"episode": 501, "avg bpm": 133.29299999999998}, {"episode": 502, "avg bpm": 133.3485}, {"episode": 503, "avg bpm": 132.83061904761902}, {"episode": 504, "avg bpm": 133.73441666666668}, {"episode": 505, "avg bpm": 133.26446153846152}, {"episode": 506, "avg bpm": 133.78192857142855}, {"episode": 507, "avg bpm": 133.35394444444447}, {"episode": 508, "avg bpm": 133.07969230769228}, {"episode": 509, "avg bpm": 133.18117647058824}, {"episode": 510, "avg bpm": 133.41184210526316}, {"episode": 511, "avg bpm": 133.28205555555553}, {"episode": 512, "avg bpm": 132.6995}, {"episode": 513, "avg bpm": 132.18327272727274}, {"episode": 514, "avg bpm": 133.2405}, {"episode": 515, "avg bpm": 133.23033333333336}, {"episode": 516, "avg bpm": 131.52866666666665}, {"episode": 517, "avg bpm": 132.6044}, {"episode": 518, "avg bpm": 132.68534782608694}, {"episode": 519, "avg bpm": 133.26180000000002}, {"episode": 520, "avg bpm": 133.13899999999998}, {"episode": 521, "avg bpm": 133.95661904761906}, {"episode": 522, "avg bpm": 134.75094444444443}, {"episode": 523, "avg bpm": 134.24488235294118}, {"episode": 524, "avg bpm": 134.21370588235297}, {"episode": 525, "avg bpm": 134.58715}, {"episode": 526, "avg bpm": 133.66299999999998}, {"episode": 527, "avg bpm": 134.3373333333333}, {"episode": 528, "avg bpm": 134.59395454545455}, {"episode": 529, "avg bpm": 133.66799999999998}, {"episode": 530, "avg bpm": 133.25786666666673}, {"episode": 531, "avg bpm": 134.4124}, {"episode": 532, "avg bpm": 135.0685882352941}, {"episode": 533, "avg bpm": 133.86153333333334}, {"episode": 534, "avg bpm": 133.851}, {"episode": 535, "avg bpm": 133.45788235294117}, {"episode": 536, "avg bpm": 133.25173333333333}, {"episode": 537, "avg bpm": 134.64512499999998}, {"episode": 538, "avg bpm": 133.72888888888892}, {"episode": 539, "avg bpm": 133.5928636363636}, {"episode": 540, "avg bpm": 133.4924761904762}, {"episode": 541, "avg bpm": 133.3009411764706}, {"episode": 542, "avg bpm": 133.41415789473686}, {"episode": 543, "avg bpm": 132.42494736842104}, {"episode": 544, "avg bpm": 133.05465}, {"episode": 545, "avg bpm": 132.5524090909091}, {"episode": 546, "avg bpm": 133.9938095238095}, {"episode": 547, "avg bpm": 131.16814999999997}, {"episode": 548, "avg bpm": 133.12639130434783}, {"episode": 549, "avg bpm": 136.1048076923077}, {"episode": 550, "avg bpm": 133.48545454545456}, {"episode": 551, "avg bpm": 133.23227272727277}, {"episode": 552, "avg bpm": 133.82485714285713}, {"episode": 553, "avg bpm": 134.72110526315788}, {"episode": 554, "avg bpm": 134.54356521739132}, {"episode": 555, "avg bpm": 134.6765714285714}, {"episode": 556, "avg bpm": 133.12668421052626}, {"episode": 557, "avg bpm": 132.70552631578943}, {"episode": 558, "avg bpm": 133.94910526315792}, {"episode": 559, "avg bpm": 134.06355}, {"episode": 560, "avg bpm": 133.71246666666667}, {"episode": 561, "avg bpm": 134.39084210526318}, {"episode": 562, "avg bpm": 134.75625}, {"episode": 563, "avg bpm": 133.95314285714286}, {"episode": 564, "avg bpm": 135.04578947368418}, {"episode": 565, "avg bpm": 134.38052380952382}, {"episode": 566, "avg bpm": 132.00360714285713}, {"episode": 567, "avg bpm": 134.66365217391305}, {"episode": 568, "avg bpm": 134.89753846153846}, {"episode": 569, "avg bpm": 134.515875}, {"episode": 570, "avg bpm": 134.4541111111111}, {"episode": 571, "avg bpm": 134.9978181818182}, {"episode": 572, "avg bpm": 134.07430000000002}, {"episode": 573, "avg bpm": 134.90129166666668}, {"episode": 574, "avg bpm": 135.04428571428568}, {"episode": 575, "avg bpm": 133.2078}, {"episode": 576, "avg bpm": 134.0723181818182}, {"episode": 577, "avg bpm": 131.04621052631578}, {"episode": 578, "avg bpm": 133.50090476190476}, {"episode": 579, "avg bpm": 134.7533043478261}, {"episode": 580, "avg bpm": 133.98877777777778}, {"episode": 581, "avg bpm": 129.40465306122448}, {"episode": 582, "avg bpm": 133.85252380952377}, {"episode": 583, "avg bpm": 133.59522222222222}, {"episode": 584, "avg bpm": 134.17882608695652}, {"episode": 585, "avg bpm": 132.74106250000003}, {"episode": 586, "avg bpm": 133.39036363636365}, {"episode": 587, "avg bpm": 134.47417647058825}, {"episode": 588, "avg bpm": 133.2506923076923}, {"episode": 589, "avg bpm": 132.79383333333334}, {"episode": 590, "avg bpm": 131.4927}, {"episode": 591, "avg bpm": 133.333}, {"episode": 592, "avg bpm": 135.07495454545457}, {"episode": 593, "avg bpm": 133.08928571428572}, {"episode": 594, "avg bpm": 133.2677727272727}, {"episode": 595, "avg bpm": 132.9865882352941}, {"episode": 596, "avg bpm": 133.50490909090905}, {"episode": 597, "avg bpm": 137.9895625}, {"episode": 598, "avg bpm": 134.4668}, {"episode": 599, "avg bpm": 134.9872173913043}, {"episode": 600, "avg bpm": 133.17633333333336}, {"episode": 601, "avg bpm": 131.85015}, {"episode": 602, "avg bpm": 134.93716000000003}, {"episode": 603, "avg bpm": 133.78467999999998}, {"episode": 604, "avg bpm": 134.14804166666667}, {"episode": 605, "avg bpm": 138.03662500000002}, {"episode": 606, "avg bpm": 135.8211}, {"episode": 607, "avg bpm": 135.2373846153846}, {"episode": 608, "avg bpm": 134.45925000000003}, {"episode": 609, "avg bpm": 135.3905714285714}, {"episode": 610, "avg bpm": 135.95565217391308}, {"episode": 611, "avg bpm": 137.05584000000002}, {"episode": 612, "avg bpm": 135.84681481481482}, {"episode": 613, "avg bpm": 135.41314285714284}, {"episode": 614, "avg bpm": 138.34288}, {"episode": 615, "avg bpm": 135.4504230769231}, {"episode": 616, "avg bpm": 135.26819230769232}, {"episode": 617, "avg bpm": 133.21976190476192}, {"episode": 618, "avg bpm": 135.6725161290323}, {"episode": 619, "avg bpm": 135.627}, {"episode": 620, "avg bpm": 134.84046153846154}, {"episode": 621, "avg bpm": 135.25508333333332}, {"episode": 622, "avg bpm": 136.03408000000002}, {"episode": 623, "avg bpm": 135.99004166666666}, {"episode": 624, "avg bpm": 136.5695}, {"episode": 625, "avg bpm": 134.76760869565217}, {"episode": 626, "avg bpm": 136.67164285714284}, {"episode": 627, "avg bpm": 135.61565384615386}, {"episode": 628, "avg bpm": 135.74842307692305}, {"episode": 629, "avg bpm": 135.80911111111112}, {"episode": 630, "avg bpm": 137.99914285714286}, {"episode": 631, "avg bpm": 136.41728}, {"episode": 632, "avg bpm": 134.74996551724135}, {"episode": 633, "avg bpm": 134.34603703703704}, {"episode": 634, "avg bpm": 133.89222222222222}, {"episode": 635, "avg bpm": 134.56233333333333}, {"episode": 636, "avg bpm": 135.3165}, {"episode": 637, "avg bpm": 134.6307222222222}, {"episode": 638, "avg bpm": 135.33350000000002}, {"episode": 639, "avg bpm": 135.2651304347826}, {"episode": 640, "avg bpm": 135.372375}, {"episode": 641, "avg bpm": 136.03691304347828}, {"episode": 642, "avg bpm": 135.30033333333336}, {"episode": 643, "avg bpm": 133.7481363636364}, {"episode": 644, "avg bpm": 135.46947826086955}, {"episode": 645, "avg bpm": 135.04892307692307}, {"episode": 646, "avg bpm": 135.16562068965519}, {"episode": 647, "avg bpm": 134.30184615384616}, {"episode": 648, "avg bpm": 137.80178571428573}, {"episode": 649, "avg bpm": 136.23066666666665}, {"episode": 650, "avg bpm": 134.3855925925926}, {"episode": 651, "avg bpm": 134.0103333333333}, {"episode": 652, "avg bpm": 134.3513076923077}, {"episode": 653, "avg bpm": 134.95114814814815}, {"episode": 654, "avg bpm": 133.0625}, {"episode": 655, "avg bpm": 138.00204545454548}, {"episode": 656, "avg bpm": 135.99596153846156}, {"episode": 657, "avg bpm": 134.5968888888889}, {"episode": 658, "avg bpm": 135.3998148148148}, {"episode": 659, "avg bpm": 134.48723809523813}, {"episode": 660, "avg bpm": 134.12791666666666}, {"episode": 661, "avg bpm": 134.12708333333333}, {"episode": 662, "avg bpm": 134.41958620689655}, {"episode": 663, "avg bpm": 134.24616666666665}, {"episode": 664, "avg bpm": 132.93590909090912}, {"episode": 665, "avg bpm": 133.77978260869565}, {"episode": 666, "avg bpm": 134.44276000000002}, {"episode": 667, "avg bpm": 134.8653461538462}, {"episode": 668, "avg bpm": 135.18003124999998}, {"episode": 669, "avg bpm": 138.00224000000003}, {"episode": 670, "avg bpm": 134.03676923076924}, {"episode": 671, "avg bpm": 133.96868181818184}, {"episode": 672, "avg bpm": 134.22039130434786}, {"episode": 673, "avg bpm": 134.93813333333335}, {"episode": 674, "avg bpm": 134.13500000000002}, {"episode": 675, "avg bpm": 132.05407692307693}, {"episode": 676, "avg bpm": 134.4766}, {"episode": 677, "avg bpm": 132.42891304347825}, {"episode": 678, "avg bpm": 133.34482608695652}, {"episode": 679, "avg bpm": 134.10988888888892}, {"episode": 680, "avg bpm": 134.97084615384614}, {"episode": 681, "avg bpm": 134.6736071428571}, {"episode": 682, "avg bpm": 134.69437499999995}, {"episode": 683, "avg bpm": 130.8484666666667}, {"episode": 684, "avg bpm": 132.55827999999997}, {"episode": 685, "avg bpm": 134.1382962962963}, {"episode": 686, "avg bpm": 134.673}, {"episode": 687, "avg bpm": 133.74129166666668}, {"episode": 688, "avg bpm": 135.85500000000002}, {"episode": 689, "avg bpm": 133.98184210526315}, {"episode": 690, "avg bpm": 133.14233333333337}, {"episode": 691, "avg bpm": 135.042}, {"episode": 692, "avg bpm": 134.2748148148148}, {"episode": 693, "avg bpm": 135.89253571428569}, {"episode": 694, "avg bpm": 132.47384615384618}, {"episode": 695, "avg bpm": 133.4268888888889}, {"episode": 696, "avg bpm": 132.8759393939394}, {"episode": 697, "avg bpm": 134.04812903225803}, {"episode": 698, "avg bpm": 130.34862499999997}, {"episode": 699, "avg bpm": 133.36096666666666}, {"episode": 700, "avg bpm": 133.92703333333336}, {"episode": 701, "avg bpm": 134.13889655172414}, {"episode": 702, "avg bpm": 133.61031999999997}, {"episode": 703, "avg bpm": 133.60486666666665}, {"episode": 704, "avg bpm": 133.50875862068966}, {"episode": 705, "avg bpm": 131.67403333333334}, {"episode": 706, "avg bpm": 133.16910714285711}, {"episode": 707, "avg bpm": 133.32366666666664}, {"episode": 708, "avg bpm": 132.19451851851852}, {"episode": 709, "avg bpm": 130.29041379310345}, {"episode": 710, "avg bpm": 131.32803846153848}, {"episode": 711, "avg bpm": 132.93415384615383}, {"episode": 712, "avg bpm": 132.62733333333333}, {"episode": 713, "avg bpm": 131.45742307692308}, {"episode": 714, "avg bpm": 133.33442857142856}, {"episode": 715, "avg bpm": 131.50799999999995}, {"episode": 716, "avg bpm": 133.80816000000002}, {"episode": 717, "avg bpm": 134.171}, {"episode": 718, "avg bpm": 133.99514285714287}, {"episode": 719, "avg bpm": 132.35024137931038}, {"episode": 720, "avg bpm": 134.85441666666665}, {"episode": 721, "avg bpm": 135.79308}, {"episode": 722, "avg bpm": 132.1653846153846}, {"episode": 723, "avg bpm": 134.32803703703706}, {"episode": 724, "avg bpm": 133.8720689655172}, {"episode": 725, "avg bpm": 134.00155555555554}, {"episode": 726, "avg bpm": 132.85689285714287}, {"episode": 727, "avg bpm": 130.64192857142856}, {"episode": 728, "avg bpm": 131.32431034482758}, {"episode": 729, "avg bpm": 132.8202692307692}, {"episode": 730, "avg bpm": 131.69824137931033}, {"episode": 731, "avg bpm": 133.9209230769231}, {"episode": 732, "avg bpm": 133.85075999999998}, {"episode": 733, "avg bpm": 133.04072000000002}, {"episode": 734, "avg bpm": 132.44504347826089}, {"episode": 735, "avg bpm": 132.90640740740741}, {"episode": 736, "avg bpm": 136.77028571428576}, {"episode": 737, "avg bpm": 131.21446153846153}, {"episode": 738, "avg bpm": 133.81199999999998}, {"episode": 739, "avg bpm": 134.68617647058824}, {"episode": 740, "avg bpm": 135.19875}, {"episode": 741, "avg bpm": 134.49836363636362}, {"episode": 742, "avg bpm": 133.215724137931}, {"episode": 743, "avg bpm": 134.39420833333332}, {"episode": 744, "avg bpm": 134.0848}, {"episode": 745, "avg bpm": 133.78703124999998}, {"episode": 746, "avg bpm": 133.61044444444445}, {"episode": 747, "avg bpm": 133.89519354838708}, {"episode": 748, "avg bpm": 134.25006666666667}, {"episode": 749, "avg bpm": 134.49348275862067}, {"episode": 750, "avg bpm": 134.52486206896558}, {"episode": 751, "avg bpm": 133.24758620689656}, {"episode": 752, "avg bpm": 134.78279310344826}, {"episode": 753, "avg bpm": 135.14206666666666}, {"episode": 754, "avg bpm": 133.30951851851853}, {"episode": 755, "avg bpm": 134.39432142857146}, {"episode": 756, "avg bpm": 133.32682758620692}, {"episode": 757, "avg bpm": 133.92216666666667}, {"episode": 758, "avg bpm": 135.60563333333334}, {"episode": 759, "avg bpm": 134.61039285714284}, {"episode": 760, "avg bpm": 132.22258064516132}, {"episode": 761, "avg bpm": 134.7048}, {"episode": 762, "avg bpm": 133.67548387096778}, {"episode": 763, "avg bpm": 133.5998620689655}, {"episode": 764, "avg bpm": 133.51309677419354}, {"episode": 765, "avg bpm": 132.3486}, {"episode": 766, "avg bpm": 135.2845806451613}, {"episode": 767, "avg bpm": 137.99186956521737}, {"episode": 768, "avg bpm": 133.78071874999998}, {"episode": 769, "avg bpm": 133.67255172413795}, {"episode": 770, "avg bpm": 132.91683333333333}, {"episode": 771, "avg bpm": 132.2058666666667}, {"episode": 772, "avg bpm": 132.2489}, {"episode": 773, "avg bpm": 133.7724827586207}, {"episode": 774, "avg bpm": 133.43496428571427}, {"episode": 775, "avg bpm": 134.3747931034483}, {"episode": 776, "avg bpm": 134.1148}, {"episode": 777, "avg bpm": 129.8170625}, {"episode": 778, "avg bpm": 132.95533333333333}, {"episode": 779, "avg bpm": 134.04316666666668}, {"episode": 780, "avg bpm": 134.47251612903224}, {"episode": 781, "avg bpm": 134.41713333333328}, {"episode": 782, "avg bpm": 133.67683333333335}, {"episode": 783, "avg bpm": 132.69382142857143}, {"episode": 784, "avg bpm": 129.7875945945946}, {"episode": 785, "avg bpm": 135.28489285714286}, {"episode": 786, "avg bpm": 137.93823529411767}, {"episode": 787, "avg bpm": 134.23067741935483}, {"episode": 788, "avg bpm": 133.30783333333335}, {"episode": 789, "avg bpm": 132.78792307692308}, {"episode": 790, "avg bpm": 133.193}, {"episode": 791, "avg bpm": 132.86925925925928}, {"episode": 792, "avg bpm": 131.17041666666668}, {"episode": 793, "avg bpm": 134.82616}, {"episode": 794, "avg bpm": 134.30442857142856}, {"episode": 795, "avg bpm": 134.13833333333332}, {"episode": 796, "avg bpm": 131.71124}, {"episode": 797, "avg bpm": 132.5643846153846}, {"episode": 798, "avg bpm": 132.77835714285715}, {"episode": 799, "avg bpm": 133.99949999999998}, {"episode": 800, "avg bpm": 133.92342307692306}, {"episode": 801, "avg bpm": 132.23586206896556}, {"episode": 802, "avg bpm": 134.13236666666668}, {"episode": 803, "avg bpm": 133.02360714285712}, {"episode": 804, "avg bpm": 134.41214814814813}, {"episode": 805, "avg bpm": 134.16785}, {"episode": 806, "avg bpm": 134.1669259259259}, {"episode": 807, "avg bpm": 134.2792592592593}, {"episode": 808, "avg bpm": 134.74303703703703}, {"episode": 809, "avg bpm": 133.08244444444446}, {"episode": 810, "avg bpm": 133.54130769230767}, {"episode": 811, "avg bpm": 133.3092142857143}, {"episode": 812, "avg bpm": 132.18339285714282}, {"episode": 813, "avg bpm": 134.57892857142855}, {"episode": 814, "avg bpm": 133.50725000000003}, {"episode": 815, "avg bpm": 135.084}, {"episode": 816, "avg bpm": 133.09765217391302}, {"episode": 817, "avg bpm": 131.25976923076922}, {"episode": 818, "avg bpm": 136.49880000000002}, {"episode": 819, "avg bpm": 137.45329629629632}, {"episode": 820, "avg bpm": 136.04726666666667}, {"episode": 821, "avg bpm": 134.59479310344827}, {"episode": 822, "avg bpm": 134.36700000000002}, {"episode": 823, "avg bpm": 129.83504166666663}, {"episode": 824, "avg bpm": 133.70152000000002}, {"episode": 825, "avg bpm": 136.77075999999997}, {"episode": 826, "avg bpm": 136.0008823529412}, {"episode": 827, "avg bpm": 133.94448}, {"episode": 828, "avg bpm": 132.54734782608696}, {"episode": 829, "avg bpm": 133.83595652173912}, {"episode": 830, "avg bpm": 133.4032}, {"episode": 831, "avg bpm": 132.65344000000002}, {"episode": 832, "avg bpm": 133.27492857142857}, {"episode": 833, "avg bpm": 133.46977272727273}, {"episode": 834, "avg bpm": 132.91824137931033}, {"episode": 835, "avg bpm": 133.2641818181818}, {"episode": 836, "avg bpm": 136.3166666666667}, {"episode": 837, "avg bpm": 132.61037931034483}, {"episode": 838, "avg bpm": 134.00923076923078}, {"episode": 839, "avg bpm": 130.64441379310344}, {"episode": 840, "avg bpm": 131.6992962962963}, {"episode": 841, "avg bpm": 132.2494827586207}, {"episode": 842, "avg bpm": 131.34531818181821}, {"episode": 843, "avg bpm": 131.11154166666665}, {"episode": 844, "avg bpm": 132.83395652173914}, {"episode": 845, "avg bpm": 134.85446153846155}, {"episode": 846, "avg bpm": 135.96510714285714}, {"episode": 847, "avg bpm": 134.51385185185183}, {"episode": 848, "avg bpm": 131.7132272727273}, {"episode": 849, "avg bpm": 133.22716666666665}, {"episode": 850, "avg bpm": 128.94950000000003}, {"episode": 851, "avg bpm": 133.52710714285712}, {"episode": 852, "avg bpm": 132.5891153846154}, {"episode": 853, "avg bpm": 130.84086363636362}, {"episode": 854, "avg bpm": 130.40140740740742}, {"episode": 855, "avg bpm": 132.84699999999998}, {"episode": 856, "avg bpm": 132.48771428571428}, {"episode": 857, "avg bpm": 135.0128275862069}, {"episode": 858, "avg bpm": 132.34226923076923}, {"episode": 859, "avg bpm": 134.0074482758621}, {"episode": 860, "avg bpm": 133.03132142857143}, {"episode": 861, "avg bpm": 132.14435714285716}, {"episode": 862, "avg bpm": 131.46352000000002}, {"episode": 863, "avg bpm": 134.21020000000001}, {"episode": 864, "avg bpm": 132.38717241379305}, {"episode": 865, "avg bpm": 129.34812499999998}, {"episode": 866, "avg bpm": 133.03417857142855}, {"episode": 867, "avg bpm": 133.845}, {"episode": 868, "avg bpm": 131.53803703703701}, {"episode": 869, "avg bpm": 129.88072222222226}, {"episode": 870, "avg bpm": 133.0428846153846}, {"episode": 871, "avg bpm": 131.70696551724137}, {"episode": 872, "avg bpm": 134.54886206896552}, {"episode": 873, "avg bpm": 132.81004166666665}, {"episode": 874, "avg bpm": 134.31396153846154}, {"episode": 875, "avg bpm": 133.52128000000002}, {"episode": 876, "avg bpm": 133.71744827586207}, {"episode": 877, "avg bpm": 137.25261904761905}, {"episode": 878, "avg bpm": 133.54445833333332}, {"episode": 879, "avg bpm": 131.8818}, {"episode": 880, "avg bpm": 134.4645925925926}, {"episode": 881, "avg bpm": 132.6415238095238}, {"episode": 882, "avg bpm": 133.9512222222222}, {"episode": 883, "avg bpm": 132.971}, {"episode": 884, "avg bpm": 134.69930769230768}, {"episode": 885, "avg bpm": 135.96192307692309}, {"episode": 886, "avg bpm": 133.4401851851852}, {"episode": 887, "avg bpm": 133.45158333333333}, {"episode": 888, "avg bpm": 130.22328260869565}, {"episode": 889, "avg bpm": 133.68085714285715}, {"episode": 890, "avg bpm": 132.77891666666667}, {"episode": 891, "avg bpm": 136.9570303030303}, {"episode": 892, "avg bpm": 131.728}, {"episode": 893, "avg bpm": 131.79992592592592}, {"episode": 894, "avg bpm": 133.67212500000002}, {"episode": 895, "avg bpm": 133.8351304347826}, {"episode": 896, "avg bpm": 128.96949999999998}, {"episode": 897, "avg bpm": 135.61634615384614}, {"episode": 898, "avg bpm": 134.423}, {"episode": 899, "avg bpm": 136.45667857142857}, {"episode": 900, "avg bpm": 133.47709677419354}, {"episode": 901, "avg bpm": 136.07448}, {"episode": 902, "avg bpm": 131.39707692307692}, {"episode": 903, "avg bpm": 133.7264827586207}, {"episode": 904, "avg bpm": 132.50595833333333}, {"episode": 905, "avg bpm": 133.90816666666666}, {"episode": 906, "avg bpm": 131.71496428571427}, {"episode": 907, "avg bpm": 136.80014285714284}, {"episode": 908, "avg bpm": 134.88870370370373}, {"episode": 909, "avg bpm": 133.399}, {"episode": 910, "avg bpm": 134.19322222222223}, {"episode": 911, "avg bpm": 133.64124}, {"episode": 912, "avg bpm": 134.35554166666665}, {"episode": 913, "avg bpm": 126.88239285714285}, {"episode": 914, "avg bpm": 129.67711111111112}, {"episode": 915, "avg bpm": 135.51382142857145}, {"episode": 916, "avg bpm": 132.21625925925926}, {"episode": 917, "avg bpm": 132.27072727272727}, {"episode": 918, "avg bpm": 134.23896000000002}, {"episode": 919, "avg bpm": 132.41412000000003}, {"episode": 920, "avg bpm": 136.1258214285714}, {"episode": 921, "avg bpm": 133.74175}, {"episode": 922, "avg bpm": 132.17473076923073}, {"episode": 923, "avg bpm": 132.67416}, {"episode": 924, "avg bpm": 132.48577272727272}, {"episode": 925, "avg bpm": 139.43921428571429}, {"episode": 926, "avg bpm": 135.91715384615378}, {"episode": 927, "avg bpm": 131.87668}, {"episode": 928, "avg bpm": 133.91233333333332}, {"episode": 929, "avg bpm": 133.56604166666673}, {"episode": 930, "avg bpm": 129.45915789473682}, {"episode": 931, "avg bpm": 130.39295}, {"episode": 932, "avg bpm": 135.0901851851852}, {"episode": 933, "avg bpm": 130.90937499999998}, {"episode": 934, "avg bpm": 133.97030434782607}, {"episode": 935, "avg bpm": 132.34869565217392}, {"episode": 936, "avg bpm": 137.91912903225807}, {"episode": 937, "avg bpm": 131.95476}, {"episode": 938, "avg bpm": 134.32416666666668}, {"episode": 939, "avg bpm": 134.8885}, {"episode": 940, "avg bpm": 129.92036170212768}, {"episode": 941, "avg bpm": 133.35913793103452}, {"episode": 942, "avg bpm": 134.99106896551723}, {"episode": 943, "avg bpm": 132.00403333333335}, {"episode": 944, "avg bpm": 132.57283333333334}, {"episode": 945, "avg bpm": 131.84468965517237}, {"episode": 946, "avg bpm": 137.66891304347828}, {"episode": 947, "avg bpm": 132.99715384615382}, {"episode": 948, "avg bpm": 135.84431034482756}, {"episode": 949, "avg bpm": 131.8325925925926}, {"episode": 950, "avg bpm": 134.50796551724136}, {"episode": 951, "avg bpm": 133.0438}, {"episode": 952, "avg bpm": 131.20586206896553}, {"episode": 953, "avg bpm": 135.5283666666667}, {"episode": 954, "avg bpm": 133.67183333333335}, {"episode": 955, "avg bpm": 133.95320588235296}, {"episode": 956, "avg bpm": 133.51260606060603}, {"episode": 957, "avg bpm": 132.1800294117647}]}}, {"mode": "vega-lite"});
</script>
</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Episode 057 tops the charts at an impressive 148 BPM, why? Looking at the tracklist ..</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="sd">&quot;&quot;&quot;</span>
<span class="sd">Artist: Armin van Buuren ASOT Radio</span>
<span class="sd">Album: A State Of Trance Episode 057</span>
<span class="sd">Album link: https://open.spotify.com/album/56qM5Y21wbvCW9l5GiAiaV</span>
<span class="sd">Album ID: 56qM5Y21wbvCW9l5GiAiaV</span>
<span class="sd">&quot;&quot;&quot;</span>

<span class="n">episode_bpm</span> <span class="o">=</span> <span class="mi">0</span>
<span class="n">tracks_counted</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">for</span> <span class="n">track</span> <span class="ow">in</span> <span class="n">sp</span><span class="o">.</span><span class="n">album_tracks</span><span class="p">(</span><span class="s1">&#39;56qM5Y21wbvCW9l5GiAiaV&#39;</span><span class="p">)[</span><span class="s1">&#39;items&#39;</span><span class="p">]:</span>
    <span class="k">if</span> <span class="s2">&quot;a state of trance&quot;</span> <span class="ow">in</span> <span class="n">track</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span> <span class="ow">or</span> <span class="s2">&quot;- interview&quot;</span> <span class="ow">in</span> <span class="n">track</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">lower</span><span class="p">():</span>
        <span class="k">continue</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="nb">print</span><span class="p">(</span><span class="n">track</span><span class="p">[</span><span class="s1">&#39;artists&#39;</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="s1">&#39;name&#39;</span><span class="p">],</span> <span class="s1">&#39;-&#39;</span><span class="p">,</span> <span class="n">track</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">],</span> <span class="n">sp</span><span class="o">.</span><span class="n">audio_features</span><span class="p">(</span><span class="n">track</span><span class="p">[</span><span class="s1">&#39;uri&#39;</span><span class="p">])[</span><span class="mi">0</span><span class="p">][</span><span class="s1">&#39;tempo&#39;</span><span class="p">])</span>
        <span class="n">episode_bpm</span> <span class="o">+=</span> <span class="n">sp</span><span class="o">.</span><span class="n">audio_features</span><span class="p">(</span><span class="n">track</span><span class="p">[</span><span class="s1">&#39;uri&#39;</span><span class="p">])[</span><span class="mi">0</span><span class="p">][</span><span class="s1">&#39;tempo&#39;</span><span class="p">]</span>
        <span class="n">tracks_counted</span> <span class="o">+=</span> <span class="mi">1</span>
<span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Episode average: &quot;</span><span class="p">,</span> <span class="n">episode_bpm</span><span class="o">/</span><span class="n">tracks_counted</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>Pulser - Cloudwalking [ASOT 057] - Beatpusher Remix 141.61
Gouryella - Ligaya [ASOT 057] - Original Mix 141.784
Tiësto - Obsession [ASOT 057] - Original Mix 136.377
UMEK - Gatex [ASOT 057] - Original Mix 184.848
Cygnus X - Positron [ASOT 057] - Marco V Remix 139.264
Episode average:  148.7766
</pre>
</div>
</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p><a href="https://open.spotify.com/track/4eQjOuVkOWhcsoJFKahBKE">UMEK - Gatex (Original Mix)</a> clocks in at a whopping 184 BPM, drastically raising the average of this episode. <a href="https://www.beatport.com/track/gatex-umek-remix/19836">Beatport reports it at 136</a>, something's not right..</p>

</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="Results">Results<a class="anchor-link" href="#Results"> </a></h2>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Finally, for fun, we can draw a line at 138 BPM to compare.</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">episode_avg_bpm</span><span class="p">))</span>

<span class="n">source</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">({</span>
  <span class="s1">&#39;episode&#39;</span><span class="p">:</span> <span class="n">x</span><span class="p">,</span>
  <span class="s1">&#39;avg bpm&#39;</span><span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="n">episode_avg_bpm</span><span class="p">)</span>
<span class="p">})</span>

<span class="n">source</span><span class="p">[</span><span class="s1">&#39;138&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="mi">138</span>

<span class="n">base</span> <span class="o">=</span> <span class="n">alt</span><span class="o">.</span><span class="n">Chart</span><span class="p">(</span><span class="n">source</span><span class="p">)</span><span class="o">.</span><span class="n">mark_line</span><span class="p">()</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span>
    <span class="n">alt</span><span class="o">.</span><span class="n">X</span><span class="p">(</span><span class="s1">&#39;episode&#39;</span><span class="p">),</span>
    <span class="n">alt</span><span class="o">.</span><span class="n">Y</span><span class="p">(</span><span class="s1">&#39;avg bpm&#39;</span><span class="p">,</span> <span class="n">scale</span><span class="o">=</span><span class="n">alt</span><span class="o">.</span><span class="n">Scale</span><span class="p">(</span><span class="n">domain</span><span class="o">=</span><span class="p">(</span><span class="mi">120</span><span class="p">,</span> <span class="mi">150</span><span class="p">))),</span>
<span class="p">)</span><span class="o">.</span><span class="n">properties</span><span class="p">(</span>
    <span class="n">title</span><span class="o">=</span><span class="s2">&quot;A State of Trance - Average BPM of episode&quot;</span>
<span class="p">)</span>

<span class="n">rule</span> <span class="o">=</span> <span class="n">alt</span><span class="o">.</span><span class="n">Chart</span><span class="p">(</span><span class="n">source</span><span class="p">)</span><span class="o">.</span><span class="n">mark_rule</span><span class="p">(</span><span class="n">color</span><span class="o">=</span><span class="s1">&#39;red&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span>
    <span class="n">y</span><span class="o">=</span><span class="s1">&#39;138&#39;</span>
<span class="p">)</span>

<span class="n">base</span> <span class="o">+</span> <span class="n">rule</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">

<div id="altair-viz-b9e79d0a41d349d7b0b677bee6cee47f"></div>
<script type="text/javascript">
  (function(spec, embedOpt){
    let outputDiv = document.currentScript.previousElementSibling;
    if (outputDiv.id !== "altair-viz-b9e79d0a41d349d7b0b677bee6cee47f") {
      outputDiv = document.getElementById("altair-viz-b9e79d0a41d349d7b0b677bee6cee47f");
    }
    const paths = {
      "vega": "https://cdn.jsdelivr.net/npm//vega@5?noext",
      "vega-lib": "https://cdn.jsdelivr.net/npm//vega-lib?noext",
      "vega-lite": "https://cdn.jsdelivr.net/npm//vega-lite@4.8.1?noext",
      "vega-embed": "https://cdn.jsdelivr.net/npm//vega-embed@6?noext",
    };

    function loadScript(lib) {
      return new Promise(function(resolve, reject) {
        var s = document.createElement('script');
        s.src = paths[lib];
        s.async = true;
        s.onload = () => resolve(paths[lib]);
        s.onerror = () => reject(`Error loading script: ${paths[lib]}`);
        document.getElementsByTagName("head")[0].appendChild(s);
      });
    }

    function showError(err) {
      outputDiv.innerHTML = `<div class="error" style="color:red;">${err}</div>`;
      throw err;
    }

    function displayChart(vegaEmbed) {
      vegaEmbed(outputDiv, spec, embedOpt)
        .catch(err => showError(`Javascript Error: ${err.message}<br>This usually means there's a typo in your chart specification. See the javascript console for the full traceback.`));
    }

    if(typeof define === "function" && define.amd) {
      requirejs.config({paths});
      require(["vega-embed"], displayChart, err => showError(`Error loading script: ${err.message}`));
    } else if (typeof vegaEmbed === "function") {
      displayChart(vegaEmbed);
    } else {
      loadScript("vega")
        .then(() => loadScript("vega-lite"))
        .then(() => loadScript("vega-embed"))
        .catch(showError)
        .then(() => displayChart(vegaEmbed));
    }
  })({"config": {"view": {"continuousWidth": 400, "continuousHeight": 300}}, "layer": [{"mark": "line", "encoding": {"x": {"type": "quantitative", "field": "episode"}, "y": {"type": "quantitative", "field": "avg bpm", "scale": {"domain": [120, 150]}}}, "title": "A State of Trance - Average BPM of episode"}, {"mark": {"type": "rule", "color": "red"}, "encoding": {"y": {"type": "quantitative", "field": "138"}}}], "data": {"name": "data-624c83190957732636c986f20f61704a"}, "$schema": "https://vega.github.io/schema/vega-lite/v4.8.1.json", "datasets": {"data-624c83190957732636c986f20f61704a": [{"episode": 0, "avg bpm": 135.77875, "138": 138}, {"episode": 1, "avg bpm": 138.86957142857142, "138": 138}, {"episode": 2, "avg bpm": 135.95900000000003, "138": 138}, {"episode": 3, "avg bpm": 135.295, "138": 138}, {"episode": 4, "avg bpm": 137.3078, "138": 138}, {"episode": 5, "avg bpm": 137.122875, "138": 138}, {"episode": 6, "avg bpm": 136.12875, "138": 138}, {"episode": 7, "avg bpm": 137.459125, "138": 138}, {"episode": 8, "avg bpm": 136.409, "138": 138}, {"episode": 9, "avg bpm": 138.58033333333333, "138": 138}, {"episode": 10, "avg bpm": 137.5172, "138": 138}, {"episode": 11, "avg bpm": 138.515, "138": 138}, {"episode": 12, "avg bpm": 138.5285, "138": 138}, {"episode": 13, "avg bpm": 135.861, "138": 138}, {"episode": 14, "avg bpm": 136.26149999999998, "138": 138}, {"episode": 15, "avg bpm": 138.09266666666667, "138": 138}, {"episode": 16, "avg bpm": 136.60533333333333, "138": 138}, {"episode": 17, "avg bpm": 136.7673333333333, "138": 138}, {"episode": 18, "avg bpm": 135.445, "138": 138}, {"episode": 19, "avg bpm": 135.24450000000002, "138": 138}, {"episode": 20, "avg bpm": 137.018, "138": 138}, {"episode": 21, "avg bpm": 139.79133333333334, "138": 138}, {"episode": 22, "avg bpm": 140.60899999999998, "138": 138}, {"episode": 23, "avg bpm": 138.4986, "138": 138}, {"episode": 24, "avg bpm": 137.71574999999999, "138": 138}, {"episode": 25, "avg bpm": 138.07, "138": 138}, {"episode": 26, "avg bpm": 138.9054, "138": 138}, {"episode": 27, "avg bpm": 139.02800000000002, "138": 138}, {"episode": 28, "avg bpm": 137.06583333333336, "138": 138}, {"episode": 29, "avg bpm": 139.99871428571427, "138": 138}, {"episode": 30, "avg bpm": 135.74475, "138": 138}, {"episode": 31, "avg bpm": 136.26457142857143, "138": 138}, {"episode": 32, "avg bpm": 144.61933333333334, "138": 138}, {"episode": 33, "avg bpm": 138.22199999999998, "138": 138}, {"episode": 34, "avg bpm": 138.38516666666666, "138": 138}, {"episode": 35, "avg bpm": 137.13842857142856, "138": 138}, {"episode": 36, "avg bpm": 140.3166666666667, "138": 138}, {"episode": 37, "avg bpm": 137.05533333333332, "138": 138}, {"episode": 38, "avg bpm": 137.9286666666667, "138": 138}, {"episode": 39, "avg bpm": 138.87571428571428, "138": 138}, {"episode": 40, "avg bpm": 141.91925, "138": 138}, {"episode": 41, "avg bpm": 141.19566666666665, "138": 138}, {"episode": 42, "avg bpm": 140.53566666666666, "138": 138}, {"episode": 43, "avg bpm": 136.28357142857143, "138": 138}, {"episode": 44, "avg bpm": 138.69183333333334, "138": 138}, {"episode": 45, "avg bpm": 138.473, "138": 138}, {"episode": 46, "avg bpm": 137.671, "138": 138}, {"episode": 47, "avg bpm": 134.623125, "138": 138}, {"episode": 48, "avg bpm": 137.00514285714286, "138": 138}, {"episode": 49, "avg bpm": 138.78814285714284, "138": 138}, {"episode": 50, "avg bpm": 137.69255555555554, "138": 138}, {"episode": 51, "avg bpm": 135.5205, "138": 138}, {"episode": 52, "avg bpm": 138.3696, "138": 138}, {"episode": 53, "avg bpm": 138.65566666666666, "138": 138}, {"episode": 54, "avg bpm": 140.29033333333334, "138": 138}, {"episode": 55, "avg bpm": 148.7766, "138": 138}, {"episode": 56, "avg bpm": 138.87983333333335, "138": 138}, {"episode": 57, "avg bpm": 139.02828571428572, "138": 138}, {"episode": 58, "avg bpm": 139.7276, "138": 138}, {"episode": 59, "avg bpm": 139.63266666666667, "138": 138}, {"episode": 60, "avg bpm": 139.386, "138": 138}, {"episode": 61, "avg bpm": 139.43866666666665, "138": 138}, {"episode": 62, "avg bpm": 139.90242857142854, "138": 138}, {"episode": 63, "avg bpm": 137.785, "138": 138}, {"episode": 64, "avg bpm": 137.789, "138": 138}, {"episode": 65, "avg bpm": 138.3738888888889, "138": 138}, {"episode": 66, "avg bpm": 139.39666666666668, "138": 138}, {"episode": 67, "avg bpm": 135.26999999999998, "138": 138}, {"episode": 68, "avg bpm": 140.1728, "138": 138}, {"episode": 69, "avg bpm": 135.591375, "138": 138}, {"episode": 70, "avg bpm": 137.80183333333332, "138": 138}, {"episode": 71, "avg bpm": 137.386, "138": 138}, {"episode": 72, "avg bpm": 140.33942857142856, "138": 138}, {"episode": 73, "avg bpm": 138.9662222222222, "138": 138}, {"episode": 74, "avg bpm": 140.03400000000002, "138": 138}, {"episode": 75, "avg bpm": 138.957, "138": 138}, {"episode": 76, "avg bpm": 139.52530769230768, "138": 138}, {"episode": 77, "avg bpm": 138.32633333333334, "138": 138}, {"episode": 78, "avg bpm": 138.32281818181818, "138": 138}, {"episode": 79, "avg bpm": 140.4349, "138": 138}, {"episode": 80, "avg bpm": 140.3574, "138": 138}, {"episode": 81, "avg bpm": 138.43919999999997, "138": 138}, {"episode": 82, "avg bpm": 137.4392222222222, "138": 138}, {"episode": 83, "avg bpm": 137.71928571428572, "138": 138}, {"episode": 84, "avg bpm": 138.7435714285714, "138": 138}, {"episode": 85, "avg bpm": 141.18491666666668, "138": 138}, {"episode": 86, "avg bpm": 137.269125, "138": 138}, {"episode": 87, "avg bpm": 135.37425, "138": 138}, {"episode": 88, "avg bpm": 138.086, "138": 138}, {"episode": 89, "avg bpm": 138.75060000000002, "138": 138}, {"episode": 90, "avg bpm": 136.90985714285716, "138": 138}, {"episode": 91, "avg bpm": 137.60391666666666, "138": 138}, {"episode": 92, "avg bpm": 136.978, "138": 138}, {"episode": 93, "avg bpm": 138.18333333333334, "138": 138}, {"episode": 94, "avg bpm": 146.68666666666667, "138": 138}, {"episode": 95, "avg bpm": 139.04825, "138": 138}, {"episode": 96, "avg bpm": 138.1762, "138": 138}, {"episode": 97, "avg bpm": 137.31514285714283, "138": 138}, {"episode": 98, "avg bpm": 140.97688888888888, "138": 138}, {"episode": 99, "avg bpm": 136.86914285714286, "138": 138}, {"episode": 100, "avg bpm": 138.2367777777778, "138": 138}, {"episode": 101, "avg bpm": 138.640625, "138": 138}, {"episode": 102, "avg bpm": 136.7052, "138": 138}, {"episode": 103, "avg bpm": 138.0888, "138": 138}, {"episode": 104, "avg bpm": 135.64842857142858, "138": 138}, {"episode": 105, "avg bpm": 139.80483333333333, "138": 138}, {"episode": 106, "avg bpm": 137.81830769230768, "138": 138}, {"episode": 107, "avg bpm": 138.47942857142854, "138": 138}, {"episode": 108, "avg bpm": 139.940875, "138": 138}, {"episode": 109, "avg bpm": 137.147, "138": 138}, {"episode": 110, "avg bpm": 136.61958333333334, "138": 138}, {"episode": 111, "avg bpm": 137.47363636363636, "138": 138}, {"episode": 112, "avg bpm": 136.13683333333333, "138": 138}, {"episode": 113, "avg bpm": 137.8683076923077, "138": 138}, {"episode": 114, "avg bpm": 137.87436363636363, "138": 138}, {"episode": 115, "avg bpm": 135.40439999999998, "138": 138}, {"episode": 116, "avg bpm": 138.15733333333333, "138": 138}, {"episode": 117, "avg bpm": 135.34466666666668, "138": 138}, {"episode": 118, "avg bpm": 136.80800000000002, "138": 138}, {"episode": 119, "avg bpm": 136.6595, "138": 138}, {"episode": 120, "avg bpm": 138.72385714285713, "138": 138}, {"episode": 121, "avg bpm": 136.915, "138": 138}, {"episode": 122, "avg bpm": 137.21570000000003, "138": 138}, {"episode": 123, "avg bpm": 136.96959999999999, "138": 138}, {"episode": 124, "avg bpm": 132.0812222222222, "138": 138}, {"episode": 125, "avg bpm": 135.717125, "138": 138}, {"episode": 126, "avg bpm": 138.14966666666666, "138": 138}, {"episode": 127, "avg bpm": 136.4634, "138": 138}, {"episode": 128, "avg bpm": 137.02883333333332, "138": 138}, {"episode": 129, "avg bpm": 136.30087500000002, "138": 138}, {"episode": 130, "avg bpm": 135.75822222222223, "138": 138}, {"episode": 131, "avg bpm": 137.14, "138": 138}, {"episode": 132, "avg bpm": 136.80316666666667, "138": 138}, {"episode": 133, "avg bpm": 138.3098, "138": 138}, {"episode": 134, "avg bpm": 138.14700000000002, "138": 138}, {"episode": 135, "avg bpm": 136.5217, "138": 138}, {"episode": 136, "avg bpm": 137.73850000000002, "138": 138}, {"episode": 137, "avg bpm": 137.33642857142857, "138": 138}, {"episode": 138, "avg bpm": 138.87833333333333, "138": 138}, {"episode": 139, "avg bpm": 136.5884, "138": 138}, {"episode": 140, "avg bpm": 136.79636363636365, "138": 138}, {"episode": 141, "avg bpm": 137.92569999999998, "138": 138}, {"episode": 142, "avg bpm": 138.206625, "138": 138}, {"episode": 143, "avg bpm": 135.52477777777779, "138": 138}, {"episode": 144, "avg bpm": 136.62358333333333, "138": 138}, {"episode": 145, "avg bpm": 136.599375, "138": 138}, {"episode": 146, "avg bpm": 138.34066666666666, "138": 138}, {"episode": 147, "avg bpm": 136.7629, "138": 138}, {"episode": 148, "avg bpm": 136.42414285714287, "138": 138}, {"episode": 149, "avg bpm": 137.76828571428572, "138": 138}, {"episode": 150, "avg bpm": 137.75257142857143, "138": 138}, {"episode": 151, "avg bpm": 136.0557, "138": 138}, {"episode": 152, "avg bpm": 138.2335, "138": 138}, {"episode": 153, "avg bpm": 134.29011111111112, "138": 138}, {"episode": 154, "avg bpm": 136.65136363636364, "138": 138}, {"episode": 155, "avg bpm": 137.1471, "138": 138}, {"episode": 156, "avg bpm": 139.40650000000002, "138": 138}, {"episode": 157, "avg bpm": 137.75227272727273, "138": 138}, {"episode": 158, "avg bpm": 136.93681818181818, "138": 138}, {"episode": 159, "avg bpm": 137.29636363636362, "138": 138}, {"episode": 160, "avg bpm": 137.54989999999998, "138": 138}, {"episode": 161, "avg bpm": 136.17233333333334, "138": 138}, {"episode": 162, "avg bpm": 137.276375, "138": 138}, {"episode": 163, "avg bpm": 137.6368181818182, "138": 138}, {"episode": 164, "avg bpm": 134.24733333333333, "138": 138}, {"episode": 165, "avg bpm": 135.65583333333333, "138": 138}, {"episode": 166, "avg bpm": 138.5762727272727, "138": 138}, {"episode": 167, "avg bpm": 135.68436363636363, "138": 138}, {"episode": 168, "avg bpm": 136.82825000000003, "138": 138}, {"episode": 169, "avg bpm": 135.42445454545458, "138": 138}, {"episode": 170, "avg bpm": 134.83041666666665, "138": 138}, {"episode": 171, "avg bpm": 135.73446666666666, "138": 138}, {"episode": 172, "avg bpm": 137.47742857142856, "138": 138}, {"episode": 173, "avg bpm": 136.05183333333335, "138": 138}, {"episode": 174, "avg bpm": 135.575625, "138": 138}, {"episode": 175, "avg bpm": 136.28544444444444, "138": 138}, {"episode": 176, "avg bpm": 136.09591666666668, "138": 138}, {"episode": 177, "avg bpm": 137.45444444444445, "138": 138}, {"episode": 178, "avg bpm": 135.50658333333334, "138": 138}, {"episode": 179, "avg bpm": 129.4562857142857, "138": 138}, {"episode": 180, "avg bpm": 135.55522222222223, "138": 138}, {"episode": 181, "avg bpm": 136.226, "138": 138}, {"episode": 182, "avg bpm": 136.65466666666669, "138": 138}, {"episode": 183, "avg bpm": 136.17725000000002, "138": 138}, {"episode": 184, "avg bpm": 135.741, "138": 138}, {"episode": 185, "avg bpm": 134.17035714285714, "138": 138}, {"episode": 186, "avg bpm": 135.5139090909091, "138": 138}, {"episode": 187, "avg bpm": 137.28716666666665, "138": 138}, {"episode": 188, "avg bpm": 136.808875, "138": 138}, {"episode": 189, "avg bpm": 134.3753888888889, "138": 138}, {"episode": 190, "avg bpm": 137.09781250000003, "138": 138}, {"episode": 191, "avg bpm": 136.390125, "138": 138}, {"episode": 192, "avg bpm": 136.18845454545453, "138": 138}, {"episode": 193, "avg bpm": 135.86170000000004, "138": 138}, {"episode": 194, "avg bpm": 136.16572727272728, "138": 138}, {"episode": 195, "avg bpm": 135.234375, "138": 138}, {"episode": 196, "avg bpm": 135.73615384615383, "138": 138}, {"episode": 197, "avg bpm": 135.94040540540541, "138": 138}, {"episode": 198, "avg bpm": 136.17453333333333, "138": 138}, {"episode": 199, "avg bpm": 135.44436363636365, "138": 138}, {"episode": 200, "avg bpm": 135.7317, "138": 138}, {"episode": 201, "avg bpm": 137.07164285714285, "138": 138}, {"episode": 202, "avg bpm": 136.6292, "138": 138}, {"episode": 203, "avg bpm": 136.35016666666667, "138": 138}, {"episode": 204, "avg bpm": 136.91412499999998, "138": 138}, {"episode": 205, "avg bpm": 137.88591666666665, "138": 138}, {"episode": 206, "avg bpm": 137.7781, "138": 138}, {"episode": 207, "avg bpm": 138.372, "138": 138}, {"episode": 208, "avg bpm": 135.1514, "138": 138}, {"episode": 209, "avg bpm": 135.8265, "138": 138}, {"episode": 210, "avg bpm": 136.12775, "138": 138}, {"episode": 211, "avg bpm": 136.59172727272724, "138": 138}, {"episode": 212, "avg bpm": 136.72179999999997, "138": 138}, {"episode": 213, "avg bpm": 136.8205714285714, "138": 138}, {"episode": 214, "avg bpm": 135.58400000000003, "138": 138}, {"episode": 215, "avg bpm": 133.697625, "138": 138}, {"episode": 216, "avg bpm": 135.30045454545456, "138": 138}, {"episode": 217, "avg bpm": 137.57653846153846, "138": 138}, {"episode": 218, "avg bpm": 135.86327272727272, "138": 138}, {"episode": 219, "avg bpm": 135.96406666666664, "138": 138}, {"episode": 220, "avg bpm": 136.09866666666665, "138": 138}, {"episode": 221, "avg bpm": 137.06758333333335, "138": 138}, {"episode": 222, "avg bpm": 135.1551, "138": 138}, {"episode": 223, "avg bpm": 134.95281818181817, "138": 138}, {"episode": 224, "avg bpm": 135.49733333333333, "138": 138}, {"episode": 225, "avg bpm": 137.30242857142858, "138": 138}, {"episode": 226, "avg bpm": 135.51277551020408, "138": 138}, {"episode": 227, "avg bpm": 136.30177777777777, "138": 138}, {"episode": 228, "avg bpm": 136.24024999999997, "138": 138}, {"episode": 229, "avg bpm": 136.1632222222222, "138": 138}, {"episode": 230, "avg bpm": 136.4811111111111, "138": 138}, {"episode": 231, "avg bpm": 136.9388, "138": 138}, {"episode": 232, "avg bpm": 136.86964285714288, "138": 138}, {"episode": 233, "avg bpm": 136.758, "138": 138}, {"episode": 234, "avg bpm": 136.4348888888889, "138": 138}, {"episode": 235, "avg bpm": 135.9394, "138": 138}, {"episode": 236, "avg bpm": 136.8038666666667, "138": 138}, {"episode": 237, "avg bpm": 134.3715, "138": 138}, {"episode": 238, "avg bpm": 137.8883076923077, "138": 138}, {"episode": 239, "avg bpm": 134.40466666666666, "138": 138}, {"episode": 240, "avg bpm": 135.8553076923077, "138": 138}, {"episode": 241, "avg bpm": 136.82487500000002, "138": 138}, {"episode": 242, "avg bpm": 134.91481818181816, "138": 138}, {"episode": 243, "avg bpm": 135.44408333333334, "138": 138}, {"episode": 244, "avg bpm": 136.13533333333334, "138": 138}, {"episode": 245, "avg bpm": 135.3953, "138": 138}, {"episode": 246, "avg bpm": 134.3926, "138": 138}, {"episode": 247, "avg bpm": 135.77933333333334, "138": 138}, {"episode": 248, "avg bpm": 136.11323529411766, "138": 138}, {"episode": 249, "avg bpm": 136.13509090909093, "138": 138}, {"episode": 250, "avg bpm": 134.7114, "138": 138}, {"episode": 251, "avg bpm": 136.0399166666667, "138": 138}, {"episode": 252, "avg bpm": 139.27100000000002, "138": 138}, {"episode": 253, "avg bpm": 137.27730000000003, "138": 138}, {"episode": 254, "avg bpm": 136.1520909090909, "138": 138}, {"episode": 255, "avg bpm": 136.050875, "138": 138}, {"episode": 256, "avg bpm": 136.20416666666668, "138": 138}, {"episode": 257, "avg bpm": 136.4595, "138": 138}, {"episode": 258, "avg bpm": 135.16314285714287, "138": 138}, {"episode": 259, "avg bpm": 137.1573, "138": 138}, {"episode": 260, "avg bpm": 137.17891666666665, "138": 138}, {"episode": 261, "avg bpm": 137.87033333333332, "138": 138}, {"episode": 262, "avg bpm": 135.77462500000001, "138": 138}, {"episode": 263, "avg bpm": 137.29654545454545, "138": 138}, {"episode": 264, "avg bpm": 135.650375, "138": 138}, {"episode": 265, "avg bpm": 135.70463636363635, "138": 138}, {"episode": 266, "avg bpm": 135.9524, "138": 138}, {"episode": 267, "avg bpm": 135.67015384615382, "138": 138}, {"episode": 268, "avg bpm": 137.7816, "138": 138}, {"episode": 269, "avg bpm": 136.4588, "138": 138}, {"episode": 270, "avg bpm": 135.78928571428574, "138": 138}, {"episode": 271, "avg bpm": 136.3692727272727, "138": 138}, {"episode": 272, "avg bpm": 136.0135, "138": 138}, {"episode": 273, "avg bpm": 136.79049999999998, "138": 138}, {"episode": 274, "avg bpm": 136.7731111111111, "138": 138}, {"episode": 275, "avg bpm": 135.61485714285715, "138": 138}, {"episode": 276, "avg bpm": 135.23208163265303, "138": 138}, {"episode": 277, "avg bpm": 136.16036363636363, "138": 138}, {"episode": 278, "avg bpm": 137.01784615384616, "138": 138}, {"episode": 279, "avg bpm": 136.15593333333334, "138": 138}, {"episode": 280, "avg bpm": 137.62727272727273, "138": 138}, {"episode": 281, "avg bpm": 137.29478571428572, "138": 138}, {"episode": 282, "avg bpm": 137.31300000000002, "138": 138}, {"episode": 283, "avg bpm": 134.97085714285714, "138": 138}, {"episode": 284, "avg bpm": 135.16891666666666, "138": 138}, {"episode": 285, "avg bpm": 137.21688888888886, "138": 138}, {"episode": 286, "avg bpm": 136.18464285714285, "138": 138}, {"episode": 287, "avg bpm": 136.54412499999998, "138": 138}, {"episode": 288, "avg bpm": 136.57708333333335, "138": 138}, {"episode": 289, "avg bpm": 134.52566666666667, "138": 138}, {"episode": 290, "avg bpm": 134.46945454545454, "138": 138}, {"episode": 291, "avg bpm": 135.85, "138": 138}, {"episode": 292, "avg bpm": 135.6542727272727, "138": 138}, {"episode": 293, "avg bpm": 135.01569999999998, "138": 138}, {"episode": 294, "avg bpm": 136.698, "138": 138}, {"episode": 295, "avg bpm": 135.49628571428573, "138": 138}, {"episode": 296, "avg bpm": 135.15976923076923, "138": 138}, {"episode": 297, "avg bpm": 135.64700000000002, "138": 138}, {"episode": 298, "avg bpm": 135.44324999999998, "138": 138}, {"episode": 299, "avg bpm": 136.0727692307692, "138": 138}, {"episode": 300, "avg bpm": 135.39589999999998, "138": 138}, {"episode": 301, "avg bpm": 134.6199, "138": 138}, {"episode": 302, "avg bpm": 135.0, "138": 138}, {"episode": 303, "avg bpm": 135.2457777777778, "138": 138}, {"episode": 304, "avg bpm": 135.2378888888889, "138": 138}, {"episode": 305, "avg bpm": 135.227, "138": 138}, {"episode": 306, "avg bpm": 137.02291666666667, "138": 138}, {"episode": 307, "avg bpm": 135.843, "138": 138}, {"episode": 308, "avg bpm": 132.457, "138": 138}, {"episode": 309, "avg bpm": 136.1057, "138": 138}, {"episode": 310, "avg bpm": 134.55041666666668, "138": 138}, {"episode": 311, "avg bpm": 135.43024999999997, "138": 138}, {"episode": 312, "avg bpm": 134.28766666666667, "138": 138}, {"episode": 313, "avg bpm": 133.21814285714282, "138": 138}, {"episode": 314, "avg bpm": 133.897, "138": 138}, {"episode": 315, "avg bpm": 133.80329999999998, "138": 138}, {"episode": 316, "avg bpm": 133.60572727272728, "138": 138}, {"episode": 317, "avg bpm": 135.20009999999996, "138": 138}, {"episode": 318, "avg bpm": 134.9646666666667, "138": 138}, {"episode": 319, "avg bpm": 134.27381818181817, "138": 138}, {"episode": 320, "avg bpm": 135.4997142857143, "138": 138}, {"episode": 321, "avg bpm": 134.98430000000002, "138": 138}, {"episode": 322, "avg bpm": 134.31535714285715, "138": 138}, {"episode": 323, "avg bpm": 133.6753125, "138": 138}, {"episode": 324, "avg bpm": 134.496625, "138": 138}, {"episode": 325, "avg bpm": 135.003625, "138": 138}, {"episode": 326, "avg bpm": 134.36454545454546, "138": 138}, {"episode": 327, "avg bpm": 135.24626530612247, "138": 138}, {"episode": 328, "avg bpm": 134.32042857142855, "138": 138}, {"episode": 329, "avg bpm": 132.90089999999998, "138": 138}, {"episode": 330, "avg bpm": 133.91227272727272, "138": 138}, {"episode": 331, "avg bpm": 136.54888888888888, "138": 138}, {"episode": 332, "avg bpm": 134.3184375, "138": 138}, {"episode": 333, "avg bpm": 133.9065, "138": 138}, {"episode": 334, "avg bpm": 134.07353333333333, "138": 138}, {"episode": 335, "avg bpm": 136.4604, "138": 138}, {"episode": 336, "avg bpm": 134.3936666666667, "138": 138}, {"episode": 337, "avg bpm": 135.3023, "138": 138}, {"episode": 338, "avg bpm": 135.31136363636364, "138": 138}, {"episode": 339, "avg bpm": 133.84133333333332, "138": 138}, {"episode": 340, "avg bpm": 135.17733333333334, "138": 138}, {"episode": 341, "avg bpm": 133.9919166666667, "138": 138}, {"episode": 342, "avg bpm": 134.8081875, "138": 138}, {"episode": 343, "avg bpm": 133.91195, "138": 138}, {"episode": 344, "avg bpm": 134.35383333333334, "138": 138}, {"episode": 345, "avg bpm": 135.3487142857143, "138": 138}, {"episode": 346, "avg bpm": 134.67446153846154, "138": 138}, {"episode": 347, "avg bpm": 136.42264705882351, "138": 138}, {"episode": 348, "avg bpm": 134.2847857142857, "138": 138}, {"episode": 349, "avg bpm": 135.59099999999998, "138": 138}, {"episode": 350, "avg bpm": 135.36118181818182, "138": 138}, {"episode": 351, "avg bpm": 135.27290909090908, "138": 138}, {"episode": 352, "avg bpm": 133.64980000000003, "138": 138}, {"episode": 353, "avg bpm": 135.8192142857143, "138": 138}, {"episode": 354, "avg bpm": 134.7508333333333, "138": 138}, {"episode": 355, "avg bpm": 134.28314285714285, "138": 138}, {"episode": 356, "avg bpm": 134.99584615384612, "138": 138}, {"episode": 357, "avg bpm": 134.44377777777777, "138": 138}, {"episode": 358, "avg bpm": 134.08625, "138": 138}, {"episode": 359, "avg bpm": 133.66772727272726, "138": 138}, {"episode": 360, "avg bpm": 136.02515384615387, "138": 138}, {"episode": 361, "avg bpm": 136.20584615384615, "138": 138}, {"episode": 362, "avg bpm": 135.7968333333333, "138": 138}, {"episode": 363, "avg bpm": 135.27272727272728, "138": 138}, {"episode": 364, "avg bpm": 134.5308888888889, "138": 138}, {"episode": 365, "avg bpm": 133.71795454545455, "138": 138}, {"episode": 366, "avg bpm": 135.19113333333334, "138": 138}, {"episode": 367, "avg bpm": 134.83738461538462, "138": 138}, {"episode": 368, "avg bpm": 134.89399999999998, "138": 138}, {"episode": 369, "avg bpm": 134.00091666666665, "138": 138}, {"episode": 370, "avg bpm": 135.06646153846154, "138": 138}, {"episode": 371, "avg bpm": 135.524875, "138": 138}, {"episode": 372, "avg bpm": 134.15591666666666, "138": 138}, {"episode": 373, "avg bpm": 133.79273333333333, "138": 138}, {"episode": 374, "avg bpm": 132.12300000000002, "138": 138}, {"episode": 375, "avg bpm": 133.06907142857145, "138": 138}, {"episode": 376, "avg bpm": 134.74721428571428, "138": 138}, {"episode": 377, "avg bpm": 134.74715384615382, "138": 138}, {"episode": 378, "avg bpm": 129.38802040816327, "138": 138}, {"episode": 379, "avg bpm": 134.69807692307694, "138": 138}, {"episode": 380, "avg bpm": 134.5194, "138": 138}, {"episode": 381, "avg bpm": 134.52041666666665, "138": 138}, {"episode": 382, "avg bpm": 134.01357142857142, "138": 138}, {"episode": 383, "avg bpm": 134.01464285714286, "138": 138}, {"episode": 384, "avg bpm": 134.8552857142857, "138": 138}, {"episode": 385, "avg bpm": 135.30438461538463, "138": 138}, {"episode": 386, "avg bpm": 135.3860714285714, "138": 138}, {"episode": 387, "avg bpm": 134.37378571428573, "138": 138}, {"episode": 388, "avg bpm": 134.89718750000003, "138": 138}, {"episode": 389, "avg bpm": 134.84369230769232, "138": 138}, {"episode": 390, "avg bpm": 134.91699999999997, "138": 138}, {"episode": 391, "avg bpm": 134.87564285714282, "138": 138}, {"episode": 392, "avg bpm": 135.59064285714285, "138": 138}, {"episode": 393, "avg bpm": 134.08111764705885, "138": 138}, {"episode": 394, "avg bpm": 137.125625, "138": 138}, {"episode": 395, "avg bpm": 135.00935714285717, "138": 138}, {"episode": 396, "avg bpm": 134.43617647058824, "138": 138}, {"episode": 397, "avg bpm": 133.86864285714285, "138": 138}, {"episode": 398, "avg bpm": 134.28346666666667, "138": 138}, {"episode": 399, "avg bpm": 134.1881052631579, "138": 138}, {"episode": 400, "avg bpm": 134.77670588235296, "138": 138}, {"episode": 401, "avg bpm": 134.52462500000001, "138": 138}, {"episode": 402, "avg bpm": 133.03575, "138": 138}, {"episode": 403, "avg bpm": 133.8165, "138": 138}, {"episode": 404, "avg bpm": 133.26100000000002, "138": 138}, {"episode": 405, "avg bpm": 132.43207142857142, "138": 138}, {"episode": 406, "avg bpm": 137.08030769230766, "138": 138}, {"episode": 407, "avg bpm": 135.23686666666669, "138": 138}, {"episode": 408, "avg bpm": 136.11092857142856, "138": 138}, {"episode": 409, "avg bpm": 135.2796153846154, "138": 138}, {"episode": 410, "avg bpm": 134.70864705882354, "138": 138}, {"episode": 411, "avg bpm": 134.49244444444446, "138": 138}, {"episode": 412, "avg bpm": 135.23292857142857, "138": 138}, {"episode": 413, "avg bpm": 135.1433846153846, "138": 138}, {"episode": 414, "avg bpm": 137.78884210526314, "138": 138}, {"episode": 415, "avg bpm": 133.03749999999997, "138": 138}, {"episode": 416, "avg bpm": 134.36350000000002, "138": 138}, {"episode": 417, "avg bpm": 136.25366666666665, "138": 138}, {"episode": 418, "avg bpm": 137.16929411764707, "138": 138}, {"episode": 419, "avg bpm": 135.90914285714285, "138": 138}, {"episode": 420, "avg bpm": 134.9467142857143, "138": 138}, {"episode": 421, "avg bpm": 133.341375, "138": 138}, {"episode": 422, "avg bpm": 134.61294444444442, "138": 138}, {"episode": 423, "avg bpm": 136.47270588235295, "138": 138}, {"episode": 424, "avg bpm": 135.34816666666663, "138": 138}, {"episode": 425, "avg bpm": 136.10176470588235, "138": 138}, {"episode": 426, "avg bpm": 133.65652941176472, "138": 138}, {"episode": 427, "avg bpm": 134.9131818181818, "138": 138}, {"episode": 428, "avg bpm": 135.05576470588235, "138": 138}, {"episode": 429, "avg bpm": 133.07565306122447, "138": 138}, {"episode": 430, "avg bpm": 135.08392307692307, "138": 138}, {"episode": 431, "avg bpm": 134.82935714285713, "138": 138}, {"episode": 432, "avg bpm": 135.5085714285714, "138": 138}, {"episode": 433, "avg bpm": 134.80366666666666, "138": 138}, {"episode": 434, "avg bpm": 134.9720714285714, "138": 138}, {"episode": 435, "avg bpm": 133.72566666666665, "138": 138}, {"episode": 436, "avg bpm": 133.4702142857143, "138": 138}, {"episode": 437, "avg bpm": 134.76053333333334, "138": 138}, {"episode": 438, "avg bpm": 134.0622142857143, "138": 138}, {"episode": 439, "avg bpm": 134.07, "138": 138}, {"episode": 440, "avg bpm": 134.4936923076923, "138": 138}, {"episode": 441, "avg bpm": 134.19775, "138": 138}, {"episode": 442, "avg bpm": 136.22035714285715, "138": 138}, {"episode": 443, "avg bpm": 134.3706875, "138": 138}, {"episode": 444, "avg bpm": 134.28822222222223, "138": 138}, {"episode": 445, "avg bpm": 134.36694736842105, "138": 138}, {"episode": 446, "avg bpm": 134.6929375, "138": 138}, {"episode": 447, "avg bpm": 134.25047058823532, "138": 138}, {"episode": 448, "avg bpm": 133.5583888888889, "138": 138}, {"episode": 449, "avg bpm": 135.2905263157895, "138": 138}, {"episode": 450, "avg bpm": 133.21213333333333, "138": 138}, {"episode": 451, "avg bpm": 135.3856153846154, "138": 138}, {"episode": 452, "avg bpm": 132.474625, "138": 138}, {"episode": 453, "avg bpm": 134.48542857142857, "138": 138}, {"episode": 454, "avg bpm": 134.50656250000003, "138": 138}, {"episode": 455, "avg bpm": 134.71914285714283, "138": 138}, {"episode": 456, "avg bpm": 134.9620625, "138": 138}, {"episode": 457, "avg bpm": 135.15157142857143, "138": 138}, {"episode": 458, "avg bpm": 134.85358823529415, "138": 138}, {"episode": 459, "avg bpm": 132.25161538461538, "138": 138}, {"episode": 460, "avg bpm": 134.65099999999998, "138": 138}, {"episode": 461, "avg bpm": 132.0472777777778, "138": 138}, {"episode": 462, "avg bpm": 133.33523529411764, "138": 138}, {"episode": 463, "avg bpm": 134.00425, "138": 138}, {"episode": 464, "avg bpm": 134.9832857142857, "138": 138}, {"episode": 465, "avg bpm": 133.71814285714285, "138": 138}, {"episode": 466, "avg bpm": 134.3264666666667, "138": 138}, {"episode": 467, "avg bpm": 132.92214285714286, "138": 138}, {"episode": 468, "avg bpm": 133.67686666666665, "138": 138}, {"episode": 469, "avg bpm": 136.46014285714287, "138": 138}, {"episode": 470, "avg bpm": 134.6082222222222, "138": 138}, {"episode": 471, "avg bpm": 134.48476470588236, "138": 138}, {"episode": 472, "avg bpm": 133.91225, "138": 138}, {"episode": 473, "avg bpm": 134.7495, "138": 138}, {"episode": 474, "avg bpm": 134.9245, "138": 138}, {"episode": 475, "avg bpm": 134.11694444444447, "138": 138}, {"episode": 476, "avg bpm": 134.26073333333335, "138": 138}, {"episode": 477, "avg bpm": 133.91146153846154, "138": 138}, {"episode": 478, "avg bpm": 131.28538095238096, "138": 138}, {"episode": 479, "avg bpm": 134.9710588235294, "138": 138}, {"episode": 480, "avg bpm": 134.30775, "138": 138}, {"episode": 481, "avg bpm": 132.94133333333332, "138": 138}, {"episode": 482, "avg bpm": 133.88610526315787, "138": 138}, {"episode": 483, "avg bpm": 131.0509375, "138": 138}, {"episode": 484, "avg bpm": 134.23524999999998, "138": 138}, {"episode": 485, "avg bpm": 133.72011764705883, "138": 138}, {"episode": 486, "avg bpm": 133.29817647058826, "138": 138}, {"episode": 487, "avg bpm": 133.89711111111112, "138": 138}, {"episode": 488, "avg bpm": 134.25459999999998, "138": 138}, {"episode": 489, "avg bpm": 132.99021052631576, "138": 138}, {"episode": 490, "avg bpm": 133.5433, "138": 138}, {"episode": 491, "avg bpm": 133.99422222222222, "138": 138}, {"episode": 492, "avg bpm": 134.3973333333333, "138": 138}, {"episode": 493, "avg bpm": 133.7203, "138": 138}, {"episode": 494, "avg bpm": 131.69121052631579, "138": 138}, {"episode": 495, "avg bpm": 132.08741666666666, "138": 138}, {"episode": 496, "avg bpm": 132.9712352941176, "138": 138}, {"episode": 497, "avg bpm": 133.75306249999997, "138": 138}, {"episode": 498, "avg bpm": 133.8055909090909, "138": 138}, {"episode": 499, "avg bpm": 133.53168421052632, "138": 138}, {"episode": 500, "avg bpm": 133.2331, "138": 138}, {"episode": 501, "avg bpm": 133.29299999999998, "138": 138}, {"episode": 502, "avg bpm": 133.3485, "138": 138}, {"episode": 503, "avg bpm": 132.83061904761902, "138": 138}, {"episode": 504, "avg bpm": 133.73441666666668, "138": 138}, {"episode": 505, "avg bpm": 133.26446153846152, "138": 138}, {"episode": 506, "avg bpm": 133.78192857142855, "138": 138}, {"episode": 507, "avg bpm": 133.35394444444447, "138": 138}, {"episode": 508, "avg bpm": 133.07969230769228, "138": 138}, {"episode": 509, "avg bpm": 133.18117647058824, "138": 138}, {"episode": 510, "avg bpm": 133.41184210526316, "138": 138}, {"episode": 511, "avg bpm": 133.28205555555553, "138": 138}, {"episode": 512, "avg bpm": 132.6995, "138": 138}, {"episode": 513, "avg bpm": 132.18327272727274, "138": 138}, {"episode": 514, "avg bpm": 133.2405, "138": 138}, {"episode": 515, "avg bpm": 133.23033333333336, "138": 138}, {"episode": 516, "avg bpm": 131.52866666666665, "138": 138}, {"episode": 517, "avg bpm": 132.6044, "138": 138}, {"episode": 518, "avg bpm": 132.68534782608694, "138": 138}, {"episode": 519, "avg bpm": 133.26180000000002, "138": 138}, {"episode": 520, "avg bpm": 133.13899999999998, "138": 138}, {"episode": 521, "avg bpm": 133.95661904761906, "138": 138}, {"episode": 522, "avg bpm": 134.75094444444443, "138": 138}, {"episode": 523, "avg bpm": 134.24488235294118, "138": 138}, {"episode": 524, "avg bpm": 134.21370588235297, "138": 138}, {"episode": 525, "avg bpm": 134.58715, "138": 138}, {"episode": 526, "avg bpm": 133.66299999999998, "138": 138}, {"episode": 527, "avg bpm": 134.3373333333333, "138": 138}, {"episode": 528, "avg bpm": 134.59395454545455, "138": 138}, {"episode": 529, "avg bpm": 133.66799999999998, "138": 138}, {"episode": 530, "avg bpm": 133.25786666666673, "138": 138}, {"episode": 531, "avg bpm": 134.4124, "138": 138}, {"episode": 532, "avg bpm": 135.0685882352941, "138": 138}, {"episode": 533, "avg bpm": 133.86153333333334, "138": 138}, {"episode": 534, "avg bpm": 133.851, "138": 138}, {"episode": 535, "avg bpm": 133.45788235294117, "138": 138}, {"episode": 536, "avg bpm": 133.25173333333333, "138": 138}, {"episode": 537, "avg bpm": 134.64512499999998, "138": 138}, {"episode": 538, "avg bpm": 133.72888888888892, "138": 138}, {"episode": 539, "avg bpm": 133.5928636363636, "138": 138}, {"episode": 540, "avg bpm": 133.4924761904762, "138": 138}, {"episode": 541, "avg bpm": 133.3009411764706, "138": 138}, {"episode": 542, "avg bpm": 133.41415789473686, "138": 138}, {"episode": 543, "avg bpm": 132.42494736842104, "138": 138}, {"episode": 544, "avg bpm": 133.05465, "138": 138}, {"episode": 545, "avg bpm": 132.5524090909091, "138": 138}, {"episode": 546, "avg bpm": 133.9938095238095, "138": 138}, {"episode": 547, "avg bpm": 131.16814999999997, "138": 138}, {"episode": 548, "avg bpm": 133.12639130434783, "138": 138}, {"episode": 549, "avg bpm": 136.1048076923077, "138": 138}, {"episode": 550, "avg bpm": 133.48545454545456, "138": 138}, {"episode": 551, "avg bpm": 133.23227272727277, "138": 138}, {"episode": 552, "avg bpm": 133.82485714285713, "138": 138}, {"episode": 553, "avg bpm": 134.72110526315788, "138": 138}, {"episode": 554, "avg bpm": 134.54356521739132, "138": 138}, {"episode": 555, "avg bpm": 134.6765714285714, "138": 138}, {"episode": 556, "avg bpm": 133.12668421052626, "138": 138}, {"episode": 557, "avg bpm": 132.70552631578943, "138": 138}, {"episode": 558, "avg bpm": 133.94910526315792, "138": 138}, {"episode": 559, "avg bpm": 134.06355, "138": 138}, {"episode": 560, "avg bpm": 133.71246666666667, "138": 138}, {"episode": 561, "avg bpm": 134.39084210526318, "138": 138}, {"episode": 562, "avg bpm": 134.75625, "138": 138}, {"episode": 563, "avg bpm": 133.95314285714286, "138": 138}, {"episode": 564, "avg bpm": 135.04578947368418, "138": 138}, {"episode": 565, "avg bpm": 134.38052380952382, "138": 138}, {"episode": 566, "avg bpm": 132.00360714285713, "138": 138}, {"episode": 567, "avg bpm": 134.66365217391305, "138": 138}, {"episode": 568, "avg bpm": 134.89753846153846, "138": 138}, {"episode": 569, "avg bpm": 134.515875, "138": 138}, {"episode": 570, "avg bpm": 134.4541111111111, "138": 138}, {"episode": 571, "avg bpm": 134.9978181818182, "138": 138}, {"episode": 572, "avg bpm": 134.07430000000002, "138": 138}, {"episode": 573, "avg bpm": 134.90129166666668, "138": 138}, {"episode": 574, "avg bpm": 135.04428571428568, "138": 138}, {"episode": 575, "avg bpm": 133.2078, "138": 138}, {"episode": 576, "avg bpm": 134.0723181818182, "138": 138}, {"episode": 577, "avg bpm": 131.04621052631578, "138": 138}, {"episode": 578, "avg bpm": 133.50090476190476, "138": 138}, {"episode": 579, "avg bpm": 134.7533043478261, "138": 138}, {"episode": 580, "avg bpm": 133.98877777777778, "138": 138}, {"episode": 581, "avg bpm": 129.40465306122448, "138": 138}, {"episode": 582, "avg bpm": 133.85252380952377, "138": 138}, {"episode": 583, "avg bpm": 133.59522222222222, "138": 138}, {"episode": 584, "avg bpm": 134.17882608695652, "138": 138}, {"episode": 585, "avg bpm": 132.74106250000003, "138": 138}, {"episode": 586, "avg bpm": 133.39036363636365, "138": 138}, {"episode": 587, "avg bpm": 134.47417647058825, "138": 138}, {"episode": 588, "avg bpm": 133.2506923076923, "138": 138}, {"episode": 589, "avg bpm": 132.79383333333334, "138": 138}, {"episode": 590, "avg bpm": 131.4927, "138": 138}, {"episode": 591, "avg bpm": 133.333, "138": 138}, {"episode": 592, "avg bpm": 135.07495454545457, "138": 138}, {"episode": 593, "avg bpm": 133.08928571428572, "138": 138}, {"episode": 594, "avg bpm": 133.2677727272727, "138": 138}, {"episode": 595, "avg bpm": 132.9865882352941, "138": 138}, {"episode": 596, "avg bpm": 133.50490909090905, "138": 138}, {"episode": 597, "avg bpm": 137.9895625, "138": 138}, {"episode": 598, "avg bpm": 134.4668, "138": 138}, {"episode": 599, "avg bpm": 134.9872173913043, "138": 138}, {"episode": 600, "avg bpm": 133.17633333333336, "138": 138}, {"episode": 601, "avg bpm": 131.85015, "138": 138}, {"episode": 602, "avg bpm": 134.93716000000003, "138": 138}, {"episode": 603, "avg bpm": 133.78467999999998, "138": 138}, {"episode": 604, "avg bpm": 134.14804166666667, "138": 138}, {"episode": 605, "avg bpm": 138.03662500000002, "138": 138}, {"episode": 606, "avg bpm": 135.8211, "138": 138}, {"episode": 607, "avg bpm": 135.2373846153846, "138": 138}, {"episode": 608, "avg bpm": 134.45925000000003, "138": 138}, {"episode": 609, "avg bpm": 135.3905714285714, "138": 138}, {"episode": 610, "avg bpm": 135.95565217391308, "138": 138}, {"episode": 611, "avg bpm": 137.05584000000002, "138": 138}, {"episode": 612, "avg bpm": 135.84681481481482, "138": 138}, {"episode": 613, "avg bpm": 135.41314285714284, "138": 138}, {"episode": 614, "avg bpm": 138.34288, "138": 138}, {"episode": 615, "avg bpm": 135.4504230769231, "138": 138}, {"episode": 616, "avg bpm": 135.26819230769232, "138": 138}, {"episode": 617, "avg bpm": 133.21976190476192, "138": 138}, {"episode": 618, "avg bpm": 135.6725161290323, "138": 138}, {"episode": 619, "avg bpm": 135.627, "138": 138}, {"episode": 620, "avg bpm": 134.84046153846154, "138": 138}, {"episode": 621, "avg bpm": 135.25508333333332, "138": 138}, {"episode": 622, "avg bpm": 136.03408000000002, "138": 138}, {"episode": 623, "avg bpm": 135.99004166666666, "138": 138}, {"episode": 624, "avg bpm": 136.5695, "138": 138}, {"episode": 625, "avg bpm": 134.76760869565217, "138": 138}, {"episode": 626, "avg bpm": 136.67164285714284, "138": 138}, {"episode": 627, "avg bpm": 135.61565384615386, "138": 138}, {"episode": 628, "avg bpm": 135.74842307692305, "138": 138}, {"episode": 629, "avg bpm": 135.80911111111112, "138": 138}, {"episode": 630, "avg bpm": 137.99914285714286, "138": 138}, {"episode": 631, "avg bpm": 136.41728, "138": 138}, {"episode": 632, "avg bpm": 134.74996551724135, "138": 138}, {"episode": 633, "avg bpm": 134.34603703703704, "138": 138}, {"episode": 634, "avg bpm": 133.89222222222222, "138": 138}, {"episode": 635, "avg bpm": 134.56233333333333, "138": 138}, {"episode": 636, "avg bpm": 135.3165, "138": 138}, {"episode": 637, "avg bpm": 134.6307222222222, "138": 138}, {"episode": 638, "avg bpm": 135.33350000000002, "138": 138}, {"episode": 639, "avg bpm": 135.2651304347826, "138": 138}, {"episode": 640, "avg bpm": 135.372375, "138": 138}, {"episode": 641, "avg bpm": 136.03691304347828, "138": 138}, {"episode": 642, "avg bpm": 135.30033333333336, "138": 138}, {"episode": 643, "avg bpm": 133.7481363636364, "138": 138}, {"episode": 644, "avg bpm": 135.46947826086955, "138": 138}, {"episode": 645, "avg bpm": 135.04892307692307, "138": 138}, {"episode": 646, "avg bpm": 135.16562068965519, "138": 138}, {"episode": 647, "avg bpm": 134.30184615384616, "138": 138}, {"episode": 648, "avg bpm": 137.80178571428573, "138": 138}, {"episode": 649, "avg bpm": 136.23066666666665, "138": 138}, {"episode": 650, "avg bpm": 134.3855925925926, "138": 138}, {"episode": 651, "avg bpm": 134.0103333333333, "138": 138}, {"episode": 652, "avg bpm": 134.3513076923077, "138": 138}, {"episode": 653, "avg bpm": 134.95114814814815, "138": 138}, {"episode": 654, "avg bpm": 133.0625, "138": 138}, {"episode": 655, "avg bpm": 138.00204545454548, "138": 138}, {"episode": 656, "avg bpm": 135.99596153846156, "138": 138}, {"episode": 657, "avg bpm": 134.5968888888889, "138": 138}, {"episode": 658, "avg bpm": 135.3998148148148, "138": 138}, {"episode": 659, "avg bpm": 134.48723809523813, "138": 138}, {"episode": 660, "avg bpm": 134.12791666666666, "138": 138}, {"episode": 661, "avg bpm": 134.12708333333333, "138": 138}, {"episode": 662, "avg bpm": 134.41958620689655, "138": 138}, {"episode": 663, "avg bpm": 134.24616666666665, "138": 138}, {"episode": 664, "avg bpm": 132.93590909090912, "138": 138}, {"episode": 665, "avg bpm": 133.77978260869565, "138": 138}, {"episode": 666, "avg bpm": 134.44276000000002, "138": 138}, {"episode": 667, "avg bpm": 134.8653461538462, "138": 138}, {"episode": 668, "avg bpm": 135.18003124999998, "138": 138}, {"episode": 669, "avg bpm": 138.00224000000003, "138": 138}, {"episode": 670, "avg bpm": 134.03676923076924, "138": 138}, {"episode": 671, "avg bpm": 133.96868181818184, "138": 138}, {"episode": 672, "avg bpm": 134.22039130434786, "138": 138}, {"episode": 673, "avg bpm": 134.93813333333335, "138": 138}, {"episode": 674, "avg bpm": 134.13500000000002, "138": 138}, {"episode": 675, "avg bpm": 132.05407692307693, "138": 138}, {"episode": 676, "avg bpm": 134.4766, "138": 138}, {"episode": 677, "avg bpm": 132.42891304347825, "138": 138}, {"episode": 678, "avg bpm": 133.34482608695652, "138": 138}, {"episode": 679, "avg bpm": 134.10988888888892, "138": 138}, {"episode": 680, "avg bpm": 134.97084615384614, "138": 138}, {"episode": 681, "avg bpm": 134.6736071428571, "138": 138}, {"episode": 682, "avg bpm": 134.69437499999995, "138": 138}, {"episode": 683, "avg bpm": 130.8484666666667, "138": 138}, {"episode": 684, "avg bpm": 132.55827999999997, "138": 138}, {"episode": 685, "avg bpm": 134.1382962962963, "138": 138}, {"episode": 686, "avg bpm": 134.673, "138": 138}, {"episode": 687, "avg bpm": 133.74129166666668, "138": 138}, {"episode": 688, "avg bpm": 135.85500000000002, "138": 138}, {"episode": 689, "avg bpm": 133.98184210526315, "138": 138}, {"episode": 690, "avg bpm": 133.14233333333337, "138": 138}, {"episode": 691, "avg bpm": 135.042, "138": 138}, {"episode": 692, "avg bpm": 134.2748148148148, "138": 138}, {"episode": 693, "avg bpm": 135.89253571428569, "138": 138}, {"episode": 694, "avg bpm": 132.47384615384618, "138": 138}, {"episode": 695, "avg bpm": 133.4268888888889, "138": 138}, {"episode": 696, "avg bpm": 132.8759393939394, "138": 138}, {"episode": 697, "avg bpm": 134.04812903225803, "138": 138}, {"episode": 698, "avg bpm": 130.34862499999997, "138": 138}, {"episode": 699, "avg bpm": 133.36096666666666, "138": 138}, {"episode": 700, "avg bpm": 133.92703333333336, "138": 138}, {"episode": 701, "avg bpm": 134.13889655172414, "138": 138}, {"episode": 702, "avg bpm": 133.61031999999997, "138": 138}, {"episode": 703, "avg bpm": 133.60486666666665, "138": 138}, {"episode": 704, "avg bpm": 133.50875862068966, "138": 138}, {"episode": 705, "avg bpm": 131.67403333333334, "138": 138}, {"episode": 706, "avg bpm": 133.16910714285711, "138": 138}, {"episode": 707, "avg bpm": 133.32366666666664, "138": 138}, {"episode": 708, "avg bpm": 132.19451851851852, "138": 138}, {"episode": 709, "avg bpm": 130.29041379310345, "138": 138}, {"episode": 710, "avg bpm": 131.32803846153848, "138": 138}, {"episode": 711, "avg bpm": 132.93415384615383, "138": 138}, {"episode": 712, "avg bpm": 132.62733333333333, "138": 138}, {"episode": 713, "avg bpm": 131.45742307692308, "138": 138}, {"episode": 714, "avg bpm": 133.33442857142856, "138": 138}, {"episode": 715, "avg bpm": 131.50799999999995, "138": 138}, {"episode": 716, "avg bpm": 133.80816000000002, "138": 138}, {"episode": 717, "avg bpm": 134.171, "138": 138}, {"episode": 718, "avg bpm": 133.99514285714287, "138": 138}, {"episode": 719, "avg bpm": 132.35024137931038, "138": 138}, {"episode": 720, "avg bpm": 134.85441666666665, "138": 138}, {"episode": 721, "avg bpm": 135.79308, "138": 138}, {"episode": 722, "avg bpm": 132.1653846153846, "138": 138}, {"episode": 723, "avg bpm": 134.32803703703706, "138": 138}, {"episode": 724, "avg bpm": 133.8720689655172, "138": 138}, {"episode": 725, "avg bpm": 134.00155555555554, "138": 138}, {"episode": 726, "avg bpm": 132.85689285714287, "138": 138}, {"episode": 727, "avg bpm": 130.64192857142856, "138": 138}, {"episode": 728, "avg bpm": 131.32431034482758, "138": 138}, {"episode": 729, "avg bpm": 132.8202692307692, "138": 138}, {"episode": 730, "avg bpm": 131.69824137931033, "138": 138}, {"episode": 731, "avg bpm": 133.9209230769231, "138": 138}, {"episode": 732, "avg bpm": 133.85075999999998, "138": 138}, {"episode": 733, "avg bpm": 133.04072000000002, "138": 138}, {"episode": 734, "avg bpm": 132.44504347826089, "138": 138}, {"episode": 735, "avg bpm": 132.90640740740741, "138": 138}, {"episode": 736, "avg bpm": 136.77028571428576, "138": 138}, {"episode": 737, "avg bpm": 131.21446153846153, "138": 138}, {"episode": 738, "avg bpm": 133.81199999999998, "138": 138}, {"episode": 739, "avg bpm": 134.68617647058824, "138": 138}, {"episode": 740, "avg bpm": 135.19875, "138": 138}, {"episode": 741, "avg bpm": 134.49836363636362, "138": 138}, {"episode": 742, "avg bpm": 133.215724137931, "138": 138}, {"episode": 743, "avg bpm": 134.39420833333332, "138": 138}, {"episode": 744, "avg bpm": 134.0848, "138": 138}, {"episode": 745, "avg bpm": 133.78703124999998, "138": 138}, {"episode": 746, "avg bpm": 133.61044444444445, "138": 138}, {"episode": 747, "avg bpm": 133.89519354838708, "138": 138}, {"episode": 748, "avg bpm": 134.25006666666667, "138": 138}, {"episode": 749, "avg bpm": 134.49348275862067, "138": 138}, {"episode": 750, "avg bpm": 134.52486206896558, "138": 138}, {"episode": 751, "avg bpm": 133.24758620689656, "138": 138}, {"episode": 752, "avg bpm": 134.78279310344826, "138": 138}, {"episode": 753, "avg bpm": 135.14206666666666, "138": 138}, {"episode": 754, "avg bpm": 133.30951851851853, "138": 138}, {"episode": 755, "avg bpm": 134.39432142857146, "138": 138}, {"episode": 756, "avg bpm": 133.32682758620692, "138": 138}, {"episode": 757, "avg bpm": 133.92216666666667, "138": 138}, {"episode": 758, "avg bpm": 135.60563333333334, "138": 138}, {"episode": 759, "avg bpm": 134.61039285714284, "138": 138}, {"episode": 760, "avg bpm": 132.22258064516132, "138": 138}, {"episode": 761, "avg bpm": 134.7048, "138": 138}, {"episode": 762, "avg bpm": 133.67548387096778, "138": 138}, {"episode": 763, "avg bpm": 133.5998620689655, "138": 138}, {"episode": 764, "avg bpm": 133.51309677419354, "138": 138}, {"episode": 765, "avg bpm": 132.3486, "138": 138}, {"episode": 766, "avg bpm": 135.2845806451613, "138": 138}, {"episode": 767, "avg bpm": 137.99186956521737, "138": 138}, {"episode": 768, "avg bpm": 133.78071874999998, "138": 138}, {"episode": 769, "avg bpm": 133.67255172413795, "138": 138}, {"episode": 770, "avg bpm": 132.91683333333333, "138": 138}, {"episode": 771, "avg bpm": 132.2058666666667, "138": 138}, {"episode": 772, "avg bpm": 132.2489, "138": 138}, {"episode": 773, "avg bpm": 133.7724827586207, "138": 138}, {"episode": 774, "avg bpm": 133.43496428571427, "138": 138}, {"episode": 775, "avg bpm": 134.3747931034483, "138": 138}, {"episode": 776, "avg bpm": 134.1148, "138": 138}, {"episode": 777, "avg bpm": 129.8170625, "138": 138}, {"episode": 778, "avg bpm": 132.95533333333333, "138": 138}, {"episode": 779, "avg bpm": 134.04316666666668, "138": 138}, {"episode": 780, "avg bpm": 134.47251612903224, "138": 138}, {"episode": 781, "avg bpm": 134.41713333333328, "138": 138}, {"episode": 782, "avg bpm": 133.67683333333335, "138": 138}, {"episode": 783, "avg bpm": 132.69382142857143, "138": 138}, {"episode": 784, "avg bpm": 129.7875945945946, "138": 138}, {"episode": 785, "avg bpm": 135.28489285714286, "138": 138}, {"episode": 786, "avg bpm": 137.93823529411767, "138": 138}, {"episode": 787, "avg bpm": 134.23067741935483, "138": 138}, {"episode": 788, "avg bpm": 133.30783333333335, "138": 138}, {"episode": 789, "avg bpm": 132.78792307692308, "138": 138}, {"episode": 790, "avg bpm": 133.193, "138": 138}, {"episode": 791, "avg bpm": 132.86925925925928, "138": 138}, {"episode": 792, "avg bpm": 131.17041666666668, "138": 138}, {"episode": 793, "avg bpm": 134.82616, "138": 138}, {"episode": 794, "avg bpm": 134.30442857142856, "138": 138}, {"episode": 795, "avg bpm": 134.13833333333332, "138": 138}, {"episode": 796, "avg bpm": 131.71124, "138": 138}, {"episode": 797, "avg bpm": 132.5643846153846, "138": 138}, {"episode": 798, "avg bpm": 132.77835714285715, "138": 138}, {"episode": 799, "avg bpm": 133.99949999999998, "138": 138}, {"episode": 800, "avg bpm": 133.92342307692306, "138": 138}, {"episode": 801, "avg bpm": 132.23586206896556, "138": 138}, {"episode": 802, "avg bpm": 134.13236666666668, "138": 138}, {"episode": 803, "avg bpm": 133.02360714285712, "138": 138}, {"episode": 804, "avg bpm": 134.41214814814813, "138": 138}, {"episode": 805, "avg bpm": 134.16785, "138": 138}, {"episode": 806, "avg bpm": 134.1669259259259, "138": 138}, {"episode": 807, "avg bpm": 134.2792592592593, "138": 138}, {"episode": 808, "avg bpm": 134.74303703703703, "138": 138}, {"episode": 809, "avg bpm": 133.08244444444446, "138": 138}, {"episode": 810, "avg bpm": 133.54130769230767, "138": 138}, {"episode": 811, "avg bpm": 133.3092142857143, "138": 138}, {"episode": 812, "avg bpm": 132.18339285714282, "138": 138}, {"episode": 813, "avg bpm": 134.57892857142855, "138": 138}, {"episode": 814, "avg bpm": 133.50725000000003, "138": 138}, {"episode": 815, "avg bpm": 135.084, "138": 138}, {"episode": 816, "avg bpm": 133.09765217391302, "138": 138}, {"episode": 817, "avg bpm": 131.25976923076922, "138": 138}, {"episode": 818, "avg bpm": 136.49880000000002, "138": 138}, {"episode": 819, "avg bpm": 137.45329629629632, "138": 138}, {"episode": 820, "avg bpm": 136.04726666666667, "138": 138}, {"episode": 821, "avg bpm": 134.59479310344827, "138": 138}, {"episode": 822, "avg bpm": 134.36700000000002, "138": 138}, {"episode": 823, "avg bpm": 129.83504166666663, "138": 138}, {"episode": 824, "avg bpm": 133.70152000000002, "138": 138}, {"episode": 825, "avg bpm": 136.77075999999997, "138": 138}, {"episode": 826, "avg bpm": 136.0008823529412, "138": 138}, {"episode": 827, "avg bpm": 133.94448, "138": 138}, {"episode": 828, "avg bpm": 132.54734782608696, "138": 138}, {"episode": 829, "avg bpm": 133.83595652173912, "138": 138}, {"episode": 830, "avg bpm": 133.4032, "138": 138}, {"episode": 831, "avg bpm": 132.65344000000002, "138": 138}, {"episode": 832, "avg bpm": 133.27492857142857, "138": 138}, {"episode": 833, "avg bpm": 133.46977272727273, "138": 138}, {"episode": 834, "avg bpm": 132.91824137931033, "138": 138}, {"episode": 835, "avg bpm": 133.2641818181818, "138": 138}, {"episode": 836, "avg bpm": 136.3166666666667, "138": 138}, {"episode": 837, "avg bpm": 132.61037931034483, "138": 138}, {"episode": 838, "avg bpm": 134.00923076923078, "138": 138}, {"episode": 839, "avg bpm": 130.64441379310344, "138": 138}, {"episode": 840, "avg bpm": 131.6992962962963, "138": 138}, {"episode": 841, "avg bpm": 132.2494827586207, "138": 138}, {"episode": 842, "avg bpm": 131.34531818181821, "138": 138}, {"episode": 843, "avg bpm": 131.11154166666665, "138": 138}, {"episode": 844, "avg bpm": 132.83395652173914, "138": 138}, {"episode": 845, "avg bpm": 134.85446153846155, "138": 138}, {"episode": 846, "avg bpm": 135.96510714285714, "138": 138}, {"episode": 847, "avg bpm": 134.51385185185183, "138": 138}, {"episode": 848, "avg bpm": 131.7132272727273, "138": 138}, {"episode": 849, "avg bpm": 133.22716666666665, "138": 138}, {"episode": 850, "avg bpm": 128.94950000000003, "138": 138}, {"episode": 851, "avg bpm": 133.52710714285712, "138": 138}, {"episode": 852, "avg bpm": 132.5891153846154, "138": 138}, {"episode": 853, "avg bpm": 130.84086363636362, "138": 138}, {"episode": 854, "avg bpm": 130.40140740740742, "138": 138}, {"episode": 855, "avg bpm": 132.84699999999998, "138": 138}, {"episode": 856, "avg bpm": 132.48771428571428, "138": 138}, {"episode": 857, "avg bpm": 135.0128275862069, "138": 138}, {"episode": 858, "avg bpm": 132.34226923076923, "138": 138}, {"episode": 859, "avg bpm": 134.0074482758621, "138": 138}, {"episode": 860, "avg bpm": 133.03132142857143, "138": 138}, {"episode": 861, "avg bpm": 132.14435714285716, "138": 138}, {"episode": 862, "avg bpm": 131.46352000000002, "138": 138}, {"episode": 863, "avg bpm": 134.21020000000001, "138": 138}, {"episode": 864, "avg bpm": 132.38717241379305, "138": 138}, {"episode": 865, "avg bpm": 129.34812499999998, "138": 138}, {"episode": 866, "avg bpm": 133.03417857142855, "138": 138}, {"episode": 867, "avg bpm": 133.845, "138": 138}, {"episode": 868, "avg bpm": 131.53803703703701, "138": 138}, {"episode": 869, "avg bpm": 129.88072222222226, "138": 138}, {"episode": 870, "avg bpm": 133.0428846153846, "138": 138}, {"episode": 871, "avg bpm": 131.70696551724137, "138": 138}, {"episode": 872, "avg bpm": 134.54886206896552, "138": 138}, {"episode": 873, "avg bpm": 132.81004166666665, "138": 138}, {"episode": 874, "avg bpm": 134.31396153846154, "138": 138}, {"episode": 875, "avg bpm": 133.52128000000002, "138": 138}, {"episode": 876, "avg bpm": 133.71744827586207, "138": 138}, {"episode": 877, "avg bpm": 137.25261904761905, "138": 138}, {"episode": 878, "avg bpm": 133.54445833333332, "138": 138}, {"episode": 879, "avg bpm": 131.8818, "138": 138}, {"episode": 880, "avg bpm": 134.4645925925926, "138": 138}, {"episode": 881, "avg bpm": 132.6415238095238, "138": 138}, {"episode": 882, "avg bpm": 133.9512222222222, "138": 138}, {"episode": 883, "avg bpm": 132.971, "138": 138}, {"episode": 884, "avg bpm": 134.69930769230768, "138": 138}, {"episode": 885, "avg bpm": 135.96192307692309, "138": 138}, {"episode": 886, "avg bpm": 133.4401851851852, "138": 138}, {"episode": 887, "avg bpm": 133.45158333333333, "138": 138}, {"episode": 888, "avg bpm": 130.22328260869565, "138": 138}, {"episode": 889, "avg bpm": 133.68085714285715, "138": 138}, {"episode": 890, "avg bpm": 132.77891666666667, "138": 138}, {"episode": 891, "avg bpm": 136.9570303030303, "138": 138}, {"episode": 892, "avg bpm": 131.728, "138": 138}, {"episode": 893, "avg bpm": 131.79992592592592, "138": 138}, {"episode": 894, "avg bpm": 133.67212500000002, "138": 138}, {"episode": 895, "avg bpm": 133.8351304347826, "138": 138}, {"episode": 896, "avg bpm": 128.96949999999998, "138": 138}, {"episode": 897, "avg bpm": 135.61634615384614, "138": 138}, {"episode": 898, "avg bpm": 134.423, "138": 138}, {"episode": 899, "avg bpm": 136.45667857142857, "138": 138}, {"episode": 900, "avg bpm": 133.47709677419354, "138": 138}, {"episode": 901, "avg bpm": 136.07448, "138": 138}, {"episode": 902, "avg bpm": 131.39707692307692, "138": 138}, {"episode": 903, "avg bpm": 133.7264827586207, "138": 138}, {"episode": 904, "avg bpm": 132.50595833333333, "138": 138}, {"episode": 905, "avg bpm": 133.90816666666666, "138": 138}, {"episode": 906, "avg bpm": 131.71496428571427, "138": 138}, {"episode": 907, "avg bpm": 136.80014285714284, "138": 138}, {"episode": 908, "avg bpm": 134.88870370370373, "138": 138}, {"episode": 909, "avg bpm": 133.399, "138": 138}, {"episode": 910, "avg bpm": 134.19322222222223, "138": 138}, {"episode": 911, "avg bpm": 133.64124, "138": 138}, {"episode": 912, "avg bpm": 134.35554166666665, "138": 138}, {"episode": 913, "avg bpm": 126.88239285714285, "138": 138}, {"episode": 914, "avg bpm": 129.67711111111112, "138": 138}, {"episode": 915, "avg bpm": 135.51382142857145, "138": 138}, {"episode": 916, "avg bpm": 132.21625925925926, "138": 138}, {"episode": 917, "avg bpm": 132.27072727272727, "138": 138}, {"episode": 918, "avg bpm": 134.23896000000002, "138": 138}, {"episode": 919, "avg bpm": 132.41412000000003, "138": 138}, {"episode": 920, "avg bpm": 136.1258214285714, "138": 138}, {"episode": 921, "avg bpm": 133.74175, "138": 138}, {"episode": 922, "avg bpm": 132.17473076923073, "138": 138}, {"episode": 923, "avg bpm": 132.67416, "138": 138}, {"episode": 924, "avg bpm": 132.48577272727272, "138": 138}, {"episode": 925, "avg bpm": 139.43921428571429, "138": 138}, {"episode": 926, "avg bpm": 135.91715384615378, "138": 138}, {"episode": 927, "avg bpm": 131.87668, "138": 138}, {"episode": 928, "avg bpm": 133.91233333333332, "138": 138}, {"episode": 929, "avg bpm": 133.56604166666673, "138": 138}, {"episode": 930, "avg bpm": 129.45915789473682, "138": 138}, {"episode": 931, "avg bpm": 130.39295, "138": 138}, {"episode": 932, "avg bpm": 135.0901851851852, "138": 138}, {"episode": 933, "avg bpm": 130.90937499999998, "138": 138}, {"episode": 934, "avg bpm": 133.97030434782607, "138": 138}, {"episode": 935, "avg bpm": 132.34869565217392, "138": 138}, {"episode": 936, "avg bpm": 137.91912903225807, "138": 138}, {"episode": 937, "avg bpm": 131.95476, "138": 138}, {"episode": 938, "avg bpm": 134.32416666666668, "138": 138}, {"episode": 939, "avg bpm": 134.8885, "138": 138}, {"episode": 940, "avg bpm": 129.92036170212768, "138": 138}, {"episode": 941, "avg bpm": 133.35913793103452, "138": 138}, {"episode": 942, "avg bpm": 134.99106896551723, "138": 138}, {"episode": 943, "avg bpm": 132.00403333333335, "138": 138}, {"episode": 944, "avg bpm": 132.57283333333334, "138": 138}, {"episode": 945, "avg bpm": 131.84468965517237, "138": 138}, {"episode": 946, "avg bpm": 137.66891304347828, "138": 138}, {"episode": 947, "avg bpm": 132.99715384615382, "138": 138}, {"episode": 948, "avg bpm": 135.84431034482756, "138": 138}, {"episode": 949, "avg bpm": 131.8325925925926, "138": 138}, {"episode": 950, "avg bpm": 134.50796551724136, "138": 138}, {"episode": 951, "avg bpm": 133.0438, "138": 138}, {"episode": 952, "avg bpm": 131.20586206896553, "138": 138}, {"episode": 953, "avg bpm": 135.5283666666667, "138": 138}, {"episode": 954, "avg bpm": 133.67183333333335, "138": 138}, {"episode": 955, "avg bpm": 133.95320588235296, "138": 138}, {"episode": 956, "avg bpm": 133.51260606060603, "138": 138}, {"episode": 957, "avg bpm": 132.1800294117647, "138": 138}]}}, {"mode": "vega-lite"});
</script>
</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>And there we have it! There's plenty more to investigate beyond BPM, stay tuned..</p>

</div>
</div>
</div>
</div>]]></content><author><name></name></author><category term="asot" /><category term="bpm" /><summary type="html"><![CDATA[Tracking average episode BPM over time.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://scottbrenner.github.io/asot-jupyter/images/avg-bpm.png" /><media:content medium="image" url="https://scottbrenner.github.io/asot-jupyter/images/avg-bpm.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Methodology</title><link href="https://scottbrenner.github.io/asot-jupyter/asot/bpm/2020/04/27/methodology.html" rel="alternate" type="text/html" title="Methodology" /><published>2020-04-27T00:00:00-05:00</published><updated>2020-04-27T00:00:00-05:00</updated><id>https://scottbrenner.github.io/asot-jupyter/asot/bpm/2020/04/27/methodology</id><content type="html" xml:base="https://scottbrenner.github.io/asot-jupyter/asot/bpm/2020/04/27/methodology.html"><![CDATA[<!--
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: _notebooks/2020-04-27-methodology.ipynb
-->

<div class="container" id="notebook-container">
        
<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>The Spotify Web API can return over a dozen <a href="https://developer.spotify.com/documentation/web-api/reference/tracks/get-audio-features/">audio features for a track</a>, notably <code>tempo</code> - "The overall estimated tempo of a track in beats per minute (BPM)."</p>
<p>Given a Spotify ID, <a href="https://spotipy.readthedocs.io/en/latest/?highlight=audio_features#spotipy.client.Spotify.audio_features">Spotipy's <code>audio_features</code> method</a> can be called as follows:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="sd">&quot;&quot;&quot;</span>
<span class="sd">Artist: Above &amp; Beyond, Richard Bedford</span>
<span class="sd">Track: Sun &amp; Moon</span>
<span class="sd">Track link: https://open.spotify.com/track/2CG1FmeprsyjgHIPNMYCf4</span>
<span class="sd">Track ID: 2CG1FmeprsyjgHIPNMYCf4</span>
<span class="sd">&quot;&quot;&quot;</span>
<span class="n">sun_and_moon_id</span> <span class="o">=</span> <span class="s1">&#39;2CG1FmeprsyjgHIPNMYCf4&#39;</span>
<span class="n">audio_features</span> <span class="o">=</span> <span class="n">sp</span><span class="o">.</span><span class="n">audio_features</span><span class="p">(</span><span class="n">sun_and_moon_id</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">audio_features</span><span class="p">,</span> <span class="n">indent</span><span class="o">=</span><span class="mi">2</span><span class="p">))</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>[
  {
    &#34;danceability&#34;: 0.691,
    &#34;energy&#34;: 0.522,
    &#34;key&#34;: 6,
    &#34;loudness&#34;: -8.024,
    &#34;mode&#34;: 0,
    &#34;speechiness&#34;: 0.0908,
    &#34;acousticness&#34;: 0.0216,
    &#34;instrumentalness&#34;: 0.0141,
    &#34;liveness&#34;: 0.125,
    &#34;valence&#34;: 0.187,
    &#34;tempo&#34;: 133.995,
    &#34;type&#34;: &#34;audio_features&#34;,
    &#34;id&#34;: &#34;2CG1FmeprsyjgHIPNMYCf4&#34;,
    &#34;uri&#34;: &#34;spotify:track:2CG1FmeprsyjgHIPNMYCf4&#34;,
    &#34;track_href&#34;: &#34;https://api.spotify.com/v1/tracks/2CG1FmeprsyjgHIPNMYCf4&#34;,
    &#34;analysis_url&#34;: &#34;https://api.spotify.com/v1/audio-analysis/2CG1FmeprsyjgHIPNMYCf4&#34;,
    &#34;duration_ms&#34;: 326267,
    &#34;time_signature&#34;: 4
  }
]
</pre>
</div>
</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Nice! Looks like the "<code>tempo</code>", or BPM, of this track is around 133. Let's continue.</p>
<p>Conveniently, the entire back catalogue of A State of Trance - 950+ episodes - has been uploaded to Spotify under the artist <a href="https://open.spotify.com/artist/25mFVpuABa9GkGcj9eOPce">"Armin van Buuren ASOT Radio"</a>. <a href="https://spotipy.readthedocs.io/en/2.12.0/?highlight=audio_features#spotipy.client.Spotify.artist_albums">Spotipy's <code>artist_albums</code> method</a> can list them for us, courtesy <a href="https://github.com/plamere/spotipy/blob/2584d8cf5675ce877f773112a76d42fe36f8a1d1/examples/artist_albums.py#L29-L42">spotipy/examples/artist_albums.py</a>:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="sd">&quot;&quot;&quot;</span>
<span class="sd">Artist: Armin van Buuren ASOT Radio</span>
<span class="sd">Artist link: https://open.spotify.com/artist/25mFVpuABa9GkGcj9eOPce</span>
<span class="sd">Artist ID: 25mFVpuABa9GkGcj9eOPce</span>
<span class="sd">&quot;&quot;&quot;</span>

<span class="n">asot_radio_id</span> <span class="o">=</span> <span class="s1">&#39;25mFVpuABa9GkGcj9eOPce&#39;</span>

<span class="n">albums</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">results</span> <span class="o">=</span> <span class="n">sp</span><span class="o">.</span><span class="n">artist_albums</span><span class="p">(</span><span class="n">asot_radio_id</span><span class="p">,</span> <span class="n">album_type</span><span class="o">=</span><span class="s1">&#39;album&#39;</span><span class="p">)</span>
<span class="n">albums</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="n">results</span><span class="p">[</span><span class="s1">&#39;items&#39;</span><span class="p">])</span>
<span class="k">while</span> <span class="n">results</span><span class="p">[</span><span class="s1">&#39;next&#39;</span><span class="p">]:</span>
    <span class="n">results</span> <span class="o">=</span> <span class="n">sp</span><span class="o">.</span><span class="n">next</span><span class="p">(</span><span class="n">results</span><span class="p">)</span>
    <span class="n">albums</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="n">results</span><span class="p">[</span><span class="s1">&#39;items&#39;</span><span class="p">])</span>
<span class="n">seen</span> <span class="o">=</span> <span class="nb">set</span><span class="p">()</span>  <span class="c1"># to avoid dups</span>
<span class="k">for</span> <span class="n">album</span> <span class="ow">in</span> <span class="n">albums</span><span class="p">:</span>
    <span class="n">name</span> <span class="o">=</span> <span class="n">album</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">]</span>
    <span class="k">if</span> <span class="n">name</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">seen</span><span class="p">:</span>
        <span class="n">seen</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>

<span class="n">albums</span><span class="o">.</span><span class="n">sort</span><span class="p">(</span><span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="p">[</span><span class="s1">&#39;release_date&#39;</span><span class="p">])</span> <span class="c1"># Sort by release date</span>
</pre></div>

    </div>
</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Cool, our list <code>albums</code> should now contain every episode of A State of Trance! Let's take a quick look..</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="k">for</span> <span class="n">album</span> <span class="ow">in</span> <span class="n">albums</span><span class="p">[:</span><span class="mi">10</span><span class="p">]:</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">album</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">])</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>A State Of Trance Episode 001
A State Of Trance Episode 003
A State Of Trance Episode 004
A State Of Trance Episode 005
A State Of Trance Episode 007
A State Of Trance Episode 008
A State Of Trance Episode 009
A State Of Trance Episode 010
A State Of Trance Episode 012
A State Of Trance Episode 015
</pre>
</div>
</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Hm, aren't we missing a few?</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="nb">len</span><span class="p">(</span><span class="n">albums</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">



<div class="output_text output_subarea output_execute_result">
<pre>935</pre>
</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>For some reason 25 early episodes are classified as "Singles and EPs". Let's grab those as well, and add them to the list.</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="sd">&quot;&quot;&quot;</span>
<span class="sd">Artist: Armin van Buuren ASOT Radio</span>
<span class="sd">Artist link: https://open.spotify.com/artist/25mFVpuABa9GkGcj9eOPce</span>
<span class="sd">Artist ID: 25mFVpuABa9GkGcj9eOPce</span>
<span class="sd">&quot;&quot;&quot;</span>

<span class="n">asot_radio_id</span> <span class="o">=</span> <span class="s1">&#39;25mFVpuABa9GkGcj9eOPce&#39;</span>

<span class="n">singles</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">results</span> <span class="o">=</span> <span class="n">sp</span><span class="o">.</span><span class="n">artist_albums</span><span class="p">(</span><span class="n">asot_radio_id</span><span class="p">,</span> <span class="n">album_type</span><span class="o">=</span><span class="s1">&#39;single&#39;</span><span class="p">)</span>
<span class="n">singles</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="n">results</span><span class="p">[</span><span class="s1">&#39;items&#39;</span><span class="p">])</span>
<span class="k">while</span> <span class="n">results</span><span class="p">[</span><span class="s1">&#39;next&#39;</span><span class="p">]:</span>
    <span class="n">results</span> <span class="o">=</span> <span class="n">sp</span><span class="o">.</span><span class="n">next</span><span class="p">(</span><span class="n">results</span><span class="p">)</span>
    <span class="n">singles</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="n">results</span><span class="p">[</span><span class="s1">&#39;items&#39;</span><span class="p">])</span>
<span class="n">seen</span> <span class="o">=</span> <span class="nb">set</span><span class="p">()</span>  <span class="c1"># to avoid dups</span>
<span class="k">for</span> <span class="n">single</span> <span class="ow">in</span> <span class="n">singles</span><span class="p">:</span>
    <span class="n">name</span> <span class="o">=</span> <span class="n">single</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">]</span>
    <span class="k">if</span> <span class="n">name</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">seen</span><span class="p">:</span>
        <span class="n">seen</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>

<span class="n">episodes</span> <span class="o">=</span> <span class="n">singles</span> <span class="o">+</span> <span class="n">albums</span>

<span class="n">episodes</span><span class="o">.</span><span class="n">sort</span><span class="p">(</span><span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="p">[</span><span class="s1">&#39;release_date&#39;</span><span class="p">])</span> <span class="c1"># Sort by release date</span>

<span class="k">for</span> <span class="n">episode</span> <span class="ow">in</span> <span class="n">episodes</span><span class="p">[:</span><span class="mi">10</span><span class="p">]:</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">episode</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">])</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>A State Of Trance Episode 000
A State Of Trance Episode 001
A State Of Trance Episode 002
A State Of Trance Episode 003
A State Of Trance Episode 004
A State Of Trance Episode 005
A State Of Trance Episode 006
A State Of Trance Episode 007
A State Of Trance Episode 008
A State Of Trance Episode 009
</pre>
</div>
</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Nice!</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="nb">len</span><span class="p">(</span><span class="n">episodes</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">



<div class="output_text output_subarea output_execute_result">
<pre>960</pre>
</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Great, that's every available episode as of writing. Let's see what we can do with all this, starting with a tracklist courtesy of <a href="https://spotipy.readthedocs.io/en/latest/?highlight=audio_features#spotipy.client.Spotify.album_tracks">Spotipy's <code>album_tracks</code> method</a>:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered celltag_outputPrepend">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="k">for</span> <span class="n">track</span> <span class="ow">in</span> <span class="n">sp</span><span class="o">.</span><span class="n">album_tracks</span><span class="p">(</span><span class="n">episodes</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="s1">&#39;uri&#39;</span><span class="p">])[</span><span class="s1">&#39;items&#39;</span><span class="p">]:</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">track</span><span class="p">[</span><span class="s1">&#39;artists&#39;</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="s1">&#39;name&#39;</span><span class="p">],</span> <span class="s1">&#39;-&#39;</span><span class="p">,</span> <span class="n">track</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">])</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>Armin van Buuren - A State Of Trance [ASOT 001] - Intro
Liquid DJ Team - Liquidation [ASOT 001] - Marco V Mix
The Ultimate Seduction - The Ultimate Seduction [ASOT 001] **ASOT Radio Classic** - Original Mix
System F - Exhale [ASOT 001] - Ferry Corsten &amp; Armin van Buuren New Mix
Rising Star - Clear Blue Moon [ASOT 001] - Original Mix
Ralphie B - Massive [ASOT 001] - Original Mix
Rank 1 - Such is Life [ASOT 001] - Original Mix
Armin van Buuren - Blue Fear [ASOT 001] - Original Mix
Armin van Buuren - A State Of Trance [ASOT 001] - Outro
</pre>
</div>
</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Seems most of the early episodes are missing a bunch of tracks unfortunately, <a href="http://www.astateoftrance.com/episodes/episode-001/">A State of Trance's website reports twice as many tracks in this episode</a> and we'll want to remove the intro and outro as well.</p>
<p>Looking at a more recent episode:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="k">for</span> <span class="n">track</span> <span class="ow">in</span> <span class="n">sp</span><span class="o">.</span><span class="n">album_tracks</span><span class="p">(</span><span class="n">episodes</span><span class="p">[</span><span class="mi">945</span><span class="p">][</span><span class="s1">&#39;uri&#39;</span><span class="p">])[</span><span class="s1">&#39;items&#39;</span><span class="p">]:</span>
    <span class="n">track_artist</span> <span class="o">=</span> <span class="n">track</span><span class="p">[</span><span class="s1">&#39;artists&#39;</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="s1">&#39;name&#39;</span><span class="p">]</span>
    <span class="k">for</span> <span class="n">artist</span> <span class="ow">in</span> <span class="n">track</span><span class="p">[</span><span class="s1">&#39;artists&#39;</span><span class="p">][</span><span class="mi">1</span><span class="p">:]:</span>
        <span class="n">track_artist</span> <span class="o">+=</span> <span class="s2">&quot; &amp; &quot;</span> <span class="o">+</span> <span class="n">artist</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">]</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">track_artist</span><span class="p">,</span> <span class="s1">&#39;-&#39;</span><span class="p">,</span> <span class="n">track</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">])</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>Armin van Buuren - A State Of Trance (ASOT 950 - Part 1) - Intro
Armin van Buuren - Let The Music Guide You (ASOT 950 Anthem) [ASOT 950 - Part 1]
Armin van Buuren - A State Of Trance (ASOT 950 - Part 1) - Coming Up, Pt. 1
Armin van Buuren - A State Of Trance (ASOT 950 - Part 1) - Service For Dreamers Special, Pt. 1
Armin van Buuren - A State Of Trance (ASOT 950 - Part 1) - ASOT 950 Event, Pt. 1
Armin van Buuren - A State Of Trance (ASOT 950 - Part 1) - Requested by Alana Katherine &amp; Reanna Parsons from Canada, Pt. 1
Armin van Buuren - A State Of Trance (ASOT 950 - Part 1) - Requested by Alana Katherine &amp; Reanna Parsons from Canada, Pt. 2
Tritonal &amp; Jeza - I Can Breathe (ASOT 950 - Part 1) - Tritonal Club Mix
Armin van Buuren - A State Of Trance (ASOT 950 - Part 1) - Requested by Codrin Lustin from Romania
Super8 &amp; Tab - Nino (ASOT 950 - Part 1)
Armin van Buuren - A State Of Trance (ASOT 950 - Part 1) - Requested by Jaime Oliveira from Portugal
Mark Knight &amp; D. Ramirez &amp; Underworld &amp; Armin van Buuren - Downpipe (ASOT 950 - Part 1) - Armin van Buuren Remix
Armin van Buuren - A State Of Trance (ASOT 950 - Part 1) - Requested by James Holloway from the UK
Oliver Smith - Chordplay (ASOT 950 - Part 1)
Armin van Buuren - A State Of Trance (ASOT 950 - Part 1) - Requested by Ilan Bluestone &amp; Maor Levi, Pt. 1
Armin van Buuren - A State Of Trance (ASOT 950 - Part 1) - Requested by Ilan Bluestone &amp; Maor Levi, Pt. 2
Armin van Buuren &amp; Sharon Den Adel &amp; Ilan Bluestone &amp; Maor Levi - In And Out Of Love (ASOT 950 - Part 1) - ilan Bluestone &amp; Maor Levi Remix
Armin van Buuren - A State Of Trance (ASOT 950 - Part 1) - Requested by Raymundo from Canada
Armin van Buuren - A State Of Trance (ASOT 950 - Part 1) - Coming Up, Pt. 2
Assaf &amp; Cassandra Grey - All Of You (ASOT 950 - Part 1)
Armin van Buuren - A State Of Trance (ASOT 950 - Part 1) - Requested by Rafael from The Philippines
Jorn Van Deynhoven - New Horizons (A State Of Trance 650 Anthem) [ASOT 950 - Part 1]
Armin van Buuren - A State Of Trance (ASOT 950 - Part 1) - Requested by Michiel &amp; Veronique from The Netherlands
Ferry Corsten &amp; Betsie Larkin - Made Of Love (ASOT 950 - Part 1)
Armin van Buuren - A State Of Trance (ASOT 950 - Part 1) - Requested by Pedro Soussa from Portugal, Pt. 1
Armin van Buuren - A State Of Trance (ASOT 950 - Part 1) - Requested by Pedro Soussa from Portugal, Pt. 2
Eco - A Million Sounds, A Thousand Smiles (ASOT 950 - Part 1)
Armin van Buuren - A State Of Trance (ASOT 950 - Part 1) - Requested by Edwin and Susana from Canada
Dennis Sheperd &amp; Cold Blue &amp; Ana Criado - Fallen Angel (ASOT 950 - Part 1) - Dennis Sheperd Club Mix
Armin van Buuren - A State Of Trance (ASOT 950 - Part 1) - Requested by Abdul Rahman from Canada
Omnia &amp; Everything By Electricity - Bones (ASOT 950 - Part 1)
Armin van Buuren - A State Of Trance (ASOT 950 - Part 1) - Thank You!
Armin van Buuren - A State Of Trance (ASOT 950 - Part 1) - Track Recap, Pt. 1
Armin van Buuren - A State Of Trance (ASOT 950 - Part 1) - Requested by Kyle Assue from Trinidad and Tobago, Pt. 1
Armin van Buuren - A State Of Trance (ASOT 950 - Part 1) - Requested by Kyle Assue from Trinidad and Tobago, Pt. 2
Armin van Buuren - The Train (ASOT 950 - Part 1)
Armin van Buuren - A State Of Trance (ASOT 950 - Part 1) - Track Recap, Pt. 2
Armin van Buuren - A State Of Trance (ASOT 950 - Part 1) - Stay Tuned For More
Armin van Buuren - A State Of Trance (ASOT 950 - Part 1) - Requested by Maxim from Germany
Armin van Buuren &amp; Shapov - The Last Dancer (ASOT 950 - Part 1)
Armin van Buuren - A State Of Trance (ASOT 950 - Part 1) - Requested by Mauricio from Brazil
HALIENE &amp; Ruben de Ronde - Dream In Color (ASOT 950 - Part 1) - Ruben de Ronde Remix
Armin van Buuren - A State Of Trance (ASOT 950 - Part 1) - Requested by Tita from Canada
Armin van Buuren &amp; Avian Grays &amp; Jordan Shaw - Something Real (ASOT 950 - Part 1)
Armin van Buuren - A State Of Trance (ASOT 950 - Part 1) - Requested by Mr. and Mrs. ReOrder from Czech Republic
Above &amp; Beyond &amp; Richard Bedford - Sun &amp; Moon (ASOT 950 - Part 1) - Club Mix
Armin van Buuren - A State Of Trance (ASOT 950 - Part 1) - Requested by Jeffrey from the USA
Armin van Buuren &amp; Fiora &amp; Beat Service - Waiting For The Night (ASOT 950 - Part 1) - Beat Service Remix
Armin van Buuren - A State Of Trance (ASOT 950 - Part 1) - Requested by Damian Panek from Poland
Shogun - Laputa (ASOT 950 - Part 1)
</pre>
</div>
</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>The more recent episodes feature a Spotify exclusive - voiceover interludes! Seems they all contain "A State of Trance" though, same with the regular intros and outros.</p>
<p>Without them:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">episode_tracks</span> <span class="o">=</span> <span class="n">sp</span><span class="o">.</span><span class="n">album_tracks</span><span class="p">(</span><span class="n">episodes</span><span class="p">[</span><span class="mi">945</span><span class="p">][</span><span class="s1">&#39;uri&#39;</span><span class="p">])[</span><span class="s1">&#39;items&#39;</span><span class="p">]</span>
<span class="n">pruned_tracks</span> <span class="o">=</span> <span class="p">[]</span>

<span class="k">for</span> <span class="n">track</span> <span class="ow">in</span> <span class="n">episode_tracks</span><span class="p">:</span>
    <span class="k">if</span> <span class="s2">&quot;a state of trance&quot;</span> <span class="ow">in</span> <span class="n">track</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span> <span class="ow">or</span> <span class="s2">&quot;- interview&quot;</span> <span class="ow">in</span> <span class="n">track</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">lower</span><span class="p">():</span>
        <span class="k">continue</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">pruned_tracks</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">track</span><span class="p">)</span>
        <span class="n">track_artist</span> <span class="o">=</span> <span class="n">track</span><span class="p">[</span><span class="s1">&#39;artists&#39;</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="s1">&#39;name&#39;</span><span class="p">]</span>
        <span class="k">for</span> <span class="n">artist</span> <span class="ow">in</span> <span class="n">track</span><span class="p">[</span><span class="s1">&#39;artists&#39;</span><span class="p">][</span><span class="mi">1</span><span class="p">:]:</span>
            <span class="n">track_artist</span> <span class="o">+=</span> <span class="s2">&quot; &amp; &quot;</span> <span class="o">+</span> <span class="n">artist</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">]</span>
        <span class="nb">print</span><span class="p">(</span><span class="n">track_artist</span><span class="p">,</span> <span class="s1">&#39;-&#39;</span><span class="p">,</span> <span class="n">track</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">])</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">

<div class="output_subarea output_stream output_stdout output_text">
<pre>Armin van Buuren - Let The Music Guide You (ASOT 950 Anthem) [ASOT 950 - Part 1]
Tritonal &amp; Jeza - I Can Breathe (ASOT 950 - Part 1) - Tritonal Club Mix
Super8 &amp; Tab - Nino (ASOT 950 - Part 1)
Mark Knight &amp; D. Ramirez &amp; Underworld &amp; Armin van Buuren - Downpipe (ASOT 950 - Part 1) - Armin van Buuren Remix
Oliver Smith - Chordplay (ASOT 950 - Part 1)
Armin van Buuren &amp; Sharon Den Adel &amp; Ilan Bluestone &amp; Maor Levi - In And Out Of Love (ASOT 950 - Part 1) - ilan Bluestone &amp; Maor Levi Remix
Assaf &amp; Cassandra Grey - All Of You (ASOT 950 - Part 1)
Ferry Corsten &amp; Betsie Larkin - Made Of Love (ASOT 950 - Part 1)
Eco - A Million Sounds, A Thousand Smiles (ASOT 950 - Part 1)
Dennis Sheperd &amp; Cold Blue &amp; Ana Criado - Fallen Angel (ASOT 950 - Part 1) - Dennis Sheperd Club Mix
Omnia &amp; Everything By Electricity - Bones (ASOT 950 - Part 1)
Armin van Buuren - The Train (ASOT 950 - Part 1)
Armin van Buuren &amp; Shapov - The Last Dancer (ASOT 950 - Part 1)
HALIENE &amp; Ruben de Ronde - Dream In Color (ASOT 950 - Part 1) - Ruben de Ronde Remix
Armin van Buuren &amp; Avian Grays &amp; Jordan Shaw - Something Real (ASOT 950 - Part 1)
Above &amp; Beyond &amp; Richard Bedford - Sun &amp; Moon (ASOT 950 - Part 1) - Club Mix
Armin van Buuren &amp; Fiora &amp; Beat Service - Waiting For The Night (ASOT 950 - Part 1) - Beat Service Remix
Shogun - Laputa (ASOT 950 - Part 1)
</pre>
</div>
</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Much better! Finally, for fun, let's track this episode's BPM over time using some visualization libraries:</p>

</div>
</div>
</div>
    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="kn">import</span> <span class="nn">altair</span> <span class="k">as</span> <span class="nn">alt</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
<span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
</pre></div>

    </div>
</div>
</div>

</div>
    

    
    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">

<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">bpm</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">track</span> <span class="ow">in</span> <span class="n">pruned_tracks</span><span class="p">:</span>
    <span class="n">bpm</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">sp</span><span class="o">.</span><span class="n">audio_features</span><span class="p">(</span><span class="n">track</span><span class="p">[</span><span class="s1">&#39;uri&#39;</span><span class="p">])[</span><span class="mi">0</span><span class="p">][</span><span class="s1">&#39;tempo&#39;</span><span class="p">])</span>

<span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">pruned_tracks</span><span class="p">))</span>   

<span class="n">source</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">({</span>
  <span class="s1">&#39;track&#39;</span><span class="p">:</span> <span class="n">x</span><span class="p">,</span>
  <span class="s1">&#39;bpm&#39;</span><span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="n">bpm</span><span class="p">)</span>
<span class="p">})</span>

<span class="n">alt</span><span class="o">.</span><span class="n">Chart</span><span class="p">(</span><span class="n">source</span><span class="p">)</span><span class="o">.</span><span class="n">mark_line</span><span class="p">()</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span>
    <span class="n">alt</span><span class="o">.</span><span class="n">X</span><span class="p">(</span><span class="s1">&#39;track&#39;</span><span class="p">),</span>
    <span class="n">alt</span><span class="o">.</span><span class="n">Y</span><span class="p">(</span><span class="s1">&#39;bpm&#39;</span><span class="p">,</span> <span class="n">scale</span><span class="o">=</span><span class="n">alt</span><span class="o">.</span><span class="n">Scale</span><span class="p">(</span><span class="n">domain</span><span class="o">=</span><span class="p">(</span><span class="mi">120</span><span class="p">,</span> <span class="mi">150</span><span class="p">))),</span>
<span class="p">)</span><span class="o">.</span><span class="n">properties</span><span class="p">(</span>
    <span class="n">title</span><span class="o">=</span><span class="s2">&quot;ASOT 950 Part 2 - BPM of track&quot;</span>
<span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">

<div class="output_area">


<div class="output_html rendered_html output_subarea output_execute_result">

<div id="altair-viz-e8662d781d78475594611185b5241188"></div>
<script type="text/javascript">
  (function(spec, embedOpt){
    let outputDiv = document.currentScript.previousElementSibling;
    if (outputDiv.id !== "altair-viz-e8662d781d78475594611185b5241188") {
      outputDiv = document.getElementById("altair-viz-e8662d781d78475594611185b5241188");
    }
    const paths = {
      "vega": "https://cdn.jsdelivr.net/npm//vega@5?noext",
      "vega-lib": "https://cdn.jsdelivr.net/npm//vega-lib?noext",
      "vega-lite": "https://cdn.jsdelivr.net/npm//vega-lite@4.8.1?noext",
      "vega-embed": "https://cdn.jsdelivr.net/npm//vega-embed@6?noext",
    };

    function loadScript(lib) {
      return new Promise(function(resolve, reject) {
        var s = document.createElement('script');
        s.src = paths[lib];
        s.async = true;
        s.onload = () => resolve(paths[lib]);
        s.onerror = () => reject(`Error loading script: ${paths[lib]}`);
        document.getElementsByTagName("head")[0].appendChild(s);
      });
    }

    function showError(err) {
      outputDiv.innerHTML = `<div class="error" style="color:red;">${err}</div>`;
      throw err;
    }

    function displayChart(vegaEmbed) {
      vegaEmbed(outputDiv, spec, embedOpt)
        .catch(err => showError(`Javascript Error: ${err.message}<br>This usually means there's a typo in your chart specification. See the javascript console for the full traceback.`));
    }

    if(typeof define === "function" && define.amd) {
      requirejs.config({paths});
      require(["vega-embed"], displayChart, err => showError(`Error loading script: ${err.message}`));
    } else if (typeof vegaEmbed === "function") {
      displayChart(vegaEmbed);
    } else {
      loadScript("vega")
        .then(() => loadScript("vega-lite"))
        .then(() => loadScript("vega-embed"))
        .catch(showError)
        .then(() => displayChart(vegaEmbed));
    }
  })({"config": {"view": {"continuousWidth": 400, "continuousHeight": 300}}, "data": {"name": "data-dca04cffd4b9f7cc1cb85a0e0c7c12c9"}, "mark": "line", "encoding": {"x": {"type": "quantitative", "field": "track"}, "y": {"type": "quantitative", "field": "bpm", "scale": {"domain": [120, 150]}}}, "title": "ASOT 950 Part 2 - BPM of track", "$schema": "https://vega.github.io/schema/vega-lite/v4.8.1.json", "datasets": {"data-dca04cffd4b9f7cc1cb85a0e0c7c12c9": [{"track": 0, "bpm": 135.017}, {"track": 1, "bpm": 131.998}, {"track": 2, "bpm": 132.079}, {"track": 3, "bpm": 132.013}, {"track": 4, "bpm": 131.999}, {"track": 5, "bpm": 132.156}, {"track": 6, "bpm": 132.114}, {"track": 7, "bpm": 133.988}, {"track": 8, "bpm": 134.106}, {"track": 9, "bpm": 132.013}, {"track": 10, "bpm": 132.048}, {"track": 11, "bpm": 131.788}, {"track": 12, "bpm": 131.962}, {"track": 13, "bpm": 132.012}, {"track": 14, "bpm": 131.937}, {"track": 15, "bpm": 133.067}, {"track": 16, "bpm": 133.011}, {"track": 17, "bpm": 133.003}]}}, {"mode": "vega-lite"});
</script>
</div>

</div>

</div>
</div>

</div>
    

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Not great, but it gets the point across.</p>
<p>Now, let's get exploring! ..</p>

</div>
</div>
</div>
</div>]]></content><author><name></name></author><category term="asot" /><category term="bpm" /><summary type="html"><![CDATA[Explorations and explanations.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://scottbrenner.github.io/asot-jupyter/images/methodology.png" /><media:content medium="image" url="https://scottbrenner.github.io/asot-jupyter/images/methodology.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>